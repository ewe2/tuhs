X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 24736 invoked from network); 26 Aug 2020 15:59:43 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 26 Aug 2020 15:59:43 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 8FD319DF4F; Thu, 27 Aug 2020 01:59:37 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id DE20C93D54;
	Thu, 27 Aug 2020 01:59:17 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 1023D93D54; Thu, 27 Aug 2020 01:59:15 +1000 (AEST)
Received: from mercury.lcs.mit.edu (mercury.lcs.mit.edu [18.26.0.122])
 by minnie.tuhs.org (Postfix) with ESMTPS id 9860793D49
 for <tuhs@tuhs.org>; Thu, 27 Aug 2020 01:59:09 +1000 (AEST)
Received: by mercury.lcs.mit.edu (Postfix, from userid 11178)
 id 674C418C0CD; Wed, 26 Aug 2020 11:59:08 -0400 (EDT)
To: tuhs@tuhs.org
Message-Id: <20200826155908.674C418C0CD@mercury.lcs.mit.edu>
Date: Wed, 26 Aug 2020 11:59:08 -0400 (EDT)
From: jnc@mercury.lcs.mit.edu (Noel Chiappa)
Subject: Re: [TUHS] Memory management in Dennis Ritchie's C Compiler
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: jnc@mercury.lcs.mit.edu
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

    > From: John Cowan

    > That's always true on the PDP-11 and Vax ... because the processor
    > architecture (which has pre-increment and post-decrement instructions,
    > but not their counterparts)

After Doug's message, I carefull re-read this, and I'm not sure it's correct?
The PDP-11 has pre-decrement and post-increment, not the other way around (as
above) - unless I'm misunderstanding what you meant by those terms?

That's why:

	*p++ = 0;

turns (if p is in R2) into

	CLR	(R2)+

R2 is used, and then incremented after it has been used.

   Noel
