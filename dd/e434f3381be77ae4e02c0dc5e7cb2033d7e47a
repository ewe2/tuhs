From: dave@horsfall.org (Dave Horsfall)
Date: Sat, 13 May 2017 07:12:14 +1000 (EST)
Subject: [TUHS] The evolution of Unix facilities and architecture
In-Reply-To: <1494570272.2218.180.camel@mni.thm.de>
References: <20170511140729.2262B18C09A@mercury.lcs.mit.edu>
 <20170511142142.GA4341@mcvoy.com>
 <CAC20D2M+kTnQJ0+q0EF-RmURTA8aq4R-2w98Ac3Cx9pB_Dc4AA@mail.gmail.com>
 <20170511171100.GA9980@yeono.kjorling.se>
 <alpine.BSF.2.20.1705120736210.67621@aneurin.horsfall.org>
 <1494570272.2218.180.camel@mni.thm.de>
Message-ID: <alpine.BSF.2.20.1705130708410.67621@aneurin.horsfall.org>

On Fri, 12 May 2017, Hellwig Geisse wrote:

> >     char*	cp1;
> >     char*	cp2;
> > 
> > etc, which IMHO makes it clear (which is every programmer's duty). I 
> > used  to write that way in a previous life, and the boss didn't 
> > complain.
> 
> This view does not work well with more complicated declarations like 
> "void (*p)(int)". What is the "fundamental type" here? One could argue 
> that the real culprit is the list construction, which does not mix well 
> with C declarations.

Let's see:

    aneurin% cdecl
    Type `help' or `?' for help
    explain void (*p)(int)
    declare p as pointer to function (int) returning void

So the "fundamental" type (if there was such a thing) would be a pointer 
to a function, I guess i.e. don't treat it as anything else.

-- 
Dave Horsfall DTM (VK2KFU)  "Those who don't understand security will suffer."

