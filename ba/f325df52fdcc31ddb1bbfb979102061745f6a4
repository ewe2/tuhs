From tuhs-bounces@minnie.tuhs.org Wed Oct 31 18:21:37 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.5 required=5.0 tests=DKIM_INVALID,DKIM_SIGNED,
	HEADER_FROM_DIFFERENT_DOMAINS,HTML_FONT_LOW_CONTRAST,HTML_MESSAGE,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no
	version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id 5a60a8e7
	for <ml@inbox.vuxu.org>;
	Wed, 31 Oct 2018 18:21:37 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 374E3A2312; Thu,  1 Nov 2018 04:21:36 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 38B9BA216D;
	Thu,  1 Nov 2018 04:21:01 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 9EC30A216F; Thu,  1 Nov 2018 03:22:42 +1000 (AEST)
Received: from mail-wr1-f50.google.com (mail-wr1-f50.google.com
 [209.85.221.50])
 by minnie.tuhs.org (Postfix) with ESMTPS id BF9C2A216D
 for <tuhs@tuhs.org>; Thu,  1 Nov 2018 03:22:36 +1000 (AEST)
Received: by mail-wr1-f50.google.com with SMTP id y16so17390706wrw.3
 for <tuhs@tuhs.org>; Wed, 31 Oct 2018 10:22:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ccc.com; s=google;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=W0qNgi7BTU4SuNrjwxU4Do0YaXO81X+9LH/b+aT4sBI=;
 b=X2tCkbQr0vydKdF3gUSrsvIQSsNWK+8V1iStB+jHYHirNZc7MJ+EMPDhrFOnNMVcK5
 wa/pWqoJdKvUoEPkngZpu8r/CEIxnm38nz5vVOc6n4ZMINxbagOb+UTkmC1WZpbgVW/w
 eSKQqHu53uMWZn0JDYzULBEwwDrKxQk6HAwec=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=W0qNgi7BTU4SuNrjwxU4Do0YaXO81X+9LH/b+aT4sBI=;
 b=BA4DNNvtJ/Ff1h/jdJG32p+KFzhTmItXQTAvy7DqhrJNJCHpB2xgfZZyX+lFRMuR32
 0JFPN97umLxLuSA5XkiYN4r0KLqZmBwxJ1h/nN/gJ6reW2InBMvALZSkieF6QhzSd5bV
 /2PnS2mi3A9rPSfU0tX9aIYknZFOEHFCom8Vg4cmtG2JsNMoT3Q2dRIibnIkbvIAqMoM
 goh/KYWqFVts5u20TI9SOi6a5iBYrZDF4QD5mh2jQ+IJM2UPNqiwxOCL41v2NRBndy+f
 wmfULrzkjpNc4awyqgFJacsZo5wSz2zQxu2/9+4yuSWBCoR+l41Rxekn1TSH86BxUPbU
 AbXw==
X-Gm-Message-State: AGRZ1gLjdMwaUPout1sXtt4jD7ZXDQYjx+U9AA1YLeNSYmnrFb2cqgvK
 di/CILS8k8kkO4GZa2ePU/OL1Jh9BVqCcd7IvLHhuA==
X-Google-Smtp-Source: AJdET5ceUJ1YwCedv8lJ++9JgZnKnBI31RRlAi+3dVdRd1rzZacSiS8eOktIvY4wpl4OhKuQEPyNHcMHdYSJQJ/78Bc=
X-Received: by 2002:adf:90af:: with SMTP id
 i44-v6mr3395858wri.77.1541006555272; 
 Wed, 31 Oct 2018 10:22:35 -0700 (PDT)
MIME-Version: 1.0
References: <20181031043810.GA10775@minnie.tuhs.org>
 <CABH=_VQ2U3UvtNSDtmMpfd2Ap9JT4Zbag0qYcN2yYwyYU5_TuQ@mail.gmail.com>
In-Reply-To: <CABH=_VQ2U3UvtNSDtmMpfd2Ap9JT4Zbag0qYcN2yYwyYU5_TuQ@mail.gmail.com>
From: Clem Cole <clemc@ccc.com>
Date: Wed, 31 Oct 2018 13:22:08 -0400
Message-ID: <CAC20D2OF9HLBH_8XmJ52v+BPvsFfEzrcvOy_ZEoQUmPR8sp51Q@mail.gmail.com>
To: Paul Winalski <paul.winalski@gmail.com>
Content-Type: multipart/alternative; boundary="00000000000052f2bc0579898c75"
Subject: Re: [TUHS] Unix APIs: elegant or not?
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Eunuchs Hysterical Society <tuhs@tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--00000000000052f2bc0579898c75
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Wed, Oct 31, 2018 at 12:51 PM Paul Winalski <paul.winalski@gmail.com>
wrote:

> For me one of the most important software design principles is that the
> simple and most common use cases should be the simplest for theuser to
> code.

It's OK if complicated things are complicated to code, but simple things
> should be kept simple.
>
+1 Amen.

>
> I've always thought that the UNIX file primitives very elegantly adhere
> to this principle.  Reading a file in UNIX is a simple open()/read().../c=
lose()
> sequence.  Contrast that with VMS's $QIO or IBM OS access methods, where
> the full complexity is not only exposed in the interface, it must be
> considered, set up, and controlled by the
> user for even the simplest operations.

As my friend Tom Texiera once so wisely observered, "*it was not so bad
that QIO had over a 1000 options, it was that each of them had to be test
for on each I/O.*"
I also remember having an argument with Culter about QIO vs UNIX I/O (he
was defending QIO at the time as it was 'better' - as being more
complete).   But I pointed out, that it was interesting that after stream
I/O was added to VMS, most DEC customers (and the internal language
libraries team) had switched to using stream (UNIX style I/O) for most
operations because it was simplier and just as fast.   It was one of the
few times, I saw Dave stop arguing as he really did not have a response.



> Multibuffered, asynchronous, interrupt-driven I/O is more complicated (if
> not downright clumsy) in UNIX than in VMS or OS/VS, but that's OK,
> IMO--it shifts the
> complexity burden to those doing complex things.
>
Exactly, those programs that need to do it, can when they need to.   That
said, because of our VMS experience, we added ASTs (which I tink are
simplier than UNIX signals) and a QIO like call to RTU because the
Real-Time customers coming from VMS needed (wanted) it.  Truth is async
I/O  was really useful for some special cases that we had customers that
really need use it.   But for the most part the simple UNIX 5 I/O calls
were good enough (athough I would still rather AST's).

BTW:  when we added threads we discovered that a lot of the need/use for
async I/O also went away and frankly much of the complexity (clumsiness) of
the async I/O code was not longer needed, as the threading to care of it
and certain was smaller and simplier.

Also, I'll agree it was a tad clumsy, but the old double-dd (ddd) program
(you can find it in the UUNET archives), uses two processes that
communicate via a pipe to do the same trick with a traditional (6th
edition) UNIX I/O system to do some of the same things.  Basically the two
processes, take turns between reading and writing.   Thus the asynchronous
is purely left in the kernel.  The user code is actually very simple.
 There is a pipe that passes a token back and forth as to when the next
read/write can start.  For old UNIX systems lacking async I/O, ddd(8)  was
only way I knew you get a tape drive such as QIC/4 or 8 mm, much less a 1/2
streamer to keep up.

Clem
=E1=90=A7

--00000000000052f2bc0579898c75
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_default" style=3D"font-family:arial,he=
lvetica,sans-serif"><br></div><br><div class=3D"gmail_quote"><div dir=3D"lt=
r"><font color=3D"#ff0000">On Wed, Oct 31, 2018 at 12:51 PM Paul Winalski &=
lt;<a href=3D"mailto:paul.winalski@gmail.com">paul.winalski@gmail.com</a>&g=
t; wrote:<br></font></div><blockquote class=3D"gmail_quote" style=3D"margin=
:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><font color=3D"#ff=
0000">For me one of the most important software design principles is that<s=
pan class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif=
"> </span>the simple and most common use cases should be the simplest for t=
heuser to code.=C2=A0</font></blockquote><blockquote class=3D"gmail_quote" =
style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><fo=
nt color=3D"#ff0000">It&#39;s OK if complicated things are complicated to c=
ode,<span class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans=
-serif"> </span>but simple things should be kept simple.<br></font></blockq=
uote><div><font color=3D"#0000ff"><span class=3D"gmail_default" style=3D"fo=
nt-family:arial,helvetica,sans-serif">+1 Amen.</span>=C2=A0</font></div><bl=
ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
ccc solid;padding-left:1ex">
<font color=3D"#ff0000"><br>
I&#39;ve always thought that the UNIX file primitives very elegantly<span c=
lass=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif"> </=
span>adhere to this principle.=C2=A0 Reading a file in UNIX is a simple<spa=
n class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif">=
 </span>open()/read().../close() sequence.=C2=A0 Contrast that with VMS&#39=
;s $QIO or<span class=3D"gmail_default" style=3D"font-family:arial,helvetic=
a,sans-serif"> </span>IBM OS access methods, where the full complexity is n=
ot only exposed<span class=3D"gmail_default" style=3D"font-family:arial,hel=
vetica,sans-serif"> </span>in the interface, it must be considered, set up,=
 and controlled by the<br>
user for even the simplest operations.=C2=A0</font></blockquote><div><div c=
lass=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif"><fo=
nt color=3D"#ff0000"></font><font color=3D"#0000ff">As my friend Tom Texier=
a once so wisely observered, &quot;<i style=3D"">it was not so bad that QIO=
 had over a 1000 options, it was that each of them had to be test for on ea=
ch I/O.</i>&quot;<span style=3D"font-family:Arial,Helvetica,sans-serif">=C2=
=A0</span></font></div></div><div><div class=3D"gmail_default" style=3D"fon=
t-family:arial,helvetica,sans-serif"><font color=3D"#0000ff">I also remembe=
r having an argument with Culter about QIO vs UNIX I/O (he was defending QI=
O at the time as it was &#39;better&#39; - as being more complete).=C2=A0 =
=C2=A0But I pointed out, that it was interesting that after stream I/O was =
added to VMS, most DEC customers (and the internal language libraries team)=
 had switched to using stream (UNIX style I/O) for most operations because =
it was simplier and just as fast.=C2=A0 =C2=A0It was one of the few times, =
I saw Dave stop arguing as he really did not have a response.=C2=A0 =C2=A0<=
/font></div><div class=3D"gmail_default" style=3D"font-family:arial,helveti=
ca,sans-serif"><font color=3D"#ff0000"><br></font></div></div><div><font co=
lor=3D"#ff0000">=C2=A0</font></div><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><font co=
lor=3D"#ff0000"> Multibuffered, asynchronous,<span class=3D"gmail_default" =
style=3D"font-family:arial,helvetica,sans-serif"> </span>interrupt-driven I=
/O is more complicated (if not downright clumsy) in<span class=3D"gmail_def=
ault" style=3D"font-family:arial,helvetica,sans-serif"> </span>UNIX than in=
 VMS or OS/VS, but that&#39;s OK, IMO--it shifts the<br>
complexity burden to those doing complex things.<br></font></blockquote><di=
v><span class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-s=
erif"><font color=3D"#ff0000"></font><font color=3D"#0000ff">Exactly, those=
 programs that need to do it, can when they need to.=C2=A0 =C2=A0That said,=
 because of our VMS experience, we added ASTs (which I tink are simplier th=
an UNIX signals) and a QIO like call to RTU because the Real-Time customers=
 coming from VMS needed (wanted) it.=C2=A0 Truth is async I/O=C2=A0 was rea=
lly useful for some special cases</font></span><font color=3D"#0000ff">=C2=
=A0<span class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-=
serif">that we had customers that really need use it.=C2=A0 =C2=A0But for t=
he most part the simple UNIX 5 I/O calls were good enough (athough I would =
still rather AST&#39;s).</span></font></div><div><span class=3D"gmail_defau=
lt" style=3D"font-family:arial,helvetica,sans-serif"><font color=3D"#0000ff=
"><br></font></span></div><div><span class=3D"gmail_default" style=3D"font-=
family:arial,helvetica,sans-serif"><font color=3D"#0000ff">BTW:=C2=A0 when =
we added threads we discovered that a lot of the need/use for async I/O als=
o went away and frankly much of the complexity (clumsiness) of the async I/=
O code was not longer needed, as the threading to care of it and certain wa=
s smaller and simplier.</font></span></div><div><span class=3D"gmail_defaul=
t" style=3D"font-family:arial,helvetica,sans-serif"><font color=3D"#0000ff"=
><br></font></span></div><div><span class=3D"gmail_default" style=3D"font-f=
amily:arial,helvetica,sans-serif"><font color=3D"#0000ff">Also, I&#39;ll ag=
ree it was a tad clumsy, but the old double-dd (ddd) program (you can find =
it in the UUNET archives), uses two processes that communicate via a pipe t=
o do the same trick with a traditional (6th edition) UNIX I/O system to do =
some of the same things.=C2=A0 Basically the two processes, take turns betw=
een reading and writing.=C2=A0 =C2=A0Thus the asynchronous is purely left i=
n the kernel.=C2=A0 The user code is actually very simple.=C2=A0 =C2=A0Ther=
e is a pipe that passes a token back and forth as to when the next read/wri=
te can start.=C2=A0 For old UNIX systems lacking async I/O, ddd(8)=C2=A0 wa=
s only way I knew you get a tape drive such as QIC/4 or 8 mm, much less a 1=
/2 streamer to keep up.</font></span></div><div><span class=3D"gmail_defaul=
t" style=3D"font-family:arial,helvetica,sans-serif"><font color=3D"#0000ff"=
><br></font></span></div><div><span class=3D"gmail_default" style=3D"font-f=
amily:arial,helvetica,sans-serif"><font color=3D"#0000ff">Clem</font></span=
></div></div></div><div hspace=3D"streak-pt-mark" style=3D"max-height:1px">=
<img alt=3D"" style=3D"width:0px;max-height:0px;overflow:hidden" src=3D"htt=
ps://mailfoogae.appspot.com/t?sender=3DaY2xlbWNAY2NjLmNvbQ%3D%3D&amp;type=
=3Dzerocontent&amp;guid=3D6d0107b0-c5dc-4d5d-bf7b-d20fafbb98f9"><font color=
=3D"#ffffff" size=3D"1">=E1=90=A7</font></div>

--00000000000052f2bc0579898c75--
