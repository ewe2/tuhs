From: schily@schily.net (Joerg Schilling)
Date: Thu, 30 Jun 2016 19:27:50 +0200
Subject: [TUHS] 68000 vs. 8086 ( was Algol68 vs. C at Bell Labs)
In-Reply-To: <6bec9228a3749e424f479675e12b0e71.squirrel@webmail.yaccman.com>
References: <20160630134457.BE26B18C103@mercury.lcs.mit.edu>
 <6bec9228a3749e424f479675e12b0e71.squirrel@webmail.yaccman.com>
Message-ID: <57755696.ZeDWkFFCgjjgPkR8%schily@schily.net>

scj at yaccman.com wrote:

> My memory was that the 68000 gave the 8086 a pretty good run for its
> money, but when Moto came out with a memory management chip it had some
> severe flaws that made paging and fault recovery impossible, while the
> equivalent features available on the 8086 line were tolerable.  There were
> some bizarre attempts to page with the 68000 (I remember one product that
> had two 68000 chips, one of which was solely to sit on the shoulder of the
> other and remember enough information to respond to faults!).  By the time
> Moto fixed it, the 8086 had taken the field...

The 68451 did exist early. We had a "ExorMax" development system with the MMU 
that we used to develop our UNOS derivate "VBERTOS" before we had our own 
hardware.

The design bug in the mc68000 was that the execption stack did not contain the 
complete microcode state for things like "*p++" and thus was not restartable at 
the same state.

The ideas using two 68000 did put the main CPU into halt (from wehre it could 
be restarted) and did only run the exception handling code on the second CPU.

Jörg

-- 
 EMail:joerg at schily.net                  (home) Jörg Schilling D-13353 Berlin
       joerg.schilling at fokus.fraunhofer.de (work) Blog: http://schily.blogspot.com/
 URL:  http://cdrecord.org/private/ http://sourceforge.net/projects/schilytools/files/'

