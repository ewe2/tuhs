X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	T_SCC_BODY_TEXT_LINE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 16319 invoked from network); 6 Feb 2022 14:15:14 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 6 Feb 2022 14:15:14 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id DC4339CA8D; Mon,  7 Feb 2022 00:15:13 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id D29E89BD5A;
	Mon,  7 Feb 2022 00:14:49 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="mnYi9J37";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 3D1049B8E4; Mon,  7 Feb 2022 00:14:34 +1000 (AEST)
Received: from mail-oi1-f169.google.com (mail-oi1-f169.google.com
 [209.85.167.169])
 by minnie.tuhs.org (Postfix) with ESMTPS id A266B9B8B1
 for <tuhs@minnie.tuhs.org>; Mon,  7 Feb 2022 00:14:33 +1000 (AEST)
Received: by mail-oi1-f169.google.com with SMTP id v67so14320804oie.9
 for <tuhs@minnie.tuhs.org>; Sun, 06 Feb 2022 06:14:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=Lr7rSGgrXlc208Ro3w6tbkS2zFRItrnD2wZGGmqWgJQ=;
 b=mnYi9J37Sa0Jr/OQ2nr2W8ekIdR/2AAS/8BSYRKQhnKs913eoBbP4OE1895nv60BBS
 ADkKxRcYB1n61fhPH9ZgL/8UO2mPbBuLpD/Q17fHqDRdiZ77WQOeR7MLhUiMy3rZijoJ
 +lYQhvIRT9683tt/vVCPRAJyikqN4FCoZd5PM5U0zYvU18cA4GWDJebeWIdMfhrbmoVC
 Y1Wn4lrM8FNy/UyW7x60g9nP9hboLJ4zVEGFQNwIb4LhwTYp97Xd9cIaKWvfHSnuJiN9
 cyZpnr3VcPmKv+ckZqKglz2E1OOMrvTtNByH15ihlCJ7BmAdnSE/xZ2sFoQMBJ+T8gzT
 lRdg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=Lr7rSGgrXlc208Ro3w6tbkS2zFRItrnD2wZGGmqWgJQ=;
 b=YjrHwI4m8Ehoz4uT6Xz20n9Mb62EpY84Bmml46BNPfHhrLPnuWX+/IgQHE/BRG0UpA
 dx5wfENlmf12wDyPJDkhZRNpoJbk5bHxmuJriEO8DBrz1vmoJdGvJJLZVQvJBtB/QnAM
 IPtuVwbpECK82VSp8FHyDKri4B7cZsIwOGOHbMWSMa1ql8BV5xJmpcQIViJaf8hyWAU3
 WzSi0jmDa2Ec4HrZ8yG/Jir9CP7TPIPmnzlmi6XJ5vum6jL9sAgVFLz6P7XrdJwjz9gp
 lhNRuj/0iqTTGvRh3MrbufsUMIGidiYe8JvJj/VsV+5wl9seAdHIQIeg4Ul9lsazut+f
 Wugg==
X-Gm-Message-State: AOAM530STRKCy0QzQpGTlmHg0luj2k23gJOzPNUY7/zHrnHxHlbaIBrn
 bXqMs0hLz3quZFge1OLPfx5MOWPF7D9exyNAo0WJCOzarMM=
X-Google-Smtp-Source: ABdhPJxYot8t7Pw/nrty3WklkEsSr1FFfU2VnWChSStkrHVbSonkXDgS7MBAUSsjlJxpmGjAXwSz0NfPtGKkQ332vzQ=
X-Received: by 2002:a05:6808:10c4:: with SMTP id
 s4mr3492967ois.297.1644156872906; 
 Sun, 06 Feb 2022 06:14:32 -0800 (PST)
MIME-Version: 1.0
References: <20220201155225.5A9541FB21@orac.inputplus.co.uk>
 <202202020747.2127lTTh005669@freefriends.org>
 <7C19F93B-4F21-4BB1-A064-0307D3568DB7@cfcl.com>
 <1nFWmo-1Gn-00@marmaro.de>
 <CAP2nic37m2aSCffgr8o_J+BkAbnrzFDUaHX9V0brd+L8+PqdPA@mail.gmail.com>
 <CALMnNGjfvtd=6qsmT6kXm3eEBM7OhhGSJ4Wbbjiv+B9P9rLafA@mail.gmail.com>
 <alpine.DEB.2.21.2202040304380.28373@sd-119843.dedibox.fr>
 <CAD2gp_Rn_==vzUw80geH7ryLwmU+uiCidQVfMLn51HhZV1VHfA@mail.gmail.com>
 <e201372274da4ed9cf75bcaaf43a5d95@firemail.de>
 <1644006490.2458.78.camel@mni.thm.de>
 <20220206005609.GG3045@mcvoy.com>
 <21015c2c-2652-bbc3-dbd7-ad3c31f485a2@gmail.com>
 <CAKzdPgzSH94Xg=XYYKy6J+dWAD+ZVDzUTNE=YNRkyVRH69PJfA@mail.gmail.com>
 <CACYmRNDzrSvbwnAEAVz=REsdqSs675_pkBhi5dm5iWRCwRVo=A@mail.gmail.com>
 <CAKzdPgxQmB8ikjQwExOVnOwGDQrc-N==qzf=ZwhH7Ut-fD6pCg@mail.gmail.com>
 <CACYmRNAKUYwVwbn+mXCAVyySV5sVEbZmN4wvQbQKXx-p+nKM=w@mail.gmail.com>
In-Reply-To: <CACYmRNAKUYwVwbn+mXCAVyySV5sVEbZmN4wvQbQKXx-p+nKM=w@mail.gmail.com>
From: Dan Cross <crossd@gmail.com>
Date: Sun, 6 Feb 2022 09:13:56 -0500
Message-ID: <CAEoi9W6gk4cR0EoGzbDFqXkdz9o+Jiu0izMrYHtuq7Zxb=n0kw@mail.gmail.com>
To: Ed Carp <erc@pobox.com>
Content-Type: multipart/alternative; boundary="0000000000005d5cbe05d75a1af8"
Subject: Re: [TUHS] more about Brian...
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: COFF <coff@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--0000000000005d5cbe05d75a1af8
Content-Type: text/plain; charset="UTF-8"

Oh dear. This is getting a little heated. TUHS to Bcc:, replies to COFF.

On Sun, Feb 6, 2022 at 8:15 AM Ed Carp <erc@pobox.com> wrote:

> Since you made this personal and called me out specifically, I will
> respond:
>
> "In what way is automatic memory management harder, more unsafe, and
> less robust than hand-written memory management using malloc and
> free?"
>
> Because there's no difference in the two. Someone had to write the
> "automatic memory management", right?
>

I cannot agree with this, there is a big difference.

With GC, you are funneling all of the fiddly bits of dealing with memory
management through a runtime that is written by a very small pool of people
who are intimately familiar with the language, the runtime, the compilation
environment, and so on. That group of subject matter experts produce a
system that is tested by every application (much like the _implementation_
of malloc/free itself, which is not usually reproduced by every programmer
who _uses_ malloc/free).

It's like in "pure" functional languages such as Haskell, where everything
is immutable: that doesn't mean that registers don't change values, or that
memory cells don't get updated, or that IO doesn't happen, or the clock
doesn't tick. Rather, it means that the programmer makes a tradeoff where
they cede control over those things to the compiler and a runtime written
by a constrained set of contributors, in exchange for guarantees those
things make about the behavior of the program.

With manual malloc/free, one smears responsibility for getting it right
across every program that does dynamic memory management. Some get it
right; many do not.

In many ways, the difference between automatic and manual memory management
is like the difference between programming in assembler and programming in
a high-level language. People have written reliable, robust assembler for
decades (look at the airline industry), but few people would choose to do
so today; why? Because it's tedious and life is too short as it is.
Further, the probability of error is greater than in a high-level language;
why tempt fate?

[snip]
> "This discussion should probably go to COFF, or perhaps I should just
> leave the list. I am starting to feel uncomfortable here. Too much
> swagger."
>
> I read through the thread. Just because people don't agree with each
> other doesn't equate to "swagger". I've seen little evidence of
> anything other than reasoned analysis and rational, respectful
> discussion. Was there any sort of personal attacks that I missed?
>

It is very difficult, in a forum like this, to divine intent. I know for a
fact that I've written things to this list that were interpreted very
differently than I meant them.

That said, there has definitely been an air that those who do not master
manual memory management are just being lazy and that "new" programmers are
unskilled. Asserting that this language or that is "ours" due to its
authors while that is "theirs" or belongs solely to some corporate sponsor
is a bit much. The reality is that languages and operating systems and
hardware evolve over time, and a lot of the practices we took for granted
10 years ago deserve reexamination in the light of new context. There's
nothing _wrong_ with that, even if it may be uncomfortable (I know it is
for me).

The fact of the matter is, code written with malloc/free, if written
> carefully, will run for *years*. There are Linux boxes that have been
> running for literally years without being rebooted, and mainframes and
> miniframes that get booted only when a piece of hardware fails.
>

That there exist C programs that have run for many years without faults is
indisputable. Empirically, people _can_ write reliable C programs, but it
is often harder than it seems to do so, particularly since the language
standard gives so much latitude for implementations to change semantics in
surprising ways over time. Just in the past couple of weeks a flaw was
revealed in some Linux daemon that allowed privilege escalation to
root...due to improper memory management. That flaw had been in production
for _12 years_. Sadly, this is not an isolated incident.

That said, does manual memory management have a place in modern computing?
Of course it does, as you rightly point out. So does assembly language.
Rust came up in the context of this thread as a GC'd language, and it may
be worth mentioning that Rust uses manual memory management; the language
just introduces some facilities that make this safer. For instance, the
concept of ownership is elevated to first-class status in Rust, and there
are rules about taking references to things; when something's owner goes
out of scope, it is "dropped", but the compiler statically enforces that
there are no outstanding references to that thing. Regardless, when dealing
with some resource it is often the programmer's responsibility to make sure
that a suitable drop implementation exists. FWIW, I used to sit down the
hall from a large subgroup of the Go developers; we usually ate lunch
together. I know that many of them shared my opinion that Rust and Go are
very complimentary. No one tool is right for all tasks.

        - Dan C.

--0000000000005d5cbe05d75a1af8
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr">Oh dear. This is getting a little heated.=
 TUHS to Bcc:, replies to COFF.</div><br><div class=3D"gmail_quote"><div di=
r=3D"ltr" class=3D"gmail_attr">On Sun, Feb 6, 2022 at 8:15 AM Ed Carp &lt;<=
a href=3D"mailto:erc@pobox.com">erc@pobox.com</a>&gt; wrote:<br></div><bloc=
kquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:=
1px solid rgb(204,204,204);padding-left:1ex">Since you made this personal a=
nd called me out specifically, I will respond:<br>
<br>
&quot;In what way is automatic memory management harder, more unsafe, and<b=
r>
less robust than hand-written memory management using malloc and<br>
free?&quot;<br>
<br>
Because there&#39;s no difference in the two. Someone had to write the<br>
&quot;automatic memory management&quot;, right?<br></blockquote><div><br></=
div><div>I cannot agree with=C2=A0this, there is a big difference.</div><di=
v><br></div><div>With GC, you are funneling all of the fiddly bits of deali=
ng with memory management through a runtime that is written by a very small=
 pool of people who are intimately familiar with the language, the runtime,=
 the compilation environment, and so on. That group of subject matter exper=
ts produce a system that is tested by every application (much like the _imp=
lementation_ of malloc/free itself, which is not usually reproduced by ever=
y programmer who _uses_ malloc/free).</div><div><br></div><div><div><div>It=
&#39;s like in &quot;pure&quot; functional languages such as Haskell, where=
 everything is immutable: that doesn&#39;t mean that registers don&#39;t ch=
ange values, or that memory cells don&#39;t get updated, or that IO doesn&#=
39;t happen,=C2=A0or the clock doesn&#39;t tick. Rather, it means that the =
programmer makes a tradeoff where they cede control over those things to th=
e compiler and a runtime written by a constrained set of contributors, in e=
xchange for guarantees those things make about the behavior of the program.=
</div></div></div><div><br></div><div>With manual malloc/free, one smears r=
esponsibility=C2=A0for getting it right across every program that does dyna=
mic memory management. Some get it right; many do not.</div><div><br></div>=
<div><div>In many ways, the difference between automatic and manual memory =
management is like the difference between programming in assembler and prog=
ramming in a high-level language. People have written reliable, robust asse=
mbler for decades (look at the airline industry), but few people would choo=
se to do so today; why? Because it&#39;s tedious and life is too short as i=
t is. Further, the probability of error is greater than in a high-level lan=
guage; why tempt fate?<br></div><div><br></div></div><blockquote class=3D"g=
mail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204=
,204,204);padding-left:1ex">[snip]<br>
&quot;This discussion should probably go to COFF, or perhaps I should just<=
br>
leave the list. I am starting to feel uncomfortable here. Too much<br>
swagger.&quot;<br>
<br>
I read through the thread. Just because people don&#39;t agree with each<br=
>
other doesn&#39;t equate to &quot;swagger&quot;. I&#39;ve seen little evide=
nce of<br>
anything other than reasoned analysis and rational, respectful<br>
discussion. Was there any sort of personal attacks that I missed?<br></bloc=
kquote><div><br></div><div>It is very difficult, in a forum like this, to d=
ivine intent. I know for a fact that I&#39;ve written things to this list t=
hat were interpreted very differently than I meant them.</div><div><br></di=
v><div>That said, there has definitely been an air that those who do not ma=
ster manual memory management are just being lazy and that &quot;new&quot; =
programmers are unskilled. Asserting that this language or that is &quot;ou=
rs&quot; due to its authors while that is &quot;theirs&quot; or belongs sol=
ely to some corporate sponsor is a bit much. The reality is that languages =
and operating systems and hardware evolve over time, and a lot of the pract=
ices we took for granted 10 years ago deserve reexamination in the light of=
 new context. There&#39;s nothing _wrong_ with that, even if it may be unco=
mfortable (I know it is for me).</div><div><br></div><blockquote class=3D"g=
mail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204=
,204,204);padding-left:1ex">
The fact of the matter is, code written with malloc/free, if written<br>
carefully, will run for *years*. There are Linux boxes that have been<br>
running for literally years without being rebooted, and mainframes and<br>
miniframes that get booted only when a piece of hardware fails.<br></blockq=
uote><div><br></div><div>That there exist C programs that have run for many=
 years without faults is indisputable. Empirically, people _can_ write reli=
able=C2=A0C programs,=C2=A0but it is often harder than it seems to do so, p=
articularly since the language standard gives so much latitude for implemen=
tations to change semantics in surprising ways over time. Just in the past =
couple of weeks a flaw was revealed in some Linux daemon that=C2=A0allowed =
privilege escalation to root...due to improper memory management. That flaw=
 had been in production for _12 years_. Sadly, this is not an isolated=C2=
=A0incident.</div><div><br></div><div><div>That said, does manual memory ma=
nagement have a place in modern=C2=A0computing? Of course it does, as you r=
ightly point out. So does assembly language. Rust came up in the context of=
 this thread as a GC&#39;d language, and it may be worth mentioning that Ru=
st uses manual memory management; the language just introduces some facilit=
ies that make this safer. For instance, the concept of ownership is elevate=
d to first-class status in Rust, and there are rules about taking reference=
s to things; when something&#39;s owner goes out of scope, it is &quot;drop=
ped&quot;, but the compiler statically enforces that there are no outstandi=
ng references to that thing. Regardless,=C2=A0when dealing with some resour=
ce it is often the programmer&#39;s responsibility=C2=A0to make sure that a=
 suitable drop implementation exists. FWIW, I used to sit down the hall fro=
m a large subgroup of the Go developers; we usually ate lunch together. I k=
now that many of them shared my opinion that Rust and Go are very complimen=
tary. No one tool is right for all tasks.</div><div><br></div><div>=C2=A0 =
=C2=A0 =C2=A0 =C2=A0 - Dan C.</div><div><br></div><div><br></div><div></div=
></div></div></div>

--0000000000005d5cbe05d75a1af8--
