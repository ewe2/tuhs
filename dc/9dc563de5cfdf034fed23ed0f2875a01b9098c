Return-Path: <tuhs-bounces@minnie.tuhs.org>
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,HEADER_FROM_DIFFERENT_DOMAINS,HTML_FONT_LOW_CONTRAST,
	HTML_MESSAGE,MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham
	autolearn_force=no version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id 3601cff5
	for <ml@inbox.vuxu.org>;
	Wed, 9 Jan 2019 20:52:54 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id AA66293D29; Thu, 10 Jan 2019 06:52:53 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id EAA6793D07;
	Thu, 10 Jan 2019 06:52:20 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=pass (1024-bit key; unprotected) header.d=ccc.com header.i=@ccc.com header.b="K1F8jrBD";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id A9C8F93D07; Thu, 10 Jan 2019 06:52:17 +1000 (AEST)
Received: from mail-wm1-f53.google.com (mail-wm1-f53.google.com
 [209.85.128.53])
 by minnie.tuhs.org (Postfix) with ESMTPS id 7BEE593D06
 for <tuhs@tuhs.org>; Thu, 10 Jan 2019 06:52:16 +1000 (AEST)
Received: by mail-wm1-f53.google.com with SMTP id p6so9777781wmc.1
 for <tuhs@tuhs.org>; Wed, 09 Jan 2019 12:52:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ccc.com; s=google;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=I3qWEBXLCrg+g2eyWsAXE9huM5Q2WAG/mepgSM6hegI=;
 b=K1F8jrBDM4UL8rBM5hMGQmBFx+1E9yeiJSvwGD26+WH7BZDy8qO/0kXsmT/6atVmEB
 nVtdJcIiNnNBLNMHwKKMybjvod8MURCKqsRP3//YcmH3NbubDbWPD2CF79tk48D7/ZKn
 ysj3Vof43TPJo5rPnGZmEMaILzSwIptyMiCq8=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=I3qWEBXLCrg+g2eyWsAXE9huM5Q2WAG/mepgSM6hegI=;
 b=MqAwX2kDSuCuEvnb9bk7GNv6hB+AW4I6EnocgnAqR7069Hw/tF5tNvFerDXiyr1Z+U
 SbQxb6oDe9FZoBpMCkEo22tCa6qkdPfMzRWeKmfGYG0KIlV9m8qmaSRhFfeoubYSJIn6
 V6YPy2B94TV1QuStMvtgMNkvn3xCTte/zIgMUg+uTyf8csplq7YSZ/KsAGphMugdW7Ej
 Wtks9VYt5D4U/Y5VeosS1YEdquH3MJ8dYIVpHqGeoY+tRb0UWCkK11rrol5jX+T5/tCW
 W/b710ePsTErET/TW/5K0oYv9hPW3gIPbP8T8fF6ZsB7WW3NG4Rao/LH3F4CAoA/NL9u
 V5JA==
X-Gm-Message-State: AJcUukfQcNHXBKFqYf5zNyGq3yUGW/uXHznDMDd7MCGONo140kUjbeXj
 W4HVml5IiMwHk2ogizWqyrPcpekjfTu3Gpq8oR+10dVxW6xAUg==
X-Google-Smtp-Source: ALg8bN6rsERA1ke2d1WAcfG4huPZl4AVhoWkDfJpeOHje/7CiaowWAzJsq1WXJu+Y9bQ/9shOPqTC9sKM7TEB85s7k4=
X-Received: by 2002:a1c:aa0f:: with SMTP id t15mr6968171wme.108.1547067134516; 
 Wed, 09 Jan 2019 12:52:14 -0800 (PST)
MIME-Version: 1.0
References: <CANCZdfrXQgsqsQYmYNw5L5dVE96Zs5PnJArZFcv0bsLzB0-EWw@mail.gmail.com>
In-Reply-To: <CANCZdfrXQgsqsQYmYNw5L5dVE96Zs5PnJArZFcv0bsLzB0-EWw@mail.gmail.com>
From: Clem Cole <clemc@ccc.com>
Date: Wed, 9 Jan 2019 15:51:48 -0500
Message-ID: <CAC20D2P6uXXbpNKmxM4mrdaA9TrmWivvjTdg-5JQHL=ag1qgTw@mail.gmail.com>
To: Warner Losh <imp@bsdimp.com>
Content-Type: multipart/alternative; boundary="000000000000ff38e1057f0ca2e4"
Subject: Re: [TUHS] Origin of the name 'strategy'
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Eunuchs Hysterical Society <tuhs@tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000ff38e1057f0ca2e4
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

below....

On Mon, Jan 7, 2019 at 4:22 PM Warner Losh <imp@bsdimp.com> wrote:

> So what's the origin of the name 'strategy'  for the I/O routine in Unix
> that drivers provide? Everything I've found in the early papers just says
> that's what the routine is called. Is there a story behind why it was
> chosen? My own theory is that it's in the sense of 'coping strategy' when
> the driver needs to service more I/O for the upper layers, but that's jus=
t
> a WAG.
>

FWIW:   Warren has a scan of the 1976 USG document:   "UNIX Program
Description"  Program Generic PG-1C300 Issue 2
From the section called:  BIO01 - Block I/O, on the 5th page I think  there
seems to be a hint of why it was called strategy.   Under the description
of the breada routine are the words:

*Read ahead is a technique whereby an attempt is made to anticipate where
the next read request on a device will be and to preread that data. In this
manner, the program requesting the read will not be subjected to positional
and rotational latency or device queuing, if read ahead is completed before
the next block is requested. There are different strategies that can be
used for-doing read ahead. On UNIX, all reads (not including physical I/O)
result in a full 512 byte block being read from=C2=B7 the device. Smaller
amounts of data could be read if a program requested it, however, since
disks transfer times are small in comparison to positional and rotational
latency times, any extra transfer is inconsequential. Also, most DEC disks
are designed around a 512 byte sector and while fewer than 512 bytes may be
specified, the disk controller is busy until a full sector has been
transferred. By reading the full 512 bytes, any subsequent read or write
which references data within that block will not have to be lead (if the
block does not leave the system). Besides the advantage gained by reading a
minimum of 512 bytes instead of the desired quantities, the next block is
anticipated and read under certain conditions. Thus, one request will spawn
several read requests to bring data into the system. A routine for finding
a block that is already in memory (bio.c/incore) must be available to
determine whether any reads need be done and the read ahead strategy must
be capable of determining when read ahead should be discontinued so that
superfluous reads are not generated.*

*The strategy adopted under UNIX is to pursue read ahead as long as a
process is reading (512 byte blocks) sequentially through a file or a
device. When the first non sequential read is requested, read ahead is
discontinued and is not restarted until sequential accesses begin again. *

*Bio.c/breada carries out the read ahead operation. Starting and stopping
read ahead and determining which block number in a file or on a device is
the read ahead block ("rablkno") is done by the higher level function
rdwri.c/readi. *

*In implementing the read ahead strategy, bio.c/breada makes use of
bio.c/incore to determine whether a block is already in memory. For the
desired block "blkno", the bio.c/breada function behaves exactly like
bio.c/bread. That is, a synchronous read is performed and the process
requesting the read is roadblocked until it is completed. Since the desired
block may already be within system. bio.c/incore is called to look for that
block among the buffers on the freelist (bfreelist"). If the block is
already in memory. bio.c/bread is called to get the buffer. If the desired
biock has not already been read by a previous read operation then
bio.c/getblk is called to see if the block is possibly on a device queue
waiting for its turn to be read. If that is not the case, a buffer is
allocated for the read and the appropriate device strategy routine is
called. *

*Bio.c/breada does not wait (yet) for the read to complete. Rather, it goes
through a similar operation for the read ahead block "rablkno".
Bio.c/incore is called to search the free list of buffers ("bfreelist") to
see if the block was read in a previous read operation. Nothing will be
done, of course, if the read ahead block is in memory. If it is not in
memory, bio.c/getblk is called to search the device queue for it or to
allocate a block so that it may be read. The device strategy module is
called to read the read ahead block, however, the buffer will be marked
(B_ASYNC in "b_flags") so that when the read completes the buffer is
returned to the pool of available buffers. Bio.c/breada then waits for the
read of the the desired block to complete. It does not wait for the read
ahead block . *

*An external variable "raflg" is available for turning off all read ahead
on alldevices. "Raflg" is initialized to one, however, by changing it to
zero read ahead is eliminated. As with bio.c/bread any error detection is
done as a result of the interrupt handler indicating an error to
bio.c/lncore and a system error (in "u_error") being posted. These errors
are of no concern to bio.c/breada or bio.c/bread and are used only at
higher levels of software to return errors to the user. *


=E1=90=A7

--000000000000ff38e1057f0ca2e4
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div di=
r=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div class=3D"gmail_default" st=
yle=3D"font-family:arial,helvetica,sans-serif"><br></div></div><div class=
=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif">below..=
..</div><br><div class=3D"gmail_quote"><div dir=3D"ltr">On Mon, Jan 7, 2019=
 at 4:22 PM Warner Losh &lt;<a href=3D"mailto:imp@bsdimp.com">imp@bsdimp.co=
m</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin=
:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"=
><div dir=3D"ltr">So what&#39;s the origin of the name &#39;strategy&#39;=
=C2=A0 for the I/O routine in Unix that drivers provide? Everything I&#39;v=
e found in the early papers just says that&#39;s what the routine is called=
. Is there a story behind why it was chosen? My own theory is that it&#39;s=
 in the sense of &#39;coping strategy&#39; when the driver needs to service=
 more I/O for the upper layers, but that&#39;s just a WAG.</div></blockquot=
e><div><br></div><div class=3D"gmail_default" style=3D"font-family:arial,he=
lvetica,sans-serif">FWIW:=C2=A0 =C2=A0Warren has a scan of the 1976 USG doc=
ument:=C2=A0 =C2=A0&quot;UNIX Program Description&quot;=C2=A0 Program Gener=
ic PG-1C300 Issue 2</div><div class=3D"gmail_default" style=3D"font-family:=
arial,helvetica,sans-serif">From the section called:=C2=A0 BIO01 - Block I/=
O, on the 5th page I think=C2=A0 there seems to be a hint of why it was cal=
led strategy.=C2=A0 =C2=A0Under the description of the breada routine are t=
he words:=C2=A0</div><div class=3D"gmail_default" style=3D"font-family:aria=
l,helvetica,sans-serif"><br></div></div></div></div></div></div></div><bloc=
kquote style=3D"margin:0 0 0 40px;border:none;padding:0px"><div><div><div><=
div><div><div class=3D"gmail_quote"><div class=3D"gmail_default" style=3D"f=
ont-family:arial,helvetica,sans-serif"><i>Read ahead is a technique whereby=
 an attempt is made to anticipate where the next read request on a device w=
ill be and to preread that data. In this manner, the program requesting the=
 read will not be subjected to positional and rotational latency or device =
queuing, if read ahead is completed before the next block is requested. The=
re are different strategies that can be used for-doing read ahead. On UNIX,=
 all reads (not including physical I/O) result in a full 512 byte block bei=
ng=C2=A0read from=C2=B7 the device. Smaller amounts of data could be read i=
f a program requested it, however, since disks transfer times are small in =
comparison to positional and rotational latency times, any extra transfer i=
s inconsequential. Also, most DEC disks are designed around a 512 byte sect=
or and while fewer than 512 bytes may be specified, the disk controller is =
busy until a full sector has been transferred. By reading the full 512 byte=
s, any subsequent read or write which references data within that block wil=
l not have to be lead (if the block does not leave the system). Besides the=
 advantage gained by reading a minimum of 512 bytes instead of the desired =
quantities, the next block is anticipated and read under certain conditions=
. Thus, one request will spawn several read=C2=A0requests to bring data int=
o the system. A routine for finding a block that is already in memory (bio.=
c/incore) must be available to determine whether any reads need be done and=
 the read ahead strategy must be capable of determining when read ahead sho=
uld be discontinued so that superfluous reads are not generated.</i></div><=
/div></div></div></div></div></div><div><div><div><div><div><div class=3D"g=
mail_quote"><div class=3D"gmail_default" style=3D"font-family:arial,helveti=
ca,sans-serif"><i><br></i></div></div></div></div></div></div></div><div><d=
iv><div><div><div><div class=3D"gmail_quote"><div class=3D"gmail_default"><=
div class=3D"gmail_default"><font face=3D"arial, helvetica, sans-serif"><i>=
The strategy adopted under UNIX is to pursue read ahead as long as a proces=
s is reading (512 byte blocks) sequentially through a file or a device. Whe=
n the first non sequential read is requested, read ahead is discontinued an=
d is not restarted until sequential accesses begin again.=C2=A0</i></font><=
/div></div></div></div></div></div></div></div><div><div><div><div><div><di=
v class=3D"gmail_quote"><div class=3D"gmail_default"><div class=3D"gmail_de=
fault"><font face=3D"arial, helvetica, sans-serif"><i><br></i></font></div>=
</div></div></div></div></div></div></div><div><div><div><div><div><div cla=
ss=3D"gmail_quote"><div class=3D"gmail_default"><div class=3D"gmail_default=
"><font face=3D"arial, helvetica, sans-serif"><i>Bio.c/breada carries out t=
he read ahead operation. Starting and stopping read ahead and determining w=
hich block number in a file or on a device is the read ahead block (&quot;r=
ablkno&quot;) is done by the higher level function rdwri.c/readi.=C2=A0</i>=
</font></div></div></div></div></div></div></div></div><div><div><div><div>=
<div><div class=3D"gmail_quote"><div class=3D"gmail_default"><div class=3D"=
gmail_default"><font face=3D"arial, helvetica, sans-serif"><i><br></i></fon=
t></div></div></div></div></div></div></div></div><div><div><div><div><div>=
<div class=3D"gmail_quote"><div class=3D"gmail_default"><div class=3D"gmail=
_default"><font face=3D"arial, helvetica, sans-serif"><i>In implementing th=
e read ahead strategy, bio.c/breada makes use of bio.c/incore to determine =
whether a block is already in memory. For the desired block &quot;blkno&quo=
t;, the bio.c/breada function behaves exactly like bio.c/bread. That is, a =
synchronous read is performed and the process requesting the read is roadbl=
ocked until it is completed. Since the desired block may already be within =
system. bio.c/incore is called to look for that block among the buffers on =
the freelist (bfreelist&quot;). If the block is already in memory. bio.c/br=
ead is called to get the buffer. If the desired biock has not already been =
read by a previous read operation then bio.c/getblk is called to see if the=
 block is possibly on a device queue waiting for its turn to be read. If th=
at is not the case, a buffer is allocated for the read and the appropriate =
device strategy routine is called.=C2=A0</i></font></div></div></div></div>=
</div></div></div></div><div><div><div><div><div><div class=3D"gmail_quote"=
><div class=3D"gmail_default"><div class=3D"gmail_default"><font face=3D"ar=
ial, helvetica, sans-serif"><i><br></i></font></div></div></div></div></div=
></div></div></div><div><div><div><div><div><div class=3D"gmail_quote"><div=
 class=3D"gmail_default"><div class=3D"gmail_default"><font face=3D"arial, =
helvetica, sans-serif"><div class=3D"gmail_default"><i>Bio.c/breada does no=
t wait (yet) for the read to complete. Rather, it goes through a similar op=
eration for the read ahead block &quot;rablkno&quot;. Bio.c/incore is calle=
d to search the free list of buffers (&quot;bfreelist&quot;) to see if the =
block was read in a previous read operation. Nothing will be done, of cours=
e, if the read ahead block is in memory. If it is not in memory, bio.c/getb=
lk is called to search the device queue for it or to allocate a block so th=
at it may be read. The device strategy module is called to read the read ah=
ead block, however, the buffer will be marked (B_ASYNC in &quot;b_flags&quo=
t;) so that when the read completes the buffer is returned to the pool of a=
vailable buffers. Bio.c/breada then waits for the read of the the desired b=
lock to complete. It does not wait for the read ahead block .=C2=A0</i></di=
v></font></div></div></div></div></div></div></div></div><div><div><div><di=
v><div><div class=3D"gmail_quote"><div class=3D"gmail_default"><div class=
=3D"gmail_default"><font face=3D"arial, helvetica, sans-serif"><div class=
=3D"gmail_default"><i><br></i></div></font></div></div></div></div></div></=
div></div></div><div><div><div><div><div><div class=3D"gmail_quote"><div cl=
ass=3D"gmail_default"><div class=3D"gmail_default"><font face=3D"arial, hel=
vetica, sans-serif"><div class=3D"gmail_default"><i>An external variable &q=
uot;raflg&quot; is available for turning off all read ahead on alldevices. =
&quot;Raflg&quot; is initialized to one, however, by changing it to zero re=
ad ahead is eliminated. As with bio.c/bread any error detection is done as =
a result of the interrupt handler indicating an error to bio.c/lncore and a=
 system error (in &quot;u_error&quot;) being posted. These errors are of no=
 concern to bio.c/breada or bio.c/bread and are used only at higher levels =
of software to return errors to the user.=C2=A0</i></div></font></div></div=
></div></div></div></div></div></div><div><div><div><div><div><div class=3D=
"gmail_quote"><div class=3D"gmail_default"><div class=3D"gmail_default" sty=
le=3D"font-family:arial,helvetica,sans-serif"><br></div></div></div></div><=
/div></div></div></div></blockquote><div dir=3D"ltr"><div dir=3D"ltr"><div =
dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div class=3D"gmail_quote"><d=
iv class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif"=
><br></div></div></div></div></div></div></div></div><div hspace=3D"streak-=
pt-mark" style=3D"max-height:1px"><img alt=3D"" style=3D"width:0px;max-heig=
ht:0px;overflow:hidden" src=3D"https://mailfoogae.appspot.com/t?sender=3DaY=
2xlbWNAY2NjLmNvbQ%3D%3D&amp;type=3Dzerocontent&amp;guid=3D50e63683-701b-492=
3-947b-056b34cd5857"><font color=3D"#ffffff" size=3D"1">=E1=90=A7</font></d=
iv>

--000000000000ff38e1057f0ca2e4--
