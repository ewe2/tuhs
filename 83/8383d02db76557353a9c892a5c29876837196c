From: hellwig.geisse@mni.thm.de (Hellwig Geisse)
Date: Fri, 12 May 2017 08:24:32 +0200
Subject: [TUHS] The evolution of Unix facilities and architecture
In-Reply-To: <alpine.BSF.2.20.1705120736210.67621@aneurin.horsfall.org>
References: <20170511140729.2262B18C09A@mercury.lcs.mit.edu>
 <20170511142142.GA4341@mcvoy.com>
 <CAC20D2M+kTnQJ0+q0EF-RmURTA8aq4R-2w98Ac3Cx9pB_Dc4AA@mail.gmail.com>
 <20170511171100.GA9980@yeono.kjorling.se>
 <alpine.BSF.2.20.1705120736210.67621@aneurin.horsfall.org>
Message-ID: <1494570272.2218.180.camel@mni.thm.de>

On Fr, 2017-05-12 at 07:44 +1000, Dave Horsfall wrote:
> 
> Am I the only one here who thinks that e.g. a char pointer should be 
> "char* cp1, cp2" instead of "char *cp1, *cp2"?  I.e. the fundamental
> type is "char*", not "char", and to this day I still write:
> 
>     char*	cp1;
>     char*	cp2;
> 
> etc, which IMHO makes it clear (which is every programmer's duty).
> I used  to write that way in a previous life, and the boss didn't 
> complain.

This view does not work well with more complicated
declarations like "void (*p)(int)". What is the
"fundamental type" here? One could argue that the
real culprit is the list construction, which does
not mix well with C declarations.

Hellwig

