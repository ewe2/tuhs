From: bakul@bitblocks.com (Bakul Shah)
Date: Sun, 29 Oct 2017 19:54:28 -0700
Subject: [TUHS] basic tools / Universal Unix
In-Reply-To: Your message of "Mon, 30 Oct 2017 00:55:07 -0000."
 <20171030005507.D30C620202@orac.inputplus.co.uk>
References: <CAC20D2NNsM6jGGD_7=yXq=oUVrvD741Rt=B-Q4-F-xR5Nb-Fkw@mail.gmail.com>
 <2962D014-8FF9-4E53-8000-EF49C49817E9@bitblocks.com>
 <20171030005507.D30C620202@orac.inputplus.co.uk>
Message-ID: <20171030025444.16E04156E7D8@mail.bitblocks.com>

On Mon, 30 Oct 2017 00:55:07 -0000 Ralph Corderoy <ralph at inputplus.co.uk> wrote:
Ralph Corderoy writes:
> Hi Bakul,
> 
> Regarding vi:
> > As an example, you can map a key to do a sequence of operations but
> > you you can't then use it in conjunction with search to repeat them
> > over a range of lines.
> 
> You can use tail recursion in the macro because a failed search causes
> it to stop.  So `qqq' to start recording to register `q', and then
> instantly stop recording, clearing it.  Then the real definition, ending
> in an execution of the empty `q'.
> 
>     qq/4$^Ma2^[@qq
> 
> And finally an `@q' to kick off the recursion.

Thanks, didn't know about q. However, nvi doesn't have q.  vim
does (but I rarely ever use it so when I tried the above it
failed). What I was getting at is being able to define
commands that can take one or two arguments like the bulitins,
separate from any key mapping. You need an ability to pass and
refer to arguments as well as refer to the current context.
And to be able to operate on char/word/line/para/sections.  If
this machinery was accessible, may be even many of vi's
builtins can be implemented this way.  E.g "d}" maps to
(delete 1para), "3dd" maps to (delete 3line) and so on.

