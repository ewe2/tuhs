From: random832@fastmail.us (random832@fastmail.us)
Date: Fri, 12 Sep 2014 09:37:16 -0400
Subject: [TUHS] Etymology of bc(1)
In-Reply-To: <alpine.BSF.2.00.1409121055300.63870@aneurin.horsfall.org>
References: <877g19g8a7.fsf@gmail.com>
 <7A7060B7-0229-425F-BCF4-23C3669E167C@bsdimp.com>
 <alpine.BSF.2.00.1409120800490.63870@aneurin.horsfall.org>
 <20140911221742.GJ23708@mercury.ccil.org>
 <alpine.BSF.2.00.1409121055300.63870@aneurin.horsfall.org>
Message-ID: <1410529036.3893715.166731793.44CF06BA@webmail.messagingengine.com>

On Thu, Sep 11, 2014, at 21:03, Dave Horsfall wrote:
> On the *nix systems to which I have access, bc(1) is a standalone
> program on FreeBSD and OSX, but pipes to dc(1) on OpenBSD.

What language does the undocumented option (assuming it is supported at
all) "bc -c" generate on FreeBSD and OSX? "Standard" bc, which actually
pipes to dc, generates (obviously) dc when run in this way, but GNU bc
generates a completely different and as far as I know undocumented
language, which is handled by the execute function (in execute.c) but as
far as I know there is no way to make it accept it on standard input.

Standard bc:
$ echo '2+2' | bc -c
 2 2+ps.
q$

GNU bc:
$ echo '2+2' | bc -c
@iK2:K2:+W at r
@i
$


(the @i and @r pseudo-instructions are printed separately from the
generated code when in -c mode [util.c], and are not part of the
language passed to the execute function.)


