From: paul.winalski@gmail.com (Paul Winalski)
Date: Mon, 30 Apr 2018 12:43:50 -0400
Subject: [TUHS] /dev/drum
In-Reply-To: <20180430150532.4B67218C09C@mercury.lcs.mit.edu>
References: <20180430150532.4B67218C09C@mercury.lcs.mit.edu>
Message-ID: <CABH=_VQcDma-wamSK8+ncMRq0UQYY4Py8Dte4vOJm7XQf75qXg@mail.gmail.com>

On 4/30/18, Noel Chiappa <jnc at mercury.lcs.mit.edu> wrote:
>
> There's also the System 360 approach, where processes share a single
> address
> space (physical memory - no virtual memory on them!), but it uses
> protection
> keys on memory 'chunks' (not sure of the correct IBM term) to ensure that
> one
> process can't tromp on another's memory.

IBM always used the term "storage" rather than "memory".  The Storage
Protection feature for System/360 was optional on some models, and
provided a 4-bit protection key for each 2048-byte block (IBM's term)
of physical storage, allowing for up to 15 processes to be executing
simultaneously (key value 0 disabled storage protection).

The System/370 operating systems DOS/VS, OS/VS1, and OS/VS2 SVS all
had a single, demand-paged virtual address space, usually a few times
larger than the physical memory.  For DOS/VS the virtual address space
was partitioned into a space (mapped virtual=physical address)
starting at address 0 for the OS, then up to five user program
partitions.  Programs were linked to run in one of these partitions.
OS/VS1 (successor to OS/360 MFT) also had a single virtual address
space, but it had more partitions and the program loader could
dynamically relocate applications to run in any of the partitions.
OS/VS2 SVS (first successor to OS/360 MVT) had a single virtual
address space, but dynamically allocated partitions as needed.  OS/VS2
MVS had processes in the modern OS sense--each executing program got
its own virtual address space.

-Paul W.

