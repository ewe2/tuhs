Return-Path: <tuhs-bounces@minnie.tuhs.org>
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,FREEMAIL_FORGED_FROMDOMAIN,FREEMAIL_FROM,
	HEADER_FROM_DIFFERENT_DOMAINS,MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE
	autolearn=ham autolearn_force=no version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id a9b032a8
	for <ml@inbox.vuxu.org>;
	Thu, 5 Mar 2020 06:11:20 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 5E3AD9D732; Thu,  5 Mar 2020 16:11:19 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 0E1729D71C;
	Thu,  5 Mar 2020 16:10:50 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=pass (1024-bit key; unprotected) header.d=att.net header.i=@att.net header.b="lIX/zdtN";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id ECA9C9D71C; Thu,  5 Mar 2020 16:10:47 +1000 (AEST)
Received: from sonic308-13.consmr.mail.ne1.yahoo.com
 (sonic308-13.consmr.mail.ne1.yahoo.com [66.163.187.36])
 by minnie.tuhs.org (Postfix) with ESMTPS id 6AF799D71B
 for <tuhs@minnie.tuhs.org>; Thu,  5 Mar 2020 16:10:47 +1000 (AEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=att.net; s=s1024;
 t=1583388646; bh=bmJ21e/dCoftO2Od3SOWaIA321Ch6Gtp/BtpqTlRKc8=;
 h=Date:From:To:Subject:Reply-To:References:In-Reply-To:From:Subject;
 b=lIX/zdtNLKJgtgHq+ucshSLwLQnIE2dS2pu5K722Ke8hbvU5/yFQumvkSfqu3qZBybXuXJZaJlZr2pHEeyRdwVP/AyymkYOo7+19T+YKRDwJCzNPet9HnuvG4B8Zimn5OK8pHFRQOP59zzfidqXZ2UvSbfNCD6lualfnjB+QArc=
X-YMail-OSG: vYngG7UVM1k6v_lOlX5_.jLFccrHa_aHGWYjICPMo8TkPuVWa68TbzWof5Dj4ZH
 7nRrndL6Q8GrkAiGvWh3WdqRJLNkyFCW5Ea4wTdEpb9.FVBchbZEf.UGxJB8fgq7qqXERueQBRU9
 OdEH4P4Z50iw6lKUIjmzKlI2b3RfhoNxfC3h84zhssKtLSUjmABiTmsEzviNd4fGuapLBxqYrj.w
 hsTJ12V3xdzeYs6eDukaJS1K7QWiEvGCx1l3pzQRxanW1geo8NKvsNDRQ3IamrBMbztiMdRbc3En
 gUH5OlAvJ.zFEJJ0tKyryHGexQuiMBw7A7s83hXHrJfyncfyx6NbKSYqDKBIc2JShfndsrGfOjzO
 Bke4iW.k_QCQBEYmzr5zCx.6utD8.3Dm8m9lgyQ7FCidkkeRL1pAY2N9S_hlAC5ilSF0jOv7H.rz
 AotPDEBanruYpoi6N48l9YSbNwoUf1xvcDxwuKzTlenoSGq2ONHddhlQ7bgk3TtNx5OnKVDMwZ_3
 OnJXoTpqXvsSE9AWnPLMpDk03APPYAwBSiSjvWnocAn2YgRV9acCT9BWN_LFUJ7ZbuHdINnEAvZC
 30cnCxypmmgC0nA_UGIkVvAAtv8Lz.yhwaqEinXOPDAuohYT.Fww2yVu0zz10ysFjw_p5gH4Nrr3
 Y1QEn_m8U9QGLSxDsCWmDsJt_SXpdBu5wQfPhOt.iWsXcxulJpiddf4NQ8rn8WWVGq8ENvTgNISd
 lYkhESKPJSKup.ZVPFVEqrglv5w0h8HYe1xJNHDeKF9lFPP8guLcRCk7puH8WIKHoSfRtXLZUvLQ
 TQNuY_gY85cysbVJAx_jSbPbbsGria6diY7REa5fO3DBU1MEa3e3kDL8JYs1RR8BK2HPFUZQj.bd
 wLUgNapFk4yheq883mSRWBwi1FkUyI0uSBj.sCmKvOg0._L5z3dusIv5y4T76svQiUtIVDtJIpfF
 McZ8QX64HoUTuIR7JedmqD92reYRrN6IIjGNPQ6XdjU_qvXK89w4To54zYZvJkCD9QMrVDveqJJs
 Q2H60mYOgZiMN.vu.vvTZQF68jAOYE2TbCbbeLAxtc8BJWgGCvc7iNSv4Z6of06X7M27JIpiWKDg
 mwqCjzM.GmcXuPRjbLzn7SwPSZtz770Fy7We0z5ABNMR80lxxoC2CeL9PMrQ8ACSdQH9mNR_YuiN
 KOTrjpsy9gm4Dn1vQqVy_W9ZaAXw439ttC3C68ia3ZYyQMY0HE01bf6ATfb07v1.nnnf_fD.3vf3
 wqRQKm15pOjNf9GGMcGO_UV3kgZnPq6_35QkygqbsPZHV.nXOlosRyu1OUHxLuQnyKmWniiZzo5n
 S_iylm2jMcVtY.Fx223iuNZUa2JLQi6hih6tjxusmPyS1w3q2rDV5kCitND5s8We.W9KdXxsC
Received: from sonic.gate.mail.ne1.yahoo.com by
 sonic308.consmr.mail.ne1.yahoo.com with HTTP; Thu, 5 Mar 2020 06:10:46 +0000
Received: by smtp402.mail.ne1.yahoo.com (Oath Hermes SMTP Server) with ESMTPA
 ID 0713f563e947bd4b1767aa796a560f57; 
 Thu, 05 Mar 2020 06:10:42 +0000 (UTC)
Received: from ads by archimedes.mugrats with local (Exim 4.92)
 (envelope-from <salewski@att.net>)
 id 1j9jk8-0000Pz-AE; Thu, 05 Mar 2020 01:12:24 -0500
Date: Thu, 5 Mar 2020 01:12:24 -0500
From: "Alan D. Salewski" <salewski@att.net>
To: tuhs@minnie.tuhs.org
Message-ID: <20200305061224.GL24454@att.net>
Mail-Followup-To: tuhs@minnie.tuhs.org
References: <202003031815.023IFSlD493028@darkstar.fourwinds.com>
 <CAP2nic1GXWeanAst6JVnKDz+Ug=-Gn0S7Pk+9+CvfxXbmu=w9Q@mail.gmail.com>
 <5019a751-d69a-4839-9a56-b977b275070d@www.fastmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <5019a751-d69a-4839-9a56-b977b275070d@www.fastmail.com>
User-Agent: Mutt/1.10.1 (2018-07-13)
X-Mailer: WebService/1.1.15302 hermes Apache-HttpAsyncClient/4.1.4
 (Java/1.8.0_241)
Subject: Re: [TUHS] Command line options and complexity
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Reply-To: "Alan D. Salewski" <salewski@att.net>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

On 2020-03-04 16:50:34, Random832 spake thus:
[...]
> Sure, but "stdin is a sequence of any type, and the argument is an expression that operates on that type or the name of a property that that type has" is universal enough.
> 
> The part that has to operate on a specific structure isn't the command, it's the arguments.
> 
> For example, a powershell pipeline to produce a list of files sorted by modified date is:
> 
> gci . | sort lastwritetime | select name
> 
> all three *commands* are universal - not all objects have a "lastwritetime" and "name" property, but sort and select can operate on any property that the sequence of objects passed into it has.

There are some examples of that type of thing in widely used Unix tools;
my use of 'sort -k1,1n' further down is demonstrating such a use case (the
'sort' command is being told that it is operating on numbers). But beyond
some lowest common denominator types ("number", "string", ...) how many
commands can really usefully operate on a large number of types? For
example, a program that can operate on IP addresses is probably doing
something different than a program that wants to operate on email
addresses.

I could see where named properties of some object can be used more
generally than types, but again there are widely used tools that do do
that (e.g., jq(1)). IMHO, though, they are more cumbersome to use than
most of the commands I need to use minute to minute.


> (gci is an alias for get-childitem... it also has aliases ls and dir, but I'm emphasizing that it's not exclusive to directories)
> 
> *assuming that ls -t didn't exist*, to do this with unix tools that operate on text you would need:
> 
> ls -l | [somehow convert the date to a sortable format, probably in awk] | sort | [somehow pick the filename alone out of the output - possibly with cut or sed or awk again]

(Just nit-picking at this particular example)

You could do it without ls[0]:

    $ stat -c '%Y %n' * | sort -k1,1n | xargs -L1 sh -c 'echo "$@"'

That doesn't seem so bad to me, but if it was something I needed regularly
I'd of course put it in an alias[1] or (more likely) a short script file.


> and it's very difficult to get tools like awk, sort, and cut to work on formats that contain more than one field that may contain embedded spaces (you can just about get away with it for ls output because the date is always three "words").
[...]

Yes, that's often true. And when I enounter it I typically start out by
seeing if I can inject and remove tokens in the data at key places in the
pipeline. Beyond anything trivial, though, I then quickly start reaching
for tools to put the data into some form that more easily allow for it
(CSV, JSON, ...). But that invariably adds other complications (such as
the need to find or build tools to marshal/unmarshal the data, and to
deal with data-domain-specific notions of null-vs-empty-string).

For the (more common (for me)) case where there is only one field that
contains embedded spaces, I just try to get 'em at the end of the line
and let the shell deal with it:

    $ some-command | while read -r first second rest; do ... ; done


> Maybe it would be enough to have the universal interface be "tables" (i.e. text streams in some format that supports adequate escaping of embedded row and column delimiters)... or maybe even just table rows, and let the user deal with memorizing column numbers (or let each originating command support a fully general way to specify what columns are requested, as ps alone does on modern systems) Of course, this isn't *really* different from allowing any data structure - after all, the value for any field could itself be a fully escaped table in text format.
[...]

Well, in some sense with byte streams you have a table of newline-delimited
bytes (rows), and byte subfields separated by whitespace (columns). And
anything on top of that could (in some context, and with some syntax) be
considered just further escaped tables in text format. I think that's
essentially the same thing that you said, only with the outermost table
syntax removed. But like you said, this isn't really different from
allowing any data structure. Importantly, though, it doesn't impose any
particular data structure, either.

I've worked at a couple of different places that had in-house tools for
working with explicit table semantics in command line suites, and where
they fit the data domain, that was hugely useful. Generally speaking, they
were special purpose enough to warrant their own tools, but still general
purpose enough to be composable (were designed for use in shell pipelines)
and applicable in domains beyond the intentions of their original authors.

Still, the burden of "thinking in tables" would make them too heavyweight
for a lot of common use cases. Sometimes my data structure is "paragraphs
of text":

    $ lorem -p 3 | perl -00 -wnle '2 == $. && print' | wc -w

Other times I want a tree (JSON, s-expressions, ...), or even a stream of
trees[2]. I consider it a feature that these more complex data structures
are not assumed or imposed in contexts where they are not needed.

Take care,
-Al 


[0] You could get 'ls' to do it, too, (without '-t') but here the use of
    TIME_STYLE is a presumably non-portable (but handy!) GNU-ism:

        $ TIME_STYLE='+%s' ls -l | tail -n +2 | sort -k6,6n | xargs -L1 sh -c 'shift 5; echo "$@"'

    It's different from the '-t' option, though, in that it forces a
    predicatable date field format in the output of 'ls -l', so side-steps
    the need for downstream date parsing altogether and simply jumps into
    sorting (after chopping off the 'total N' header (groans all around)).

[1] E.g.,

        $ # read 'bmt' as: "by mtime"

        $ alias bmt='stat -c "%Y %n" * | sort -k1,1n | xargs -L1 sh -c '"'echo "'"$@"'"'"

        $ bmt

[2] Probably flattened.

