From: ron@ronnatalie.com (Ronald Natalie)
Date: Fri, 13 Nov 2015 15:16:34 -0500
Subject: [TUHS] user struct on SYSIII / V7
In-Reply-To: <20151113202754.Horde.0UIcoCQhpuBwcwWI3juWh_9@avocado.salatschuessel.net>
References: <20151113194835.Horde.-ghfy1raSZPIb62MtEVbn0A@avocado.salatschuessel.net>
 <5F23773C-A448-4AC7-AE26-70A3CBF769B8@ronnatalie.com>
 <20151113201231.Horde.a7a9Nc2HERUIJNolisTv8Lz@avocado.salatschuessel.net>
 <9E1EC0BB-A9E1-41D9-90DD-33D1E275ABD5@ronnatalie.com>
 <20151113202754.Horde.0UIcoCQhpuBwcwWI3juWh_9@avocado.salatschuessel.net>
Message-ID: <4D2BAFF1-8A2C-42A4-9C42-102D2E6F109F@ronnatalie.com>

I can’t say how the Z8000 wants to implement it.   On the PDP11, the _u variable is set to the absolute 140000.   This isn’t really an “allocation.”  It’s just the base of one of the kernel address segments.   The kernel maps the per process data area (essentially the user structure and the kernel stack) there.    It’s just allocated as a hunk of usize memory (usize is in 64 byte chunks on the PDP).   The code one is “not expected to understand” handles this context switch.   In fact, the user structure is only ever “initialized” for the first process (init).   After that fork just copies it from the parent to the child and then all the other system calls, etc… change it as required.

Gosh it’s been a long time since I was this deep into a UNIX kernel (especially on a primitive machine).   
Hope this helps.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2284 bytes
Desc: not available
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20151113/6b045248/attachment.bin>

