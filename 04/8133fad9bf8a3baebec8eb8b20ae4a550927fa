X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 17793 invoked from network); 17 Aug 2020 19:10:17 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 17 Aug 2020 19:10:17 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 0F28B9E18C; Tue, 18 Aug 2020 05:10:14 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 6A34E9CAB0;
	Tue, 18 Aug 2020 05:09:04 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="K/ZawEWe";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id A46FD9CAB0; Tue, 18 Aug 2020 05:09:01 +1000 (AEST)
Received: from mail-wm1-f44.google.com (mail-wm1-f44.google.com
 [209.85.128.44])
 by minnie.tuhs.org (Postfix) with ESMTPS id C136C9C8BB
 for <tuhs@tuhs.org>; Tue, 18 Aug 2020 05:09:00 +1000 (AEST)
Received: by mail-wm1-f44.google.com with SMTP id x5so14149741wmi.2
 for <tuhs@tuhs.org>; Mon, 17 Aug 2020 12:09:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=Eh5/3TyHmFVR70Nguondc4G+GZmWhvIZP9S4hCI+ASg=;
 b=K/ZawEWeTlgi1R/1IVTpIw6WALFy//WrabMUI5YnhtCG82fifmubZ8tqBtJG7mpu9F
 8RObCtDe0r4eMsEdH1syx8pZYM60fhXmyge+dYODDOsVunELRuuMsCmDc2aKgc6STxUo
 XERJDkLXl8fob+lgPBnGMJ+AoGgnI6E4ibHFOr0YKZmdyghFF/j7+hqyx0WHJkQbwRwE
 Nd1LvMaDl7ZyXUzBG0LpiQI+bubCmOpo9N8TJ0Q12O7cGUYQk7LJoe7P9A6CajvXgQXf
 nyBAY+cZd+NIjMWbargMqpMq++8cTMQe+0CFZGaP+8GpN8TgE50sgVqCm1fZDWXPqgfG
 +q0A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=Eh5/3TyHmFVR70Nguondc4G+GZmWhvIZP9S4hCI+ASg=;
 b=nFP+r6C9lLkpUgbpYY09vxviT6VEUyBD0MmKk5IqxXqF+kpKPC21LOCLWiGwtjJ7L9
 lgm4tlM+1gY4zmI7f5uqtsSojIrnyd648td9lAa5ISAMYVMjmCqOcU7PLADPS9G1HwFU
 Csq/rS0DEisxSY22KZHwuqYItDyHH3XVgnkDlLHeRif8xaPEqnJOTqkpNRmVIp0UBbYd
 CYQphhS9jb4dNSMCuHWlE3V2VKqBt3apYdBH6xyhZZOEEpFYc+rfJDWtS39VY8OnySEc
 bw9daOMdQXJQxA4J5WwlCNVAJ2ZB9k7pWkCn3l0y2CYtA2q3qxpCDeL3bHvR0M0PpELL
 h9SA==
X-Gm-Message-State: AOAM530m8nX8Kt+oGpmoMP5jpbn3oIXRDbWluffEVFjbzCKiWYs7oPO+
 0LbsAtejNpJiUZDhkZVDc2mBgykCu/Xmr23E9Nw=
X-Google-Smtp-Source: ABdhPJy/GWT4YBNDt4lFum3iB03oT9RfZOkJ1eLW91QfHNzGWJEyfHs20Y3N6bpTwE3jMq8/7HMoGr1xYmIMKzCVSSw=
X-Received: by 2002:a1c:b489:: with SMTP id
 d131mr16696170wmf.114.1597691339218; 
 Mon, 17 Aug 2020 12:08:59 -0700 (PDT)
MIME-Version: 1.0
References: <20200817020224.104B518C095@mercury.lcs.mit.edu>
 <CABH=_VRRy7mgpgcoayq8v7pW5UL8jcZOH=t=Dt2063=Qn24e-A@mail.gmail.com>
 <CAJohCK+aqCKiYNALrJAdPv=q=+uw8++0oCMR_O10kUJ62m=tVA@mail.gmail.com>
 <CABH=_VQ98bw1nj3nkL0RF3ATX=Sy3=Bqg1Lt+tY-XYH6Kep8Dw@mail.gmail.com>
In-Reply-To: <CABH=_VQ98bw1nj3nkL0RF3ATX=Sy3=Bqg1Lt+tY-XYH6Kep8Dw@mail.gmail.com>
From: Jim Geist <velocityboy@gmail.com>
Date: Mon, 17 Aug 2020 15:08:48 -0400
Message-ID: <CAJohCKKc9s0K=QdBvBjQ9W_uk9HCRr+o3sy4qGac1aTP47LmLw@mail.gmail.com>
To: Paul Winalski <paul.winalski@gmail.com>
Content-Type: multipart/alternative; boundary="000000000000bc23e705ad17801f"
Subject: Re: [TUHS] Memory management in Dennis Ritchie's C Compiler
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Eunuchs Hysterical Society <tuhs@tuhs.org>,
 Noel Chiappa <jnc@mercury.lcs.mit.edu>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000bc23e705ad17801f
Content-Type: text/plain; charset="UTF-8"

When did mmap(2) come about? Another thing I've seen is building a small
block allocator on top of that. You can guarantee that all your objects are
nicely collected into the same set of pages for locality with very little
overhead.

On Mon, Aug 17, 2020 at 2:48 PM Paul Winalski <paul.winalski@gmail.com>
wrote:

> On 8/17/20, Jim Geist <velocityboy@gmail.com> wrote:
> > You beat me to my response. malloc/free are great for long running
> > processes where memory can't just infinitely increase, but there's a ton
> of
> > stuff in a compiler -- types, expressions, symbols -- that survives until
> > the process exits. There's benefit in both space (because you don't have
> to
> > add headers to the blocks as malloc() does, so free() can work) and time
> to
> > doing it this way.
> >
> The other issue is locality of reference.  Data structures such as the
> symbol table get built up gradually as the compilation processes each
> routine.  Typically the symbol table is stored as a hash table where
> each entry is a pointer to the actual symbol table entry data
> structure.  If you malloc() each symbol table entry individually, they
> can end up scattered all over the virtual address space.  It's not as
> important these days, when main memory is measured in gigabytes, but
> back when machines had less real memory, the scattering could lead to
> excessive page faulting.  Much better to allocate symbol table entries
> in chunks, and the easiest way to do that is to give the symbol table
> its own mini-heap.
>
> VMS implemented the mini-heap concept (VMS calls them zones) back in
> its first release in 1978.  Dave Cutler took the concept to Windows NT
> (Microsoft calls them private heaps).  Lots of applications have built
> their own mini-heap system on top of sbrk(), but has a library of
> mini-heap-type APIs ever been distributed on Unix?
>
> -Paul W.
>

--000000000000bc23e705ad17801f
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">When did mmap(2) come about? Another thing I&#39;ve seen i=
s building a small block allocator on top of that. You can guarantee that a=
ll your objects are nicely collected into the same set of pages for localit=
y with very little overhead.</div><br><div class=3D"gmail_quote"><div dir=
=3D"ltr" class=3D"gmail_attr">On Mon, Aug 17, 2020 at 2:48 PM Paul Winalski=
 &lt;<a href=3D"mailto:paul.winalski@gmail.com">paul.winalski@gmail.com</a>=
&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px =
0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">On 8=
/17/20, Jim Geist &lt;<a href=3D"mailto:velocityboy@gmail.com" target=3D"_b=
lank">velocityboy@gmail.com</a>&gt; wrote:<br>
&gt; You beat me to my response. malloc/free are great for long running<br>
&gt; processes where memory can&#39;t just infinitely increase, but there&#=
39;s a ton of<br>
&gt; stuff in a compiler -- types, expressions, symbols -- that survives un=
til<br>
&gt; the process exits. There&#39;s benefit in both space (because you don&=
#39;t have to<br>
&gt; add headers to the blocks as malloc() does, so free() can work) and ti=
me to<br>
&gt; doing it this way.<br>
&gt;<br>
The other issue is locality of reference.=C2=A0 Data structures such as the=
<br>
symbol table get built up gradually as the compilation processes each<br>
routine.=C2=A0 Typically the symbol table is stored as a hash table where<b=
r>
each entry is a pointer to the actual symbol table entry data<br>
structure.=C2=A0 If you malloc() each symbol table entry individually, they=
<br>
can end up scattered all over the virtual address space.=C2=A0 It&#39;s not=
 as<br>
important these days, when main memory is measured in gigabytes, but<br>
back when machines had less real memory, the scattering could lead to<br>
excessive page faulting.=C2=A0 Much better to allocate symbol table entries=
<br>
in chunks, and the easiest way to do that is to give the symbol table<br>
its own mini-heap.<br>
<br>
VMS implemented the mini-heap concept (VMS calls them zones) back in<br>
its first release in 1978.=C2=A0 Dave Cutler took the concept to Windows NT=
<br>
(Microsoft calls them private heaps).=C2=A0 Lots of applications have built=
<br>
their own mini-heap system on top of sbrk(), but has a library of<br>
mini-heap-type APIs ever been distributed on Unix?<br>
<br>
-Paul W.<br>
</blockquote></div>

--000000000000bc23e705ad17801f--
