From: rminnich@gmail.com (ron minnich)
Date: Thu, 14 Sep 2017 22:52:33 +0000
Subject: [TUHS] Happy birthday, Dennis Ritchie!
In-Reply-To: <CAEFkZw_gsWkK-LAccm3gKh22-J4B5VbrQDBBnZeH0i7vv2AT-A@mail.gmail.com>
References: <alpine.BSF.2.21.1709090646420.48526@aneurin.horsfall.org>
 <201709100944.v8A9iPeb024293@freefriends.org>
 <alpine.BSF.2.21.1709140900020.89458@aneurin.horsfall.org>
 <20170914161121.sx7eqzsqklzcncdb@matica.foolinux.mooo.com>
 <alpine.BSF.2.02.1709141215140.89120@frieza.hoshinet.org>
 <20170914193010.mlx4jkqcxcqfwe4c@thunk.org>
 <alpine.BSF.2.02.1709141549110.1652@frieza.hoshinet.org>
 <f31de93b-1f6b-1d22-ae49-324d205e9a38@groessler.org>
 <CAEFkZw_gsWkK-LAccm3gKh22-J4B5VbrQDBBnZeH0i7vv2AT-A@mail.gmail.com>
Message-ID: <CAP6exY+k_hFRiLz8c+mQ+bu0pvu=DxXRqxOYpMjiA18q8hFZuQ@mail.gmail.com>

The u-root project (u-root.tk) is aimed at creating the *nix tools in Go.
The targets are firmware where linux and an initramfs are loaded; and root
file systems.

One goal was to get back to old school unix where the root always included
the source to create the commands. In the non-firmware mode all the sources
are there
and they are compiled on demand, save for the 4 go tooclhain binaries and
/init.

It takes about 15 seconds to compile all the tools at present.

We've got a demo OS for Chromebooks based on u-root called NiChrome
(NiChrome is an alloy of Chrome). This was a summer project for 2 interns
here. It helped show that the idea can work to support an OS distro.

We've also shown that linux and a u-root initramfs can replace most of UEFI
firmware on the Open Compute Platform nodes, reducing boot time from 8
minutes to 17 seconds. Not as fast as the 3 seconds I'd like but you gotta
start somewhere, and most of that time is beyond our control.

We can always use help if you're interested. I'm ok with C for kernels but
don't want to use it again in user mode, hence this project.

ron

On Thu, Sep 14, 2017 at 3:39 PM Erik Berls <erik at ono-sendai.com> wrote:

> No, I am Spartacus!
>
> I've toyed with this idea as well, mostly for getting a NetBSD environment
> in a Docker container.
>
> Maybe we should pool resources?
>
> On Thu, Sep 14, 2017 at 15:04 Christian Groessler <chris at groessler.org>
> wrote:
>
>> On 09/14/17 21:52, Steve Nickolas wrote:
>>
>> > I never managed to pull it off, but I tried creating a full live Linux
>> > environment based on musl, clang, Heirloom Toolchest and
>> > OpenBSD/NetBSD sources.  The idea was that I wanted to make a "Real
>> > Unix" that happened to have Linux as its kernel.  (It also would have
>> > run the CDE as its default desktop.)
>>
>>
>> I, too, was toying with the idea of creating a NetBSD distribution which
>> uses the Linux kernel and NetBSD userland.
>> I very much like the concept of going to /usr/src and typing "make
>> build" (or "make world" on FreeBSD) and have the
>> whole base system rebuilt.
>>
>> I've played with Gentoo Linux which also builds from source, but I found
>> it too complicated (for me, at least). On the
>> BSDs it's just Makefiles, and no strange python (or whatever) scripts to
>> build the system.
>>
>> Maybe when I'm retired and have plenty of time...
>>
>> regards,
>> chris
>>
>> --
> -=erik.
> --
> Look, I lived through the Gray Davis years.  I *need* a UPS.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20170914/3e14649e/attachment.html>

