From: paul.winalski@gmail.com (Paul Winalski)
Date: Thu, 28 Dec 2017 10:59:29 -0500
Subject: [TUHS] Why did PDPs become so popular?
In-Reply-To: <20171228140551.B6F9418C079@mercury.lcs.mit.edu>
References: <20171228140551.B6F9418C079@mercury.lcs.mit.edu>
Message-ID: <CABH=_VQBjinz7RsathpQ5-DOAuHv+eSuQEiMQXnnwxOgyTPNHA@mail.gmail.com>

On 12/28/17, Noel Chiappa <jnc at mercury.lcs.mit.edu> wrote:
>     > From: Paul Winalski
>
>     > Lack of marketing skill eventually caught up to DEC by the late 1980s
>     > and was a principal reason for its downfall.
>
> I got the impression that fundamentally, DEC's engineering 'corporate culture'
> was the biggest problem; it wasn't suited to the commodity world of computing,
> and it couldn't change fast enough. (DEC had always provided very well built
> gear, lots of engineering documentation, etc, etc.)
>
> I dunno, maybe my perception is wrong?

I think you're right.  The disinterest in marketing and advertising
(Ken Olsen, and therefore DEC, had a "build it and they will come"
mentality) was one aspect of the corporate culture.  An example of its
negative impact:  When the Alpha EV5 came out, it was several times
faster than anything else around.  At the same time, Intel and AMD
were involved in the clock rate race.  Every time Intel leapfrogged
AMD, they trumpeted in the media (both trade and public) that they'd
produced the fastest microprocessor in the world.  DEC did nothing to
counter this false impression.

DEC's corporate culture also led to slow decision making.  DEC
believed in consensus building--everyone had to buy into a decision
before it was final.  We low-level DEC engineers used to joke that any
decision worth making was worth making ten times.  Consensus building
is great if you can reach a consensus, but terrible when you can't.
What was needed was something more like Sun's "lead, follow, or get
out of the way", or Intel's "disagree and commit".

DEC was also prone to over-engineering its products.  This slowed down
time to market and also increased production costs.  It's true that,
particularly in software, spending extra time in design up front pays
back in reduced maintenance costs down the road, but if you can't get
V1.0 out the door within its market time frame, there will never be a
V2.0.

-Paul W.

