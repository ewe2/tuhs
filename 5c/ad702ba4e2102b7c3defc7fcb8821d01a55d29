From: random832@fastmail.com (Random832)
Date: Wed, 04 Jan 2017 10:59:03 -0500
Subject: [TUHS] Unix stories
In-Reply-To: <012e01d2669a$6b2f89c0$418e9d40$@ronnatalie.com>
References: <5257291ca0a0e1d80c646cab730129d589c5d707@webmail.yaccman.com>
 <42922C34-342F-4E86-83E2-3618129139B2@tfeb.org>
 <20170103004959.GA29088@mcvoy.com>
 <20170104130434.NQFzLGpVU%steffen@sdaoden.eu>
 <1483538831.1573798.837053385.2EB8CAC9@webmail.messagingengine.com>
 <012e01d2669a$6b2f89c0$418e9d40$@ronnatalie.com>
Message-ID: <1483545543.1599443.837188969.6EAAD62B@webmail.messagingengine.com>

On Wed, Jan 4, 2017, at 09:54, Ron Natalie wrote:
> > I assume you're imagining it as being equivalent to i = j + i + 1, with a redundant store operation.
> 
> It's what the language standard specifies, not imagination.  C and C++
> state that modifying twice between sequence points or using the value
> other than to compute the value for a store is undefined behavior.
> The languages put no constraint on what may happen when you do this.

But I'm talking about the alternate universe in which the person I was
replying to is justified in thinking that it's clear what he means, vs a
'plausible' implementation that could arise from methods of translating
expressions into machine operations (since people don't tend to respond
to "it's undefined because it is, and the compiler can arbitrarily mess
things up because it's allowed to by the fact that it's undefined"
without a plausible theory of why something might ever behave in a way
other than the obvious way)

