From: doug@cs.dartmouth.edu (Doug McIlroy)
Date: Mon, 21 Sep 2015 10:02:14 -0400
Subject: [TUHS] Re {TUHS}  Synchronous vs Asynchronous IO in Unix
Message-ID: <201509211402.t8LE2E4K016401@coolidge.cs.Dartmouth.EDU>

Unix was what the authors wanted for a productive computing environment,
not a bag of everything they thought somebody somewhere might want.
One objective, perhaps subliminal originally, was to make program
behavior easy to reason about. Thus pipes were accepted into research
Unix, but more general (and unruly) IPC mechanisms such as messages
and events never were.

The infrastructure had to be asynchronous. The whole point was to
surmount that difficult model and keep everyday programming simple.
User visibility of asynchrony was held to a minimum: fork(), signal(),
wait(). Signal() was there first and foremost to support SIGKILL; it
did not purport to provide a sound basis for asynchronous IPC.
The complexity of sigaction() is evidence that asynchrony remains
untamed 40 years on.

Doug


