From tuhs-bounces@minnie.tuhs.org Thu Aug 23 22:17:29 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=HEADER_FROM_DIFFERENT_DOMAINS,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no
	version=3.4.1
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id 9bf20715
	for <ml@inbox.vuxu.org>;
	Thu, 23 Aug 2018 22:17:29 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id E0E6FA1A29; Fri, 24 Aug 2018 08:17:27 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 79F68A1A1A;
	Fri, 24 Aug 2018 08:17:13 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id CCEA5A1A1A; Fri, 24 Aug 2018 08:17:10 +1000 (AEST)
Received: from smtp-out-2.mxes.net (smtp-out-2.mxes.net [67.222.241.118])
 by minnie.tuhs.org (Postfix) with ESMTPS id 3E1BDA1A19
 for <tuhs@minnie.tuhs.org>; Fri, 24 Aug 2018 08:17:10 +1000 (AEST)
Received: from Customer-MUA (mua.mxes.net [10.0.0.1])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by smtp.mxes.net (Postfix) with ESMTPSA id 87AB227584;
 Thu, 23 Aug 2018 18:17:08 -0400 (EDT)
From: <ron@ronnatalie.com>
To: "'Bakul Shah'" <bakul@bitblocks.com>,
	"'TUHS'" <tuhs@minnie.tuhs.org>
References: <10c401d43aef$8be34870$a3a9d950$@ronnatalie.com>
 <ACE5F352-8FCF-4C3C-B60B-7CD1C6094939@bitblocks.com>
In-Reply-To: <ACE5F352-8FCF-4C3C-B60B-7CD1C6094939@bitblocks.com>
Date: Thu, 23 Aug 2018 18:17:06 -0400
Message-ID: <151301d43b2f$07881ed0$16985c70$@ronnatalie.com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Outlook 16.0
Content-Language: en-us
Thread-Index: AQH3zlNvMlrtv6MB59xlfwkPSkONzgIFVidhpHaSucA=
X-Sent-To: <dHVoc0BtaW5uaWUudHVocy5vcmc=>
Subject: Re: [TUHS] C++ / Kernel
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>



> I haven't done much BSD kernel programming in last 15 years but this is
not my recollection. BSD used caddr_t, typedefed to char*, sort of as void
*. IIRC void* 
>came in common use after BSD unix first came about. Why use a union when a
cast will do? :-) The union trick is more likely to be used for esoteric
things 
> (like getting at fl.pt. bytes) or for more complex types or probably by
people with lots of programming experience in pascal and not so much in C
(in Pascal 
>you *had* to use untagged variant records if you wanted to cheat!). In C,
all that void* does is allow you to avoid casts in some cases.

Your recollections are certainly wrong.    I spent a lot of time tracing
down why the Kernel crashed doing I/O and traced it to this and spent a
while undoing it as I stated.
This union was right in the middle of the buf struct:

	union {
	    caddr_t b_addr;		/* low order core address */
	    int	*b_words;		/* words for clearing */
	    struct filsys *b_filsys;	/* superblocks */
	    struct dinode *b_dino;	/* ilist */
	    daddr_t *b_daddr;		/* indirect block */
	} b_un;
There were a number of other places that did the same thing.   It's
OFFICIALLY now in undefined behavior by the standard (though of course that
didn't exist in the BSD days) ,
to store in one element of the union and retrieve it via another.   This is
one of the reasons why.

This isn't the only place it occurs.

Void* came out with the V7 compiler, if I recall properly.   The BSD kernel
looks as if it requires such a later compiler (it uses bit fields which the
earlier compilers didn't support).
But it doesn't matter.   You are right char* (or caddr_t) would work just
fine for this albeit with some explicit casting.


