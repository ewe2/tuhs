X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 12639 invoked from network); 6 Feb 2021 02:07:52 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 6 Feb 2021 02:07:52 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 176BC9BA46; Sat,  6 Feb 2021 12:07:51 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 3630D9BA45;
	Sat,  6 Feb 2021 12:07:27 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="DHC8WmeW";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 57B1C9BA45; Sat,  6 Feb 2021 12:07:23 +1000 (AEST)
Received: from mail-ot1-f44.google.com (mail-ot1-f44.google.com
 [209.85.210.44])
 by minnie.tuhs.org (Postfix) with ESMTPS id 35A849BA3F
 for <tuhs@minnie.tuhs.org>; Sat,  6 Feb 2021 12:07:22 +1000 (AEST)
Received: by mail-ot1-f44.google.com with SMTP id o12so8768252ote.12
 for <tuhs@minnie.tuhs.org>; Fri, 05 Feb 2021 18:07:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=L8PKZJ6lox8tMFClQncb/mZRLZKio6iCZlO1D8ZiCXw=;
 b=DHC8WmeWqpHNbHVq3vFSc5YpqHEvVJCn2saMqXMZzyDyZZ0epqGnHUQMomJX4wcmPP
 m+hmFS+JkJjRrK5+MIzP9zST/f35qodg66M5/hCMrWVKpx9q69s37g4DqoYKutzTrx1P
 ekDq0stLRhy8uy5eSqPs6FW66gLFFKf+GKhGDuAJqHE0H2o0owlQ7AQhGP+LhJ5OGLGB
 Lenh707aIVytT7NNEbJji3UX8CsaX1POFint4ylFfJY0wfyM6WPw3Ib3YPla43kN72s8
 MoH/mcNHyE++eH4G+R9e39vcrlIgmiGcuIqrX8oND523ND1Kd2STGj788TuW7fe4g+7D
 B25w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=L8PKZJ6lox8tMFClQncb/mZRLZKio6iCZlO1D8ZiCXw=;
 b=MNudtISIgMgz8bTbqzOsPagka8kyZt8pMc/8FO/2nuwb6KoCCESAokmdmE/uOUI41g
 ZgPLTh0Wn6HVOs3HUVD+1o/xpU4862LnRyS8UEhwhMXCBPm4jfET6fkX8YrkCvQNKXrs
 m8/4jnjNHk5q+EzJma2pW8CpktBYWrpBTnzjHljv+4aVl7pP1ECqdWx23J53PSKSd3BE
 maawZWp9/WbrXw/htCUODeinSnk0QVVC0KGZhomPPhsc5wgrab3cWYDBfUh5bzwSdgVd
 59I4LftPXZnQ8Y0zfBiMwT1rPSaQrEL+c63opCiJQR1JhTLDSMEX/MZ4sjoih9YuCGMn
 Pl3g==
X-Gm-Message-State: AOAM533axdfrAIw4rWOjssStZqHDyoSQrNVx+sSMpmAo1LiTADF7bUbh
 +y6Pz16iDtyMVKJWMr4BDFZZO3pNLpLm7a3wVwwxUb/Rms4=
X-Google-Smtp-Source: ABdhPJxDLI2/abKhgL0b0AALuxLHIr6/J8dSeFsqj6TXKg0Ywuiusv9cdYiQYCteHuLTm69jgiqzXOtxIALrWD4Zlck=
X-Received: by 2002:a05:6830:1f4e:: with SMTP id
 u14mr5437591oth.65.1612577241592; 
 Fri, 05 Feb 2021 18:07:21 -0800 (PST)
MIME-Version: 1.0
References: <20210205003315.GK13701@mcvoy.com>
 <26D923CF-5319-4207-BA28-6EFA0E3BB1F8@iitbombay.org>
 <20210205141820.GO13701@mcvoy.com>
 <0253BE0F-94CB-41BB-921D-6BD09A188601@iitbombay.org>
In-Reply-To: <0253BE0F-94CB-41BB-921D-6BD09A188601@iitbombay.org>
From: Dan Cross <crossd@gmail.com>
Date: Fri, 5 Feb 2021 21:06:45 -0500
Message-ID: <CAEoi9W7ZYojXNJYcUo5pw2+v1kApAz1MA5qGW6+EQkK=8nDAxA@mail.gmail.com>
To: Bakul Shah <bakul@iitbombay.org>
Content-Type: multipart/alternative; boundary="000000000000a876f305baa165ac"
Subject: Re: [TUHS] FreeBSD behind the times? (was: Favorite unix design
 principles?)
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000a876f305baa165ac
Content-Type: text/plain; charset="UTF-8"

On Fri, Feb 5, 2021 at 7:04 PM Bakul Shah <bakul@iitbombay.org> wrote:

> On Feb 5, 2021, at 6:18 AM, Larry McVoy <lm@mcvoy.com> wrote:
> >
> > On Thu, Feb 04, 2021 at 09:17:54PM -0800, Bakul Shah wrote:
> >> On Feb 4, 2021, at 4:33 PM, Larry McVoy <lm@mcvoy.com> wrote:
> >>>
> >>> Ignoring the page cache and make their own cache has big problems.
> >>> You can mmap() ZFS files and doing so means that when a page is
> referenced
> >>> it is copied from the ZFS cache to the page cache.  That creates a
> >>> coherency problem, I can write via the mapping and I can write via
> >>> write(2) and now you have two copies of the data that don't match,
> >>> that's pretty much OS no-no #1.
> >>
> >> Write(2)ing to a mapped page sounds pretty dodgy. Likely to get you
> >> in trouble in any case. Similarly read(2)ing.
> >
> > The entire point of the SunOS 4.0 VM system was that the page you
> > saw via mmap(2) is the exact same page you saw via read(2).  It's
> > the page cache, it has page sized chunks of memory that cache
> > file,offset pairs.
> >
> > There is one, and only one, copy of the truth.  Doesn't matter how
> > you get at it, there is only one "it".
> >
> > ZFS broke that contract and that was a step backwards in terms of
> > OS design.
>
> Let me repeat a part of my response you cut out:
>
>     And you can keep track of mapped pages and read/write from them if
>     necessary even if you have a  separate cache for any compressed pages.
>
> In essence you pass the ownership of a page's data from a compressed
> page cache to the mapped page. Just like in processor cache coherence
> algorithms there is one source of truth: the current owner of a cached
> unit (line or page or whatever). In other words, the you see via mmap(2)
> will be the exact same page you will see via read(2). Not having actually
> tried this I may have missed corner cases + any practical considerations
> complicating things but *conceptually* this doesn't seem hard.


In essence, that's what the merged page/buffer cache is all about: file IO
(read/write) operations are satisfied from the same memory cache that backs
up VM objects. I agree that conceptually it's not that complex; but that's
not what ZFS does.

Of course the original Unix buffer cache didn't do that either, because no
one was mmap'ing files on the PDP-11, let alone the PDP-7. A RAM-based
buffer cache for blocks as the nexus around which the system serialized
access to the disc-resident filesystem sufficed. When virtual address
spaces got bigger (starting on the VAX) and folks wanted to start being
more clever with marrying virtual memory and IO, you had an impedance
mismatch with a fairly large extant kernel that had developed not taking
into consideration memory-mapped IO to/from files. Sun fixed this, at what
I take to be great expense (I followed keenly the same path of development
in *BSD and Linux at the time and saw how long that took, so I believe
this). But then the same Sun broke it again.

Warner mentions not using ZFS for its double copying. May be omething
> like the above can a step in the direction of integrating the caches?
>

But the cache was integrated! Until it wasn't again....

As Ron says, I too would like to hear what the authors of ZFS have to
> say....
>

Sounds like they thought it was too hard because compression means the
place on storage where an offset in a file lands is no longer a linear
function of the file's contents. Presumably the compressed contents are not
kept in RAM in any of the caches (aside from a temporary buffer to which
the compressed contents are read or something).

        - Dan C.

--000000000000a876f305baa165ac
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr">On Fri, Feb 5, 2021 at 7:04 PM Bakul Shah=
 &lt;<a href=3D"mailto:bakul@iitbombay.org">bakul@iitbombay.org</a>&gt; wro=
te:<br></div><div class=3D"gmail_quote"><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);pad=
ding-left:1ex">On Feb 5, 2021, at 6:18 AM, Larry McVoy &lt;<a href=3D"mailt=
o:lm@mcvoy.com" target=3D"_blank">lm@mcvoy.com</a>&gt; wrote:<br>
&gt; <br>
&gt; On Thu, Feb 04, 2021 at 09:17:54PM -0800, Bakul Shah wrote:<br>
&gt;&gt; On Feb 4, 2021, at 4:33 PM, Larry McVoy &lt;<a href=3D"mailto:lm@m=
cvoy.com" target=3D"_blank">lm@mcvoy.com</a>&gt; wrote:<br>
&gt;&gt;&gt; <br>
&gt;&gt;&gt; Ignoring the page cache and make their own cache has big probl=
ems.<br>
&gt;&gt;&gt; You can mmap() ZFS files and doing so means that when a page i=
s referenced<br>
&gt;&gt;&gt; it is copied from the ZFS cache to the page cache.=C2=A0 That =
creates a<br>
&gt;&gt;&gt; coherency problem, I can write via the mapping and I can write=
 via<br>
&gt;&gt;&gt; write(2) and now you have two copies of the data that don&#39;=
t match,<br>
&gt;&gt;&gt; that&#39;s pretty much OS no-no #1.<br>
&gt;&gt; <br>
&gt;&gt; Write(2)ing to a mapped page sounds pretty dodgy. Likely to get yo=
u<br>
&gt;&gt; in trouble in any case. Similarly read(2)ing. <br>
&gt; <br>
&gt; The entire point of the SunOS 4.0 VM system was that the page you<br>
&gt; saw via mmap(2) is the exact same page you saw via read(2).=C2=A0 It&#=
39;s<br>
&gt; the page cache, it has page sized chunks of memory that cache <br>
&gt; file,offset pairs.<br>
&gt; <br>
&gt; There is one, and only one, copy of the truth.=C2=A0 Doesn&#39;t matte=
r how<br>
&gt; you get at it, there is only one &quot;it&quot;.<br>
&gt; <br>
&gt; ZFS broke that contract and that was a step backwards in terms of<br>
&gt; OS design.<br>
<br>
Let me repeat a part of my response you cut out:<br>
<br>
=C2=A0 =C2=A0 And you can keep track of mapped pages and read/write from th=
em if<br>
=C2=A0 =C2=A0 necessary even if you have a=C2=A0 separate cache for any com=
pressed pages.<br>
<br>
In essence you pass the ownership of a page&#39;s data from a compressed<br=
>
page cache to the mapped page. Just like in processor cache coherence<br>
algorithms there is one source of truth: the current owner of a cached<br>
unit (line or page or whatever). In other words, the you see via mmap(2)<br=
>
will be the exact same page you will see via read(2). Not having actually<b=
r>
tried this I may have missed corner cases + any practical considerations<br=
>
complicating things but *conceptually* this doesn&#39;t seem hard.</blockqu=
ote><div><br></div><div>In essence, that&#39;s what the merged page/buffer =
cache is all about: file IO (read/write) operations are satisfied from the =
same memory cache that backs up VM objects. I agree that conceptually it&#3=
9;s not that complex; but that&#39;s not what ZFS does.</div><div><br></div=
><div>Of course the original Unix buffer cache didn&#39;t do that either, b=
ecause no one was mmap&#39;ing=C2=A0files on the PDP-11, let alone the PDP-=
7. A RAM-based buffer cache for blocks as the nexus around which the system=
 serialized access to the disc-resident filesystem sufficed. When virtual a=
ddress spaces got bigger (starting on the VAX) and folks wanted to start be=
ing more clever with marrying virtual memory and IO, you had an impedance m=
ismatch with a fairly large extant kernel that had developed not taking int=
o consideration memory-mapped IO to/from files. Sun fixed this, at what I t=
ake to be great expense (I followed keenly the=C2=A0same path of developmen=
t in *BSD and Linux at the time and saw how long that took, so I believe th=
is). But then the same Sun broke it again.</div><div><br></div><blockquote =
class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px sol=
id rgb(204,204,204);padding-left:1ex">
Warner mentions not using ZFS for its double copying. May be omething<br>
like the above can a step in the direction of integrating the caches?<br></=
blockquote><div><br></div><div>But the cache was integrated! Until it wasn&=
#39;t again....</div><div><br></div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex">
As Ron says, I too would like to hear what the authors of ZFS have to say..=
..<br></blockquote><div><br></div><div>Sounds like they thought it was too =
hard because compression means the place on storage where an offset in a fi=
le lands is no longer a linear function of the file&#39;s contents. Presuma=
bly the compressed contents are not kept in RAM in any of the caches (aside=
 from a temporary buffer to which the compressed contents are read or somet=
hing).</div><div><br></div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 - Dan C.</div><=
div><br></div></div></div>

--000000000000a876f305baa165ac--
