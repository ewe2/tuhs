Return-Path: <tuhs-bounces@minnie.tuhs.org>
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=HEADER_FROM_DIFFERENT_DOMAINS,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no
	version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id a1b01cc4
	for <ml@inbox.vuxu.org>;
	Mon, 4 Feb 2019 23:42:43 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 818929B8AD; Tue,  5 Feb 2019 09:42:42 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id EAC029B894;
	Tue,  5 Feb 2019 09:42:15 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 3FB9D9B894; Tue,  5 Feb 2019 09:42:13 +1000 (AEST)
Received: from mail.cs.Dartmouth.EDU (mail.cs.dartmouth.edu [129.170.212.100])
 by minnie.tuhs.org (Postfix) with ESMTPS id 8F8629B891
 for <tuhs@tuhs.org>; Tue,  5 Feb 2019 09:42:11 +1000 (AEST)
Received: from coolidge.cs.Dartmouth.EDU (coolidge.cs.dartmouth.edu
 [129.170.213.217])
 by mail.cs.Dartmouth.EDU (8.15.2/8.15.2) with ESMTPS id x14Ng9jE009167
 (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NO)
 for <tuhs@tuhs.org>; Mon, 4 Feb 2019 18:42:09 -0500
Received: from coolidge.cs.Dartmouth.EDU (localhost [127.0.0.1])
 by coolidge.cs.Dartmouth.EDU (8.15.2/8.15.2) with ESMTP id x14Ng87h023253
 for <tuhs@tuhs.org>; Mon, 4 Feb 2019 18:42:09 -0500
Received: (from doug@localhost)
 by coolidge.cs.Dartmouth.EDU (8.15.2/8.15.2/Submit) id x14Ng8Q2023252
 for tuhs@tuhs.org; Mon, 4 Feb 2019 18:42:08 -0500
From: Doug McIlroy <doug@cs.dartmouth.edu>
Message-Id: <201902042342.x14Ng8Q2023252@coolidge.cs.Dartmouth.EDU>
Date: Mon, 04 Feb 2019 18:42:08 -0500
To: tuhs@tuhs.org
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Subject: Re: [TUHS] Happy birthday, Ken Thompson!
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

> Ken wrote ... ed(before regexp ed)

Actually Ken wrote a regexp qed (for Multics) before he wrote ed.
He wrote about it here, before the birth of Unix:
Programming Techniques: Regular expression search algorithm 
Ken Thompson 
June 1968 Communications of the ACM: Volume 11 Issue 6, June 1968 

This is the nondetermistic regexp recognizer that's been used 
ever since. Amusingly a reviewer for Computing Reviews panned
the article on the grounds that everybody already knew how to
write a deterministic recognizer that runs in linear time.
There's no use for this slower program. What the reviewer failed
to observe is that it may take time exponential in the size of
the regexp (and ditto for space) to make such a recognizer.
In real life for a one-shot recognizer that can easily be the
dominant cost.

The problem of exponential construction time arose in Al Aho's
egrep. I was an early adopter--for the calendar(1) daemon. The
daemon generated a date recognizer that accepted most any
(American style) date. The regular expresssions were a couple
of hundred bytes long, full of alternations. Aho was chagrinned
to learn that it took about 30 seconds to make a recognizer
that would be used for less than a second. That led Al to the
wonderful invention of a lazily-constructed recognizer that
would only construct the states that were actually visited
during recognition. At last a really linear-time algorithm!

This is one of my favorite examples of the synergy of having
sytems builders and theoreticians together in one small 
department.

Doug
