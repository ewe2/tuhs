From: clemc@ccc.com (Clem Cole)
Date: Thu, 30 Jun 2016 15:47:16 -0400
Subject: [TUHS] Algol68 vs. C at Bell Labs
In-Reply-To: <2c674075-db86-827b-fd97-30921757e9ae@aueb.gr>
References: <0f57f9d8248db61cba34372814d2f45e.squirrel@webmail.yaccman.com>
 <CAC20D2OT2k6TqvdBiCzM8PoJ6Bs4YZKZ1BPPT_czJT0koGMk_g@mail.gmail.com>
 <CAOkr1zV9_vtMtZ65Cf-+qOAWYdHvpZ+-CXS9zz7Q5UaNDP5wFw@mail.gmail.com>
 <CAEoi9W5RA0Eb90YT5t_23Q8bwj_Hi8pfmzsNpE0ujWLH-GnC6Q@mail.gmail.com>
 <2c674075-db86-827b-fd97-30921757e9ae@aueb.gr>
Message-ID: <CAC20D2PvPs9av5wsTcs=8mQaLdsYbsREciLgTD8cMHgxi+skjg@mail.gmail.com>

On Thu, Jun 30, 2016 at 3:21 PM, Diomidis Spinellis <dds at aueb.gr> wrote:

> First, the 8088 was a 16-bit CPU with an 8-bit data bus in a cheap 40-pin
> package.  This halved the number DRAM chips required and allowed the IBM PC
> to be easily designed along existing easily-available 8-bit peripherals.
> In contrast the 68000 had a 16-bit data bus in a more expensive 64-pin
> package.  Remember that in the 1980s glue logic was implemented through
> simple TTL chips, so adopting the 68000 might have doubled the number of
> chips on the motherboard.
>
hrrmpt...​Moto had the 68008 which was an 8 bit bus, smaller # of pins,
plus all of the 68K chips could directly talk the 6800 line of peripheral
chips (I even have an old Moto app note right here telling you how).  In
fact IBM, used a number of 6800 chips in the PC for things like the display
controller.

Also remember in those days IBM and Moto were very, very tight.  MECL
-- Motorola Emitter Coupled Logic was design by Moto for IBM for the 370
family.  TTL or as it was called at IBM - VTL (Vendor Transistor Logic),
was less favored.

That said, what would become the 68000 was TTL levels.   That was because
the prototyped it in TTL (and wrote the microcode on the TTL system).



> In addition, the 8086 architecture was an extension of the 8080 one,
>
​Yes and no.​  Yes the 4004's HL register pair still lives on.  But the
8080/8085 instruction set was different from the 8086.




> which made it easier to make the MS-DOS API compatible with the CP/M one,
> which was used by many popular programs.  This would simplify their
> porting.  (A lot of early IBM PC software was written in assembly
> language.)
>
​Yes there were tools to help move assembler code but it still had to be
hand tuned,  Even the PL/M tools were specific to 8080 and 8086.​

But I don't know of much code that took the CP/M to MS-DOS conversion path.




> The MS-DOS 1.0 interrupts (system calls) even used the same numbers and
> structures (file control blocks - FCBs) as those used by CP/M.
>
​Yes, DOS-86 was attempt to rewrite CP/M for the 8086 by Seattle computer
products.  And CP/M was attempt by Digital Research to rewrite RT-11.
There are a lot of common structures, I/O calls and even command names.
 But that is more of the "baby duck syndrome" - it was what the
implementors knew and were used too.​

As other have suggested, it is sad that the model was not UNIX.   The BDS
guys wrote a UNIX-like system for the S-100 machines.   I remember it being
shown to Dennis at a USENIX in the early 1980s and he stating how much
it reminded him of early UNIX.  So yes, the key is that if people had had
other models AND it had made economic sense, the world might have been
different.

But RT-11, ney: CP/M , ney DOS-86, ney PC-DOS, ney MS-DOS >>was<< good
enough as Marc pointed out.   IBM and the Microsoft were fabulously
successful with what they build, even if it was not technically as good as
what was possible.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20160630/0e0c998f/attachment.html>

