From: P.A.Osborne@ukc.ac.uk (P.A.Osborne)
Date: Fri, 25 Jan 2002 09:42:18 +0000
Subject: [TUHS] So now that the source is finally out...
In-Reply-To: <200201250045.KAA31838@guardian-ext.bond.edu.au>; from becker@ab.edu on Thu, Jan 24, 2002 at 01:39:50PM -0500
References: <200201250045.KAA31838@guardian-ext.bond.edu.au>
Message-ID: <20020125094218.C5968@apple.ukc.ac.uk>

On Thu, Jan 24, 2002 at 01:39:50PM -0500, Rob Becker wrote:
> who is going to port 7th edition to the i386? (:

OK I know that the comment was a joke but...

Funnily enough I started looking at doing just that around 18 months 
ago.  Unfortunately (from that point of view) it ground to a halt when
wedding arrangements took priority.   

Anyhow the wedding is out of the way - the missus is now a computing 
student so I should get some sympathy from her (she likes Unix :-), so
hopefully I can resurrect my notes etc and start working on it again. 

No promises mind as I havent touched C or assembly for around 18months
now so am getting increasily rusty.  Not that my x86 assembler is 
particulary good,  or that the missus will allow me enough free time to
get my head back into coding at home...

So the following is what I can remember from quite a while ago...

Also from what I did look at,  I rapidly came to the conclusion that 
a "real" mode i386 port was the more straight forward as that keeps
everything in 16 bits and saves a lot of mucking around.  

So you could either rewrite it as a process that runs as 16 bits and
so use it as an app under say Linux/FreeBSD/OS/2  (I wont mention the
people from Redmond :-),   or as a 16 bit OS running native.

Either way the first skirmishes I made with the source lead me to 
believe that in simple terms, the following would need to be completed:
-  rewrite the assembler portion to x86 - memory management/interrupt
   handlers/booting and initialisation etc etc
-  rewrite the disk driver to run the floppy drive (1.4 MB should be
   enough to demonstrate it works and boot a kernel etc)
-  the tty stuff could conceivably be pointed at COM1 and you could
   hang a console/teletype (for the sad) onto the back of a PC  or
   just produce suitable keyboard/screen drivers.

With any joy if the assembler level can be done correctly (device drivers
aside) you could theoretically leave the bulk of the C source intact - which
could possibly make it a purer port, assuming you can get gcc to compile 
K&R C - I havent tried yet.


Anyhow comments and sarcastic remarks are welcome.

Regards

Paul


------------
Paul Osborne
Computing Officer
University of Kent at Canterbury Computing Service


