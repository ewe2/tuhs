From: lm@mcvoy.com (Larry McVoy)
Date: Mon, 20 Nov 2017 15:45:15 -0800
Subject: [TUHS] UNIX on S/370
In-Reply-To: <05af01d36259$5e0873e0$1a195ba0$@ronnatalie.com>
References: <CAJfiPzxnwNdAHLRV4+QUF-k-ib4tuFj5BLy-r-jL9W7zHHziQw@mail.gmail.com>
 <201711200350.vAK3omwQ013495@freefriends.org>
 <CAC20D2Mtp1+fPP5W8TP8HRiu7EKJGfWPVADDRwydVwv2UEXheQ@mail.gmail.com>
 <CAP6exYK_4TOPsi3DLK4jaR4aB0Ms9L3sm7Fa9NPCexVmT=FoZQ@mail.gmail.com>
 <CAC20D2NYq5o2WY1JsXAzXdC4s9U0QT8Y5k3j6HzHEJon7GazaA@mail.gmail.com>
 <CABH=_VQ=gDZ7RHzN8jTRy8A0FH9JwxFq92tvYawA+aZwbsFHvQ@mail.gmail.com>
 <20171120195618.GK9146@mcvoy.com>
 <05af01d36259$5e0873e0$1a195ba0$@ronnatalie.com>
Message-ID: <20171120234515.GB9093@mcvoy.com>

On Mon, Nov 20, 2017 at 06:43:28PM -0500, Ron Natalie wrote:
> 
> 
> > I get that PDP-11 and VAX used memory mapped I/O but was that somehow
> exposed above the device driver layer?  If so, I missed that, because I had
> no conceptual or technical problem with talking to an I/O 
> 
> > channel, it was pretty easy.  And I suck at writing drivers.
> 
> There's nothing that restricts a device driver to memory mapped I/O.    You
> do what ever you have to do to initiate the I/O.   Even the x86's originally
> used special instructions to start the I/O (in/out).    The DENELCOR HEP
> supercomputer (we did this port around 1983) we had to bounce I/O requests
> off a separate I/O processor different from where the kernel was running.
> Similar constucts were used on other machines.

Yeah, that's what I thought.  But other people were saying that I/O
processors and Unix didn't mix.  I don't get that, seems like whatever
the model is is hidden under the driver, that's the whole point of the
driver design is it not?

