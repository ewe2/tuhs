From: mparson@bl.org (Michael Parson)
Date: Tue, 08 May 2018 11:31:37 -0500
Subject: [TUHS] unix "awesome list"
In-Reply-To: <20180508122429.GG999@thunk.org>
References: <alpine.BSF.2.21.999.1805080707060.13425@aneurin.horsfall.org>
 <b637e35002b1b5e78a943407e221d8da87464e4e@webmail.yaccman.com>
 <20180508122429.GG999@thunk.org>
Message-ID: <95a2a49d689b9a9c844e76ebf8385885@bl.org>

On 2018-05-08 07:24, Theodore Y. Ts'o wrote:
> On Mon, May 07, 2018 at 02:53:26PM -0700, Steve Johnson wrote:
>> Some would argue that it was well on its way to being forgotten by
>> BSD.  The problem with that statement is that the deployment of mice
>> and touchscreens meant that the base premise (universal interface) was
>> no longer true.  Fonts and markup completed the job.
>> 
>> When I first used Unix, I wrote several ed scripts every day, and
>> several shell scripts each week.  Glass terminals made ed scripts
>> obsolete without any similar abstraction being available for doing
>> similar text operations on several related files.
> 
> While true, that's only part of the story.  There was also the issue
> that what users wanted to *do* with computers got more complex.
> Consider spreadsheets and relational databases --- how do they get
> implemented in "the Unix way"?  There was rdb, but it was a bit of a
> disaster from a performance perspective and only worked for toy
> databases.  And this wasn't unique to Unix.  In the VMS world,
> ALL-IN-1 offered group scheduling/calendaring and other "office
> software" features.  You *could* implemnt a group scheduling system
> using sed, awk, grep, cat, and pipelines --- but would you want to?
> Is that the best way to go about doing things?
> 
> And on the hardware side, the advent of hot-pluggable hardware devices
> and much more complex UI devices (sound, video cameras, etc.) that
> need to be made accessible to the logged-in user sitting in front of a
> particular console, put a lot more pressure on the simple login and
> /dev model of historical Unix.
> 
> So sure, it's easy to criticize "PenguinOS" for departing from the
> Unix ideal.  But what's the alternative?  Can the criticis design
> something better that matches the needs and requirements of the users
> (who don't like big question marks on dashboards as "user friendly"
> error reporting) and the realities of modern hardware and modern user
> interface?
> 
> And if so, would those critics care to implement it and contribute it
> under a BSD-style license?  (Or some other Open Source License)?
> After all competing with the user friendliness of GNOME should be that
> hard --- and it's been getting easier over the years as GNOME cuts
> feature after feature from their system.  :-)
> 

For me, it's not really the proliferation of servers (rdbms, web 
servers, collaboration back-ends, etc), desktop apps (spreadsheets, word 
processors, etc), but more of the 'traditional' unix cli utils that have 
grown beyond the 'do one thing' mantra.

Going beyond 'cat -v considered harmful', things like ifconfig, route, 
and netstat being considered 'deprecated' and replaced with the 'ip' 
tool.  Same with syslog, cron, init, and who knows what else, being 
replaced with systemd and journald.  This doesn't even cover how vim has 
become way more than just a GNU re-implementation of vi.

-- 
Michael Parson
Pflugerville, TX
KF5LGQ

