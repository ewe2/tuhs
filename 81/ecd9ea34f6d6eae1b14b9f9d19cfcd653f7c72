From: bakul@bitblocks.com (Bakul Shah)
Date: Sat, 17 Mar 2018 00:20:36 -0700
Subject: [TUHS] RIP John Backus
In-Reply-To: <alpine.BSF.2.21.1803170848420.819@aneurin.horsfall.org>
References: <alpine.BSF.2.21.1803170848420.819@aneurin.horsfall.org>
Message-ID: <E7F8EC6F-AD3A-48E8-B663-2724071367F3@bitblocks.com>

On Mar 16, 2018, at 2:52 PM, Dave Horsfall <dave at horsfall.org> wrote:
> 
> We lost computer pioneer John Backus on this day in 2007; amongst other things he gave us FORTRAN (yuck!) and BNF, which is ironic, really, because FORTRAN has no syntax to speak of.

He atoned for designing FORTRAN, so to speak, by coming up
with FP, one of the first functional programming languages
(though he called it FP system). See his 1977 Turing Award
lecture: 
  https://doi.org/10.1145%2F359576.359579

IIRC, someone had posted an interpreter for FP to
comp.sources.unix. Ah, here it is: Volume 20, Issue 50.
  https://groups.google.com/forum/#!msg/comp.sources.unix/O68WmHasQZ8/2v3_YuEbH6IJ

FP's clear inspiration was APL. It didn't succeed but it was
quite influential for the field of functional programming
languages. Though modern FPLs are lambda calculus based (Backus
thought lambda calculus was too powerful and may lead to chaos).

Backus was also involved in the design of Algol58 and Algol60,
which is where he came up with BNF. There is an ancient grammar
notation that is as least as powerful as BNF but it seems Backus
was unaware of it. [Pāṇinian rules can describe languages larger
than CFL but not as large as context sensitive languages]

