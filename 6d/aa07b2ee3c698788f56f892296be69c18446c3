From: scj@yaccman.com (scj@yaccman.com)
Date: Tue, 5 Jan 2016 12:26:44 -0800
Subject: [TUHS] Early Unix function calls: expensive?
In-Reply-To: <96168193-CFB6-433D-8085-4EDBDC0F564B@ronnatalie.com>
References: <20160103233543.GA10102@minnie.tuhs.org>
 <76BC99D5-A8C4-4F8B-8D7D-C621CBD18238@tfeb.org>
 <20160104000113.GD1602@mercury.ccil.org>
 <328D91D8-FF74-46EE-A281-5432716E6206@ieee.org>
 <418F9945-C1BC-4EA1-85F3-981342A9BDD6@ronnatalie.com>
 <CAC20D2Mpy3it2jc4TQ6dMRUJPmq7htmoPH1ntOS=in9P5gfo3w@mail.gmail.com>
 <B3896F3F-2B5A-4AA4-96A7-3DCA096BA82C@ronnatalie.com>
 <CAC20D2NdctE4cmNQxmjdVG7_eWkyyQ24X3AFBUDDVOoanteO9A@mail.gmail.com>
 <2C046974-5E68-416F-9413-2FAD3D3D67EC@ronnatalie.com>
 <CANCZdfptcCOLy4sLaa2nrd6hg7Ra5JBZdBTvvT9t+PJAD807DA@mail.gmail.com>
 <96168193-CFB6-433D-8085-4EDBDC0F564B@ronnatalie.com>
Message-ID: <afab31664ef8e081c99bcf2e3e0b014f.squirrel@webmail.yaccman.com>

> Ah, this brings back memories.    We had this MACRO-11 concept called
> âthreaded codeâ (not threads in the multiprocessing sense).
> Essentially we had very small code fragments that were loaded into a table
> and weâd run them to process data with very light JSR/RET linkage
> (minimal register saves).
>
> Getting back to Richieâs idea of lightweight functions, it indeed is a
> more maintainable style and perhaps ahead of itâs time when modern
> highly optimized inlining compilers came around it made it efficient
> without the programmer needing to wrap his head around it too much.
>
It brought back memories for me, too.  At Ardent, we had a 4-processor
system with each processor a vector processor.  We wanted to be able to go
between parallel and serial very quickly, and the key to achieving this
was to have all 4 threads share the stack.  So in the parallel sections,
all function calls had to be lightweight (only JSR/RET) and keep their
paws off some of the registers (including the stack pointer).  It worked
beautifully, giving us a 3.99 times speedup with 4 processors when we were
in its sweet spot.


