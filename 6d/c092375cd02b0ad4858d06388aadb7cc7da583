From tuhs-bounces@minnie.tuhs.org Tue Jun 26 22:21:22 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=HEADER_FROM_DIFFERENT_DOMAINS,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no
	version=3.4.1
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id fcc606e3
	for <ml@inbox.vuxu.org>;
	Tue, 26 Jun 2018 22:21:22 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 83D47A189C; Wed, 27 Jun 2018 08:21:21 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 58CE2A181F;
	Wed, 27 Jun 2018 08:21:08 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id D5516A181F; Wed, 27 Jun 2018 08:21:03 +1000 (AEST)
Received: from mail.bitblocks.com (ns1.bitblocks.com [173.228.5.8])
 by minnie.tuhs.org (Postfix) with ESMTP id 712399EDF1
 for <tuhs@minnie.tuhs.org>; Wed, 27 Jun 2018 08:21:03 +1000 (AEST)
Received: from mob.bitblocks.com (mob.bitblocks.com [192.168.125.11])
 by mail.bitblocks.com (Postfix) with ESMTP id 819BC156E517;
 Tue, 26 Jun 2018 15:20:41 -0700 (PDT)
Content-Type: text/plain;
	charset=us-ascii
Mime-Version: 1.0 (Mac OS X Mail 11.4 \(3445.8.2\))
From: Bakul Shah <bakul@bitblocks.com>
In-Reply-To: <20180626215905.GH8150@mcvoy.com>
Date: Tue, 26 Jun 2018 15:20:40 -0700
Content-Transfer-Encoding: quoted-printable
Message-Id: <117BE24B-C768-43ED-A470-40FCD1662ECD@bitblocks.com>
References: <CMM.0.96.0.1530035664.beebe@gamma.math.utah.edu>
 <BE30EA2F-6E25-4197-92B4-940BF8BBF0AD@ronnatalie.com>
 <1f8043fd-e8d6-a5e6-5849-022d1a41f5bf@kilonet.net>
 <20180626215012.GE8150@mcvoy.com>
 <B9CFE92A-0090-4576-8E11-83EB63AE05EF@ronnatalie.com>
 <20180626215905.GH8150@mcvoy.com>
To: Larry McVoy <lm@mcvoy.com>
X-Mailer: Apple Mail (2.3445.8.2)
Subject: Re: [TUHS] PDP-11 legacy, C, and modern architectures
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: tuhs@minnie.tuhs.org
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

On Jun 26, 2018, at 2:59 PM, Larry McVoy <lm@mcvoy.com> wrote:
>=20
> On Tue, Jun 26, 2018 at 05:54:32PM -0400, Ronald Natalie wrote:
>>>=20
>>> So I agree, had the same initial reaction.  But I read the paper a=20=

>>> second time and the point about Fortran, all these years later, =
still
>>> being a thing resonated.  The hardware guys stand on their heads to
>>> give us coherent caches. =20
>>=20
>> Fortran is a higher level language.    It gives he compiler more =
flexibility in deciding what the programmer intended and how to =
automatically optimize for the platform.
>> C is often a ???You asked for it, you got it??? type paradigm/
>=20
> I think you are more or less agreeing with the author.  (I also think, =
as
> Unix die hards, we all bridle a little when anyone dares to say =
anything
> negative about C.  We should resist that if it gets in the way of =
making
> things better.)

With new attacks like TLBleed etc. it is becoming increasingly clear =
that
caching (hidden memory to continue with the illusion of a simple memory
model) itself is a potential security issue. I didn't think anything the
author said was particularly controversial any more. A lot of processor
evolution seems to have been to accommodate C's simple memory model.

What is remarkable is how long this illusion has been maintained and
how far we have gotten with it.

> The author at least has me thinking about how you could make a C like=20=

> language that didn't ask as much from the hardware.

Erlang. Actor, vector & dataflow languages. Actually even C itself
can be used if it is used only on individual simple cores and instead
of caches any accessible memory is made explicit. Not sure if there
is a glue language for mapping & scheduling computation to a set of
simple cores with local memory and high speed links to their neighbors.


