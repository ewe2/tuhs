X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,HTML_FONT_LOW_CONTRAST,HTML_MESSAGE,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 7594 invoked from network); 5 Jul 2021 21:30:09 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 5 Jul 2021 21:30:09 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 1409C9C9F2; Tue,  6 Jul 2021 07:30:08 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 6A24E9C9F1;
	Tue,  6 Jul 2021 07:29:33 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=pass (1024-bit key; unprotected) header.d=ccc.com header.i=@ccc.com header.b="OOcQ/TXJ";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 33E619C9F1; Tue,  6 Jul 2021 07:29:31 +1000 (AEST)
Received: from mail-qt1-f175.google.com (mail-qt1-f175.google.com
 [209.85.160.175])
 by minnie.tuhs.org (Postfix) with ESMTPS id 1F6D39C9F0
 for <tuhs@minnie.tuhs.org>; Tue,  6 Jul 2021 07:29:30 +1000 (AEST)
Received: by mail-qt1-f175.google.com with SMTP id w13so13126205qtc.0
 for <tuhs@minnie.tuhs.org>; Mon, 05 Jul 2021 14:29:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ccc.com; s=google;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=a9wud5c5NV0Ivk4N8D92kdbUPR1jME6lV1Zj/IHM8+E=;
 b=OOcQ/TXJ/mjkiyM13CNWHRS8qbzUIKX9HVyoky/8p/0Sc6i1aPSObZBleFATjNYIWa
 SuVXr9iQAULLLtpLFurIyCtVXOXW6pq8DocnuZGJrZ+/HcXiNheJKuGGp5TtxvjWulgI
 xLplnyM8DrTpT+kRVWkkEJZ2SmO/UPnaFIe9g=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=a9wud5c5NV0Ivk4N8D92kdbUPR1jME6lV1Zj/IHM8+E=;
 b=GMOWwl8LsmQ2aTCTw3En0QZl649MbT3IY0tCAnaBbmigTFKKUMnWX4t/esG8ndKUFk
 4myVHVHN5vo//eQ2SLGlhc3yl/kyB2+kq6Q9zV/WrEnPrvZMHD5RqaUJYXXsDoeabfy6
 WXDImVBIZOp2uDP020eFLa0a4bNDW02SIy5DL9sw/PZpQeBMTT0wmsYFpqYocmSy+oca
 MJ/mOk6EOqAOWHE9iWZlW1/y/w0cVCtuSApQn5XAuhUv4w4n2vJ887U7wyx8VYGjt44q
 0Yc1SBrlxb0pSlUOHbh4GSFzTBOR4YBSQ4a45gtcN4P7phmaWG+Pc0NTTFxiPc3qjGn2
 nV5Q==
X-Gm-Message-State: AOAM531TmqkU0EZkanzaH5t35ZChBLhpgQurJB9+HEikrsBc5oAP3/v3
 A8iToM3g/GJMOJEkkM2kn5MmHYVaEWE27fvRT59oxQ==
X-Google-Smtp-Source: ABdhPJxk6hVIUtgI6t/8cN9z9plhUGud2lHq3zaoIznyB2PajFOsiNbb7uo7sbZo3EI8RKWZQrlZcWtRxLESvDSKzpI=
X-Received: by 2002:ac8:479a:: with SMTP id k26mr14353273qtq.119.1625520569037; 
 Mon, 05 Jul 2021 14:29:29 -0700 (PDT)
MIME-Version: 1.0
References: <CMM.0.95.0.1625261060.beebe@gamma.math.utah.edu>
 <20210702213648.GW817@mcvoy.com>
 <CALMnNGgsfTeTnyFEQoPmRseXJ1URfRhMVr1uSrnbkZZ-V1P3Jw@mail.gmail.com>
 <YOJDIn6Hj01Hnwp3@clarinet.employees.org> <20210705002119.GL817@mcvoy.com>
 <CAD2gp_TEVk_-W72ZYJARq-WOPe1oR6xGmO9_JOCRsfJwaneLPA@mail.gmail.com>
 <20210705034751.GU817@mcvoy.com>
 <CAGGBd_o=_LhF8FtxNF+VrC6TTN6mKZMx3Li4-TCA8qiK45BPBQ@mail.gmail.com>
 <20210705134522.nzyIC%steffen@sdaoden.eu>
 <CAGGBd_r-nhpbWGaHAxo+7sRf8VPLMiRx5oQK-Cz_kkm0Y=8JPg@mail.gmail.com>
In-Reply-To: <CAGGBd_r-nhpbWGaHAxo+7sRf8VPLMiRx5oQK-Cz_kkm0Y=8JPg@mail.gmail.com>
From: Clem Cole <clemc@ccc.com>
Date: Mon, 5 Jul 2021 17:29:02 -0400
Message-ID: <CAC20D2NZrKPE2V76GTkNPrf_aChBptZW5JEDmo+zUdjWos1vYw@mail.gmail.com>
To: Dan Stromberg <drsalists@gmail.com>
Content-Type: multipart/alternative; boundary="00000000000017cb3f05c667009a"
Subject: Re: [TUHS] Is C obsolete? (was Re: [tuhs] The Unix shell: a 50-year
 view)
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Unix Heritage Society mailing list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--00000000000017cb3f05c667009a
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Mon, Jul 5, 2021 at 4:16 PM Dan Stromberg <drsalists@gmail.com> wrote:

> A null-terminated array of char is a petri dish.  A proper string type is
> more like a disinfectant.
>
Hrrmpt.... maybe (in theory), but I can say that never seen it really work
in practice --  bwk in Why Pascal is Not My Favorite Programming Language
<http://www.lysator.liu.se/c/bwk-on-pascal.html> describes much of the
practical realities of this sort of choice:

2.1.  The size of an array is part of its typeIf one declares

     var     arr10 : array [1..10] of integer;
             arr20 : array [1..20] of integer;

then arr10 and arr20 are arrays of 10 and 20 integers respectively.  Suppos=
e
we want to write a procedure 'sort' to sort an integer array.  Because
arr10 and arr20 have different types, it is not possible to write a single
procedure that will sort them both.

The place where this affects Software Tools particularly, and I think
programs in general, is that it makes it difficult indeed to create a
library of routines for doing common, general-purpose operations like
sorting.

The particular data type most often affected is 'array of char', for in
Pascal a string is an array of characters.  Consider writing a function
'index(s,c)' that will return the position in the string s where the
character c first occurs, or zero if it does not.  The problem is how to
handle the string argument of 'index'.  The calls 'index('hello',c)' and '
index('goodbye',c)' cannot both be legal, since the strings have different
lengths.  (I pass over the question of how the end of a constant string
like 'hello' can be detected, because it can't.) The next try is

     var     temp : array [1..10] of char;
     temp :=3D 'hello';

     n :=3D index(temp,c);

but the assignment to 'temp' is illegal because 'hello' and 'temp' are of
different lengths.

The only escape from this infinite regress is to define a family of
routines with a member for each possible string size, or to make all
strings (including constant strings like 'define' ) of the same length.

The latter approach is the lesser of two great evils.  In 'Tools', a type
called 'string' is declared as

     type    string =3D array [1..MAXSTR] of char;

where the constant 'MAXSTR' is ``big enough,'' and all strings in all
programs are exactly this size.  This is far from ideal, although it made
it possible to get the programs running.  It does not solve the problem of
creating true libraries of useful routines.

There are some situations where it is simply not acceptable to use the
fixed-size array representation.  For example, the 'Tools' program to sort
lines of text operates by filling up memory with as many lines as will fit;
its running time depends strongly on how full the memory can be packed.

Thus for 'sort', another representation is used, a long array of characters
and a set of indices into this array:

     type    charbuf =3D array [1..MAXBUF] of char;
             charindex =3D array [1..MAXINDEX] of 0..MAXBUF;

But the procedures and functions written to process the fixed-length
representation cannot be used with the variable-length form; an entirely
new set of routines is needed to copy and compare strings in this
representation.  In Fortran or C the same functions could be used for both.

As suggested above, a constant string is written as

     'this is a string'

and has the type 'packed array [1..n] of char', where n is the length.  Thu=
s
each string literal of different length has a different type.  The only way
to write a routine that will print a message and clean up is to pad all
messages out to the same maximum length:

     error('short message                    ');
     error('this is a somewhat longer message');

Many commercial Pascal compilers provide a 'string' data type that
explicitly avoids the problem; 'string's are all taken to be the same type
regardless of size.  This solves the problem for this single data type, but
no other.  It also fails to solve secondary problems like computing the
length of a constant string; another built-in function is the usual
solution.

Pascal enthusiasts often claim that to cope with the array-size problem one
merely has to copy some library routine and fill in the parameters for the
program at hand, but the defense sounds weak at best:(12
<http://www.lysator.liu.se/c/bwk-on-pascal.html#lit-12>)

``Since the bounds of an array are part of its type (or, more exactly, of
the type of its indexes), it is impossible to define a procedure or
function which applies to arrays with differing bounds.  Although this
restriction may appear to be a severe one, the experiences we have had with
Pascal tend to show that it tends to occur very infrequently.  [...]
However, the need to bind the size of parametric arrays is a serious defect
in connection with the use of program libraries.''

This botch is the biggest single problem with Pascal.  I believe that if it
could be fixed, the language would be an order of magnitude more usable.  T=
he
proposed ISO standard for Pascal(13
<http://www.lysator.liu.se/c/bwk-on-pascal.html#lit-13>) provides such a
fix (``conformant array schemas''), but the acceptance of this part of the
standard is apparently still in doubt.
=E1=90=A7

--00000000000017cb3f05c667009a
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div class=3D"gmail_default" style=3D"fon=
t-family:arial,helvetica,sans-serif"><br class=3D"gmail-Apple-interchange-n=
ewline"></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=
=3D"gmail_attr">On Mon, Jul 5, 2021 at 4:16 PM Dan Stromberg &lt;<a href=3D=
"mailto:drsalists@gmail.com">drsalists@gmail.com</a>&gt; wrote:<br></div><b=
lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
ft:1px solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr"><div dir=
=3D"ltr">A null-terminated array of char is a petri dish.=C2=A0 A proper st=
ring type is more like a disinfectant.<br></div></div></blockquote><div cla=
ss=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif">Hrrmp=
t.... maybe (in theory), but I can say that never seen it really work in pr=
actice --=C2=A0 bwk in=C2=A0<a href=3D"http://www.lysator.liu.se/c/bwk-on-p=
ascal.html">Why Pascal is Not My Favorite Programming Language</a>=C2=A0des=
cribes=C2=A0much of the practical realities of this sort of choice:</div><d=
iv class=3D"gmail_default" style=3D"font-family:arial,helvetica,sans-serif"=
><br></div><div class=3D"gmail_default" style=3D"font-family:arial,helvetic=
a,sans-serif"><h2 style=3D"font-family:Times"><font color=3D"#cc0000" style=
=3D"background-color:rgb(0,255,0)">2.1.=C2=A0<tt>=C2=A0</tt>The size of an =
array is part of its type</font></h2><span style=3D"font-family:Times;font-=
size:medium;background-color:rgb(0,255,0)"><font color=3D"#cc0000">If one d=
eclares</font></span><pre><font color=3D"#cc0000" style=3D"background-color=
:rgb(0,255,0)">     var     arr10 : array [1..10] of integer;
             arr20 : array [1..20] of integer;
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">then arr10 and arr20 a=
re arrays of 10 and 20 integers respectively.=C2=A0</span><tt>=C2=A0</tt><s=
pan style=3D"font-family:Times;font-size:medium">Suppose we want to write a=
 procedure &#39;</span><code>sort</code><span style=3D"font-family:Times;fo=
nt-size:medium">&#39; to sort an integer array.=C2=A0</span><tt>=C2=A0</tt>=
<span style=3D"font-family:Times;font-size:medium">Because arr10 and arr20 =
have different types, it is not possible to write a single procedure that w=
ill sort them both.</span></font><p style=3D"font-family:Times;font-size:me=
dium"><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">The p=
lace where this affects Software Tools particularly, and I think programs i=
n general, is that it makes it difficult indeed to create a library of rout=
ines for doing common, general-purpose operations like sorting.</font></p><=
p style=3D"font-family:Times;font-size:medium"><font color=3D"#cc0000" styl=
e=3D"background-color:rgb(0,255,0)">The particular data type most often aff=
ected is &#39;array of char&#39;, for in Pascal a string is an array of cha=
racters.=C2=A0<tt>=C2=A0</tt>Consider writing a function &#39;index(s,c)&#3=
9; that will return the position in the string s where the character c firs=
t occurs, or zero if it does not.=C2=A0<tt>=C2=A0</tt>The problem is how to=
 handle the string argument of &#39;<code>index</code>&#39;.=C2=A0<tt>=C2=
=A0</tt>The calls &#39;<code>index(&#39;hello&#39;,c)</code>&#39; and &#39;=
<code>index(&#39;goodbye&#39;,c)</code>&#39; cannot both be legal, since th=
e strings have different lengths.=C2=A0<tt>=C2=A0</tt>(I pass over the ques=
tion of how the end of a constant string like &#39;<code>hello</code>&#39; =
can be detected, because it can&#39;t.) The next try is</font></p><pre><fon=
t color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">     var     te=
mp : array [1..10] of char;
     temp :=3D &#39;hello&#39;;

     n :=3D index(temp,c);
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">but the assignment to =
&#39;</span><code>temp</code><span style=3D"font-family:Times;font-size:med=
ium">&#39; is illegal because &#39;</span><code>hello</code><span style=3D"=
font-family:Times;font-size:medium">&#39; and &#39;</span><code>temp</code>=
<span style=3D"font-family:Times;font-size:medium">&#39; are of different l=
engths.</span></font><p style=3D"font-family:Times;font-size:medium"><font =
color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">The only escape f=
rom this infinite regress is to define a family of routines with a member f=
or each possible string size, or to make all strings (including constant st=
rings like &#39;<code>define</code>&#39; ) of the same length.</font></p><p=
 style=3D"font-family:Times;font-size:medium"><font color=3D"#cc0000" style=
=3D"background-color:rgb(0,255,0)">The latter approach is the lesser of two=
 great evils.=C2=A0<tt>=C2=A0</tt>In &#39;Tools&#39;, a type called &#39;<c=
ode>string</code>&#39; is declared as</font></p><pre><font color=3D"#cc0000=
" style=3D"background-color:rgb(0,255,0)">     type    string =3D array [1.=
.MAXSTR] of char;
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">where the constant &#3=
9;</span><code>MAXSTR</code><span style=3D"font-family:Times;font-size:medi=
um">&#39; is ``big enough,&#39;&#39; and all strings in all programs are ex=
actly this size.=C2=A0</span><tt>=C2=A0</tt><span style=3D"font-family:Time=
s;font-size:medium">This is far from ideal, although it made it possible to=
 get the programs running.=C2=A0</span><tt>=C2=A0</tt><span style=3D"font-f=
amily:Times;font-size:medium">It does not solve the problem of creating tru=
e libraries of useful routines.</span></font><p style=3D"font-family:Times;=
font-size:medium"><font color=3D"#cc0000" style=3D"background-color:rgb(0,2=
55,0)">There are some situations where it is simply not acceptable to use t=
he fixed-size array representation.=C2=A0<tt>=C2=A0</tt>For example, the &#=
39;Tools&#39; program to sort lines of text operates by filling up memory w=
ith as many lines as will fit; its running time depends strongly on how ful=
l the memory can be packed.</font></p><p style=3D"font-family:Times;font-si=
ze:medium"><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">=
Thus for &#39;<code>sort</code>&#39;, another representation is used, a lon=
g array of characters and a set of indices into this array:</font></p><pre>=
<font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">     type  =
  charbuf =3D array [1..MAXBUF] of char;
             charindex =3D array [1..MAXINDEX] of 0..MAXBUF;
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">But the procedures and=
 functions written to process the fixed-length representation cannot be use=
d with the variable-length form; an entirely new set of routines is needed =
to copy and compare strings in this representation.=C2=A0</span><tt>=C2=A0<=
/tt><span style=3D"font-family:Times;font-size:medium">In Fortran or C the =
same functions could be used for both.</span></font><p style=3D"font-family=
:Times;font-size:medium"><font color=3D"#cc0000" style=3D"background-color:=
rgb(0,255,0)">As suggested above, a constant string is written as</font></p=
><pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)">     =
&#39;this is a string&#39;
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">and has the type &#39;=
packed array [1..n] of char&#39;, where n is the length.=C2=A0</span><tt>=
=C2=A0</tt><span style=3D"font-family:Times;font-size:medium">Thus each str=
ing literal of different length has a different type.=C2=A0</span><tt>=C2=
=A0</tt><span style=3D"font-family:Times;font-size:medium">The only way to =
write a routine that will print a message and clean up is to pad all messag=
es out to the same maximum length:</span></font><pre><font color=3D"#cc0000=
" style=3D"background-color:rgb(0,255,0)">     error(&#39;short message    =
                &#39;);
     error(&#39;this is a somewhat longer message&#39;);
</font></pre><font color=3D"#cc0000" style=3D"background-color:rgb(0,255,0)=
"><span style=3D"font-family:Times;font-size:medium">Many commercial Pascal=
 compilers provide a &#39;</span><code>string</code><span style=3D"font-fam=
ily:Times;font-size:medium">&#39; data type that explicitly avoids the prob=
lem; &#39;</span><code>string</code><span style=3D"font-family:Times;font-s=
ize:medium">&#39;s are all taken to be the same type regardless of size.=C2=
=A0</span><tt>=C2=A0</tt><span style=3D"font-family:Times;font-size:medium"=
>This solves the problem for this single data type, but no other.=C2=A0</sp=
an><tt>=C2=A0</tt><span style=3D"font-family:Times;font-size:medium">It als=
o fails to solve secondary problems like computing the length of a constant=
 string; another built-in function is the usual solution.</span></font><p s=
tyle=3D"font-family:Times;font-size:medium"><font color=3D"#cc0000" style=
=3D"background-color:rgb(0,255,0)">Pascal enthusiasts often claim that to c=
ope with the array-size problem one merely has to copy some library routine=
 and fill in the parameters for the program at hand, but the defense sounds=
 weak at best:(<a href=3D"http://www.lysator.liu.se/c/bwk-on-pascal.html#li=
t-12" name=3D"source-12">12</a>)</font></p><blockquote style=3D"font-family=
:Times;font-size:medium"><font color=3D"#cc0000" style=3D"background-color:=
rgb(0,255,0)">``Since the bounds of an array are part of its type (or, more=
 exactly, of the type of its indexes), it is impossible to define a procedu=
re or function which applies to arrays with differing bounds.=C2=A0<tt>=C2=
=A0</tt>Although this restriction may appear to be a severe one, the experi=
ences we have had with Pascal tend to show that it tends to occur very infr=
equently.=C2=A0<tt>=C2=A0</tt>[...] However, the need to bind the size of p=
arametric arrays is a serious defect in connection with the use of program =
libraries.&#39;&#39;</font></blockquote></div><div><span style=3D"color:rgb=
(204,0,0);font-family:Times;font-size:medium">This botch is the biggest sin=
gle problem with Pascal.=C2=A0</span><tt style=3D"color:rgb(204,0,0)">=C2=
=A0</tt><span style=3D"color:rgb(204,0,0);font-family:Times;font-size:mediu=
m">I believe that if it could be fixed, the language would be an order of m=
agnitude more usable.=C2=A0</span><tt style=3D"color:rgb(204,0,0)">=C2=A0</=
tt><span style=3D"color:rgb(204,0,0);font-family:Times;font-size:medium">Th=
e proposed ISO standard for Pascal(</span><a href=3D"http://www.lysator.liu=
.se/c/bwk-on-pascal.html#lit-13" name=3D"source-13" style=3D"font-family:Ti=
mes;font-size:medium">13</a><span style=3D"color:rgb(204,0,0);font-family:T=
imes;font-size:medium">) provides such a fix (``conformant array schemas&#3=
9;&#39;), but the acceptance of this part of the standard is apparently sti=
ll in doubt.</span>=C2=A0</div></div></div><div hspace=3D"streak-pt-mark" s=
tyle=3D"max-height:1px"><img alt=3D"" style=3D"width:0px;max-height:0px;ove=
rflow:hidden" src=3D"https://mailfoogae.appspot.com/t?sender=3DaY2xlbWNAY2N=
jLmNvbQ%3D%3D&amp;type=3Dzerocontent&amp;guid=3D37a6948d-15eb-4926-9dcb-de2=
61c138981"><font color=3D"#ffffff" size=3D"1">=E1=90=A7</font></div>

--00000000000017cb3f05c667009a--
