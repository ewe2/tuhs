From tuhs-bounces@minnie.tuhs.org Sun Aug 19 23:48:50 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.1 (2015-04-28) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.9 required=5.0 tests=DKIM_SIGNED,
	HEADER_FROM_DIFFERENT_DOMAINS,MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE,
	T_DKIM_INVALID autolearn=ham autolearn_force=no version=3.4.1
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id e135249c
	for <ml@inbox.vuxu.org>;
	Sun, 19 Aug 2018 23:48:50 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 453B2A1A53; Mon, 20 Aug 2018 09:48:46 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 22617A19ED;
	Mon, 20 Aug 2018 09:48:05 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=algebras-org.20150623.gappssmtp.com header.i=@algebras-org.20150623.gappssmtp.com header.b=Ch2KJq1N;
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 8B7FBA19ED; Mon, 20 Aug 2018 09:48:02 +1000 (AEST)
Received: from mail-wm0-f53.google.com (mail-wm0-f53.google.com [74.125.82.53])
 by minnie.tuhs.org (Postfix) with ESMTPS id 09CCBA19E9
 for <tuhs@minnie.tuhs.org>; Mon, 20 Aug 2018 09:48:01 +1000 (AEST)
Received: by mail-wm0-f53.google.com with SMTP id w24-v6so12098705wmc.1
 for <tuhs@minnie.tuhs.org>; Sun, 19 Aug 2018 16:48:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=algebras-org.20150623.gappssmtp.com; s=20150623;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-transfer-encoding;
 bh=VmaXSFHWg268nfhi7g6D8dPdcLJiRnZ6VD2D9RgPuR4=;
 b=Ch2KJq1NFqbAAafBF3Vph9qUYnHy0+Xvf9IuDVM9gXv+X/n/z2YBWMgaFFy/0mAXbQ
 qmGogCm8TfpsifSAJ3XEwSvTt15m4lv6peQ1IqVp0k5OTmmRb1G2Pc1W/as/4gV1GFiW
 UgSa6ciMiMOzDTEZSymdjxEWmgAuipzSB1iGIer4yfzXxKgxi/80IRtdlNSIsl2MacMU
 f6AyVI/E5npwF9KGJbYrOlxb7iEqIbv82glDeLPG6JCP0ViRlBYUGnRb99agV5HGorzq
 twFsvPsX6VeAlTYlYRhMBbVXDGKE1quPYOsIBdYh/gSThfhVhE6Od4QL6DFGgIFdL1cP
 kY7Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:in-reply-to:references:from:date
 :message-id:subject:to:cc:content-transfer-encoding;
 bh=VmaXSFHWg268nfhi7g6D8dPdcLJiRnZ6VD2D9RgPuR4=;
 b=lCpJZPJVHULfi0wNuPlAonzXpK+4fexb2QHrKSXRcAo4vN/jrRRZl5Pv7qU4UlH2NN
 pr9biwpsHqWEMRrIoxFbQWVGu/0WRHj9y/ZT08AcRyNvE44yQM/83tbq/7HBZqq8AUSy
 4mm/lDo8cQBZ/GyM1uicYim6kTDLBL+w07i8wCc/fNyvdHKAsZxgtwLBpMGUbaBd3HjI
 65M/nTWA+E6WXr0EYQCghpFjINXtUZ21ord77VUXZJTiz4hprkzZmah9k32NtSZIiHK5
 MxmX/0uMbJeeDT3UGeEwFCZfiLWAWV8TE3dElNce0Lm6YYJz2pKsINxvV3a0vk+t6pLU
 EVfg==
X-Gm-Message-State: AOUpUlHHgqZJ4mKt78ckM7LBvD6J+y5WtK0j1l9d+wj+b352YFImFMpz
 AxKXbqJiCLz+FQvpwZxuZQhZWqC7OKqP10/ZwIaMpcrG
X-Google-Smtp-Source: AA+uWPyD9oPVKG9JD/76R04ZHKe22SF7Uf7tCBHfE0wY+CJpxfIUs2lFpt8j9rWYjM8EonygB0/u2xHio/ivcD4sHMc=
X-Received: by 2002:a1c:b6d6:: with SMTP id
 g205-v6mr26187059wmf.17.1534722479385; 
 Sun, 19 Aug 2018 16:47:59 -0700 (PDT)
MIME-Version: 1.0
Received: by 2002:a1c:12cb:0:0:0:0:0 with HTTP; Sun, 19 Aug 2018 16:47:58
 -0700 (PDT)
X-Originating-IP: [2001:dc0:2001:210:a527:b5a2:2bd6:784d]
In-Reply-To: <20180818155733.523a3d2d@jabberwock.cb.piermont.com>
References: <1533573030.3671.98.camel@mni.thm.de>
 <50772e199f3dcc5d4eba34d17322b5aef0aa0441@webmail.yaccman.com>
 <20180818155733.523a3d2d@jabberwock.cb.piermont.com>
From: George Michaelson <ggm@algebras.org>
Date: Mon, 20 Aug 2018 09:47:58 +1000
Message-ID: <CAKr6gn1+2AM_B1HgmOWQMNHH6jdHGcaOyRBEpFQog8Lmo8Mufw@mail.gmail.com>
To: "Perry E. Metzger" <perry@piermont.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Subject: Re: [TUHS] Formal Specification and Verification (was Re: TUHS
 Digest, Vol 33, Issue 5)
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

Witness to this, the interest in *trying* to apply Coq to Ethereum
smart contracts...

I say "try" because as a complete skeptic, I think the attempt is
doomed except in very small sense. But the reason they are trying is
the importance to FinTech of formally verified state in the expression
of financial transactions. These are serious people. A bunch from
french academic research institutions, a bunch from the CSIRO in
Australia.

I think Perry wrote something of long term value. I encourage you to
write this up somewhere you'd be willing to have published like a tech
blog.

-G

On Sun, Aug 19, 2018 at 5:57 AM, Perry E. Metzger <perry@piermont.com> wrot=
e:
> Sorry for the thread necromancy, but this is a _very_ important
> topic. Perhaps it doesn't belong on tuhs but rather on coff.
>
> This is a pretty long posting. If you don't care to read it, the TL;DR
> is that formal specification and verification is now a real
> discipline, which it wasn't in the old days, and there are systems to
> do it in, and it's well understood.
>
> On 2018-08-06 at 08:52 -0700, Bakul Shah wrote:
>>
>> What counts as a "formal spec"? Is it like Justice Potter
>> Stewart's "I know it when I see it" definition or something
>> better?
>
> At this point, we have a good definition. A formal specification is a
> description of the behavior of a program or piece of hardware in a
> precise machine-readable form that may be used as the basis for fully
> formal verification of the behavior of an implementation. Often these
> days, the specification is given in a formal logic, such as the
> predicative calculus of inductive constructions, which is the logic
> underlying the Coq system.
>
> Isabelle/HOL is another popular system for this sort of work. ACL2 is
> (from what I can tell) of more historical interest but it has
> apparently been used for things like the formal verification of
> floating point and cache control units for real hardware. (It is my
> understanding that it has been many years since Intel would dare
> release a system where the cache unit wasn't verified, and the only
> time in decades it tried to release a non-verified FPU, it got the
> FDIV bug and has never tried that again.) There are some others out
> there, like F*, Lean, etc.
>
> Formal specifications good enough for full formal verification have
> been made for a variety of artifacts along with proofs that the
> artifacts follow the specification. There's a fully formally verified
> C compiler called CompCert for example, based on an operational
> semantics written in Coq. There's another formal semantics for C
> written in K, which is a rather different formal system. There's a
> verified microkernel, seL4, whose specification is written in
> Isabelle/HOL. There's a fully formal specification of the RISC V, and
> an associated verified RTL implementation.
>
> Generally speaking, a formal specification:
>
> 1) Must be machine readable
> 2) The semantics of the underlying specification language must
>    themselves be extremely precisely described. You can't prove the
>    consistency and completeness of the underlying system (see G=C3=B6del)
>    but you _can_ still strongly specify the language.
> 3) Must be usable for formal (that is, machine checkable) proofs that
>    implementations comply with the spec, so it has to be sufficiently
>    powerful. Typical systems are now equivalent to higher order logic.
>
> From: "Hellwig Geisse" <hellwig.geisse@mni.thm.de>
> Sent:Mon, 06 Aug 2018 18:30:30 +0200
>>
>>  For me, a "formal spec" should serve two goals:
>>  1) You can reason about the thing that is specified.
>
> Yes.
>
> 2) The spec can be "executed" (i.e., there is an
>>  interpreting mechanism, which lets the spec behave
>>  like the real thing).
>
> Not always reasonable.
>
> First, it is often the case that a spec does not describe execution at
> all. See, for example, the specification of a sorting function I give
> at the end of this message: it simply says "a sorting function is a
> function such that, for all inputs, the return is a non-decreasing
> permutation of the input". This is not executable. It is a purely
> descriptive property, and you cannot extract an executable algorithm
> from the spec.
>
> Second, even when a spec amounts to a description of execution, a
> proof assistant often cannot actually execute it. For example,
> although you can reason about non-terminating execution in pCiC (and
> thus Coq), programs written in a strongly normalizing lambda calculus
> that can be used as a logic must terminate, or functions that did not
> terminate would be inhabitants of all types and the logic would be
> inconsistent. Thus, you cannot execute a program with infinite loops
> inside Coq, although you can reason about them (and indeed, you can
> reason about coinductively defined objects like infinite execution
> traces.)
>
> On Mon, 06 Aug 2018 14:19:31 -0700 "Steve Johnson" <scj@yaccman.com>
> wrote:
>> I take a somewhat more relaxed view of what a spec should be:
>> It should describe a program with enough completeness that a
>> competent programmer could write it from the spec alone.
>
> I think this is a bit more relaxed than is currently accepted.
>
>> The formal systems I have seen would roll over and die when
>> presented with even a simple compiler.__
>
> I don't know what this means. If it is that there aren't
> implementations of languages like pCiC, that's not true, see Coq. If
> it means no one can formally specify a compiler, given that formally
> verified compilers exist, that's also not true.
>
> The "final theorem" proving the correctness of CompCert depends on
> having an operational semantics of both C and the target architecture,
> and says (more or less) that the observed behavior of the input
> program in C is the same as the observed behavior of the output
> program (say in ARM machine language). This is a serious piece of
> work, but it is also something that has actually been done -- the
> tools are capable of the task.
>
>> Additionally, being able to specify that a particular function be
>> carried out by a heapsort, for example, would require that the
>> formalism could describe the heapsort and prove it correct.__ These
>> don't grow on trees...
>
> Formally verifying a couple of sorting algorithms described in Coq is
> a exercise for an intro level class on formal verification. I've done
> it. Once you have the proper primitives described, the specification
> for a sorting algorithm in Coq looks like this:
>
> Definition is_a_sorting_algorithm (f: list nat -> list nat) :=3D
>   forall al, Permutation al (f al) /\ sorted (f al).
>
> That says "the property "is_a_sorting_algorithm" over a function from
> lists of natural numbers to lists of natural numbers is that the
> output is a permutation of the input in which all the elements are in
> non-decreasing order." The definitions in question are very
> precise. For example, one definition of sorted (the property of being
> a non-decreasing list) is:
>
> Definition sorted (al: list nat) :=3D
>  forall i j, i < j < length al -> nth i al 0 <=3D nth j al 0.
>
> and the property of being a permutation, which is relatively
> complicated inductively defined property, is:
>
> Inductive Permutation {A : Type} : list A -> list A -> Prop :=3D
>     perm_nil : Permutation
>   | perm_skip : forall (x : A) (l l' : list A),
>                 Permutation l l' ->
>                 Permutation (x :: l) (x :: l')
>   | perm_swap : forall (x y : A) (l : list A),
>                 Permutation (y :: x :: l) (x :: y :: l)
>   | perm_trans : forall l l' l'' : list A,
>                  Permutation l l' ->
>                  Permutation l' l'' ->
>                  Permutation l l''.
>
> Coq starts out with basically nothing defined, by the way. Notions
> such as "natural number" and "list" are not built in. Peano naturals
> are defined in the system thusly:
>
> Inductive nat : Type :=3D
>   | O : nat
>   | S : nat -> nat.
>
> The underlying basis of Coq (i.e. the Predicative Calculus of
> Inductive Constructions) is a dependently typed lambda calculus that's
> astonishingly simple, and the checker for proofs in the system is only
> a few hundred lines long -- the checker is the only portion of the
> system which needs to be trusted.
>
> In recent years, I've noted that "old timers" (such as many of us,
> myself included) seem to be unaware of the fact that systems like Coq
> exist, or that it is now relatively (I emphasize _relatively_) routine
> for substantial systems to be fully formally specified and then fully
> formally verified.
>
>
> Perry
> --
> Perry E. Metzger                perry@piermont.com
