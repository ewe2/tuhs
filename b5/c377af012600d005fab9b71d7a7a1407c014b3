X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 28306 invoked from network); 7 Jun 2020 00:13:17 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 7 Jun 2020 00:13:17 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id EC7579CA32; Sun,  7 Jun 2020 10:13:09 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 439109C6FC;
	Sun,  7 Jun 2020 10:12:43 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 157299C6FC; Sun,  7 Jun 2020 10:12:41 +1000 (AEST)
Received: from central.weird.com (unknown [198.96.117.51])
 by minnie.tuhs.org (Postfix) with ESMTP id A3B009C606
 for <tuhs@tuhs.org>; Sun,  7 Jun 2020 10:12:39 +1000 (AEST)
Received: from (invalid client hostname: bind: DNS error: DNS lookup for A for
 'more.local': Unknown host)more.local ((no PTR matching greeting
 name)S01060026bb6c284e.ok.shawcable.net[24.71.254.93] port=41408)
 by central.weird.com([198.96.117.51] port=587)
 via TCP with esmtp (6720 bytes) (sender: <woods@mail.weird.com>)
 (ident <nobody> using UNIX) id <m1jhivV-00r7TPC@central.weird.com>
 for <tuhs@tuhs.org>; Sat, 6 Jun 2020 20:12:37 -0400 (EDT)
 (Smail-3.2.0.122-Pre 2005-Nov-17 #78 built 2020-Mar-25)
Received: from (invalid client hostname: the DNS A record (with the targegt
 address [10.0.1.129]) for the hostname 'more.local' does not match the
 expected address [10.0.1.129])more.local
 ((no PTR matching greeting name)future.local[10.0.1.133] port=64311)
 by more.local([10.0.1.129] port=25) via TCP with esmtp (6211 bytes)
 (sender: <woods@mail.weird.com>) id <m1jhivR-0036tPC@more.local>
 for <tuhs@tuhs.org>; Sat, 6 Jun 2020 17:12:33 -0700 (PDT)
 (Smail-3.2.0.122-Pre 2005-Nov-17 #1 built 2015-Feb-17)
Message-Id: <m1jhivR-0036tPC@more.local>
Date: Sat, 06 Jun 2020 17:12:35 -0700
From: "Greg A. Woods" <woods@robohack.ca>
To: The Unix Heritage Society mailing list <tuhs@tuhs.org>
In-Reply-To: <64F96FBA-2BA7-4282-8516-5BD72E94B652@iitbombay.org>
References: <CAEuQd1B8gH-Lu22HKj9pn6JVXNVVYscAnL4TSVDY03k2ORy2qw@mail.gmail.com>
 <8a2e9b1b-8890-a783-5b53-c8480c070f2e@telegraphics.com.au>
 <m1jcHQv-0036tPC@more.local>
 <CAC20D2NhWp8V88+7KFaRdYPtn=YrJBfWxUu9OM4bOu8Fp_7KEA@mail.gmail.com>
 <alpine.BSF.2.21.9999.2005261411560.79423@aneurin.horsfall.org>
 <CAC20D2O1QZamBa_7V7=QVKHy4BHdqNQmj1iuSJta=MpyuBjudw@mail.gmail.com>
 <m1jdfb4-0036tRC@more.local>
 <d6bca9b8fc16b4fb5c34847a52aced59@firemail.de>
 <m1jdiBT-0036tRC@more.local>
 <B98F991C-667C-45D5-ADFD-BB71522FEA24@ronnatalie.com>
 <CACYmRNCOjopZm4YJEjBvCB6WGsV27SMkws-offmZ2VSR0gYDGw@mail.gmail.com>
 <64F96FBA-2BA7-4282-8516-5BD72E94B652@iitbombay.org>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM/1.14.9 (=?ISO-8859-4?Q?Goj=F2?=) APEL/10.8 EasyPG/1.0.0 Emacs/25.3
 (x86_64--netbsd) MULE/6.0 (HANACHIRUSATO)
X-Face: ; j3Eth2XV8h1Yfu<eXd9JL+"t;
 iT8?{X]Fjm`Qb]>*uL{<:dQ$#E[DB0gemGZJ"J#4fH*][
 lz; @-iwMv_u\6uIEKR0KY"=MzoQH#CrqBN`nG_5B@rrM8,f~Gr&h5a\=<t0loVf0$}bP=]i3OMh"n_
 _@m4/, ~2`V=(-9LyW.)'`@E_fE^<4y7)BIe`A''/j-Y#gDNZERh%CCij'q-NA4F<|yjznEhd7=l^xH
 2.qD3o0IanGHERTW+z$G
Organization: Planix, Inc.
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: multipart/signed;
 boundary="pgp-sign-Multipart_Sat_Jun__6_17:12:13_2020-1"; micalg=pgp-sha1;
 protocol="application/pgp-signature"
Content-Transfer-Encoding: 7bit
Subject: Re: [TUHS] History of popularity of C
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Reply-To: The Unix Heritage Society mailing list <tuhs@tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--pgp-sign-Multipart_Sat_Jun__6_17:12:13_2020-1
Content-Type: text/plain; charset=US-ASCII

At Sat, 6 Jun 2020 16:31:42 -0700, Bakul Shah <bakul@iitbombay.org> wrote:
Subject: Re: [TUHS] History of popularity of C
>
> On Jun 6, 2020, at 1:49 PM, Ed Carp <erc@pobox.com> wrote:
> >
> > On 5/27/20, Ronald Natalie <ron@ronnatalie.com> wrote:
> >
> >> The large areas of undefined and unspecified behavior has always
> >> been an issue in C.  It was somewhat acceptable when you were using
> >> it as a direct replacement for assembler, but Java and many of
> >> other follow-ons endevaored to be more portable/rigourous.  Of
> >> course, you can write crap code in any language.
> >
> > "It's not a bug, it's a feature"
>
> A snippet of a recent comp.arch post by someone (the subject was C and
> safety):
>
> 	What you call "misfeatures", some other people call "features".
> 	If you expect people to take you and your opinions seriously,
> 	you'll get on better if you stop mocking other opinions. I've
> 	written several times why undefined behaviour lets me write
> 	better and safer code, as well as more efficient code.  If you
> 	remain determinedly unconvinced, at least agree to disagree
> 	without sounding childish about it.

Heh.

W.r.t. efficiency, well undefined behaviour does allow the compiler to
turn their code, or anyone's else's code, into more "efficient" code if
they happen to (accidentally or otherwise) trip over undefined
behaviour.

However I don't think it can be argued in any valid way that "undefined
behaviour" can ever lead to "better and safer" code, in any way, or from
any viewing angle, whatsoever.

"Undefined behaviour" just means that the language definition is somehow
adversely compromised in such a way that it is impossible to prevent the
programmer from writing compilable and executable code that will always
produce some well defined behaviour in all standards-compliant
implementations.  I.e. the language allows that there are ways to write
syntactically correct code that cannot be guaranteed to do anything
particular whatsoever in _all_ standards-compatible implementations.

We can argue until the cows come home whether "undefined behaviour" is a
"necessary" part of the language definition (e.g. to keep the language
implementable, or backward-compatible, or whatever), but I don't see how
any valid argument can ever be made for it being a "good" and "useful"
thing from the perspective of a programmer using the language.

Undefined behaviours are black holes for which the language standard
offers no real guidance nor maps for safe passage other than the stern
warning to avoid them as best as possible.  Perhaps it is such
scare-mongering that the author above justifies as their influence to
write "better and safer" code, but that's no good argument for having
such pits of despair in the language definition in the first place.  If
we were arguing theology then I would say the bible we call the "C
Standard" is actually actively trying to trap its followers into
committing sins.

Luckily the real world of C is made of actual implementations, and they
are free to either offer definitions for how various (ab)uses of the
language will work, or to maintain the black holes of mystery that we
must try to avoid, or even sometimes to give us the choice in how they
will treat our code.  As programmers we should try to choose which
implementation(s) we use, and how we control _their_ behaviour, while at
the same time still doing our best to avoid giving them the rope to hang
us with.

--
					Greg A. Woods <gwoods@acm.org>

Kelowna, BC     +1 250 762-7675           RoboHack <woods@robohack.ca>
Planix, Inc. <woods@planix.com>     Avoncote Farms <woods@avoncote.ca>

--pgp-sign-Multipart_Sat_Jun__6_17:12:13_2020-1
Content-Type: application/pgp-signature
Content-Transfer-Encoding: 7bit
Content-Description: OpenPGP Digital Signature

-----BEGIN PGP SIGNATURE-----

iF0EABECAB0WIQTWEnAIIlcZX4oAawJie18UwlnHhQUCXtww4AAKCRBie18UwlnH
hcgTAKD53h978E2Y76t8NXCC4rUFQ4r8KwCgvZ2WfG6vE0yhDhIIzY0mZ+HspzU=
=S2/1
-----END PGP SIGNATURE-----

--pgp-sign-Multipart_Sat_Jun__6_17:12:13_2020-1--
