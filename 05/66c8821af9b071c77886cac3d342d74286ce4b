From: clemc@ccc.com (Clem Cole)
Date: Fri, 12 Sep 2014 15:02:01 -0400
Subject: [TUHS] Etymology of bc(1)
In-Reply-To: <5371bd291f9537ed5935435a418bc648.squirrel@webmail.yaccman.com>
References: <20140912015415.DB69E18C09E@mercury.lcs.mit.edu>
 <alpine.BSF.2.00.1409121547260.63870@aneurin.horsfall.org>
 <20140912111512.GA14385@mercury.ccil.org>
 <20140912113612.GN24919@discoboy.drijf.net>
 <5371bd291f9537ed5935435a418bc648.squirrel@webmail.yaccman.com>
Message-ID: <CAC20D2NAbNtzdFJusbNuaUAr-30dB81nCe-vrqhdBY3DYt2k_Q@mail.gmail.com>

​Steve good point but ...​


On Fri, Sep 12, 2014 at 1:12 PM, <scj at yaccman.com> wrote:

> And for the most part, we abandoned this style when we got
> 32-bit machines that had as much as a (gasp!) megabyte of memory...
>



​Yes and no (know maybe) - as Pike said "cat -v" considered harmful.
The original small is beautiful idea that ​made UNIX so welcome, was lost
in the process.

I remember when we got the money to maxed out the memory on an 11/34 form
48K to 256K bytes (using aftermarket memory of course).  And as you point
it, it is a lot easier when we use the computer to so a lot more of the
work  (that why we have compilers, debuggers and tools in general).   But
when I look at programs written by daugther and her peers, I realized that
just have the innate feel for what is needed to get the job done often
seems lost to them.  Things just grow and use this framework or thank
subsystem.  It so easy to grab, that I wonder if we are ahead or behind.

That said, I do not yearn longly for V6.  It was a fun system and we did a
lot with it and I certainly learned a ton.  But I am way more productive on
my Mac.   But I think the program style and lessons that many of us have
from the those times is to try to get to the nut of the task at hand and
remember how you are getting there.

Let me be less abstract.  I recently found an Open Source NIXIE tube
subsystem from a guy that used an Arduino.   Its very cool and impressive.
 Think about it, use a $4 computer to run each NIXIE tube, instead of lots
of logic to multiples the pins.  But when I looked at his code, I shook my
head.  Basically straight lined everything, brute force.   I remember being
taught, if the routine is longer than a printer page or two, break it up.
I took his code, put a bunch of the things into tables, made a few
functions to use those tables and cut the size of the code even with the
tables, by almost a 3rd and its a lot easier to understand.

In fact, I wrote a small subsystem so I could debug the whole thing using a
UNIX pipe to represent each digit, as debugging on the Arduino is a really,
really poor.

But what did I do - I applied lessons from a great system, UNIX to create a
clean, easy to understand (and even debug).

Anyway - my thesis is that bigger is not always better.

Clem
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20140912/9e0325fe/attachment.html>

