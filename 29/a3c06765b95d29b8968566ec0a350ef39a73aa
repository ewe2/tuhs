Return-Path: <tuhs-bounces@minnie.tuhs.org>
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=HEADER_FROM_DIFFERENT_DOMAINS,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no
	version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id d0d0ff8f
	for <ml@inbox.vuxu.org>;
	Thu, 19 Sep 2019 21:20:50 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 9802B9BC05; Fri, 20 Sep 2019 07:20:49 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 276EC9B906;
	Fri, 20 Sep 2019 07:20:25 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 327C09B906; Fri, 20 Sep 2019 07:20:24 +1000 (AEST)
Received: from oclsc.com (oclsc.com [206.248.137.164])
 by minnie.tuhs.org (Postfix) with SMTP id 8F298947D6
 for <tuhs@tuhs.org>; Fri, 20 Sep 2019 07:20:17 +1000 (AEST)
From: Norman Wilson <norman@oclsc.org>
To: tuhs@tuhs.org
Date: Thu, 19 Sep 2019 17:19:56 -0400
Message-ID: <1568927999.21637.for-standards-violators@oclsc.org>
Subject: Re: [TUHS] [OT] Re: earliest Unix roff
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

Arthur Krewat:

  Which is better, creating a whole new binary to put in /usr/bin to do a 
  single task, or add a flag to cat?

  Which is better, a proliferation of binaries w/standalone source code, 
  or a single code tree that can handle slightly different tasks and save 
  space?

======

Which is simpler to write correctly, to debug, and to maintain:
a simple program that does a single task, or a huge single program
with lots of tasks mashed together?

Which is easier to understand and use, individual programs each
with a few options specialized to a particular task, or a monolith
with many more options some of which apply only to one task or
another, others to all?

What are you trying to optimize for?  The speed with which
programmers can churn out yet another featureful utility full
of bugs and corner cases, or the ease with which the end-user
can figure out what tool to use and how to use it?

Norman Wilson
Toronto ON
