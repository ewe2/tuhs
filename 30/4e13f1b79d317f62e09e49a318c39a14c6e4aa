From: ron@ronnatalie.com (Ronald Natalie)
Date: Thu, 24 May 2018 10:50:03 -0400
Subject: [TUHS] Control-T (was top)
In-Reply-To: <CAC20D2NkAYBCq2xF-2aO6ep-zvdBy1J=a5PszcviO2JN1hzu8g@mail.gmail.com>
References: <20180524122021.857BC18C09A@mercury.lcs.mit.edu>
 <CAC20D2NkAYBCq2xF-2aO6ep-zvdBy1J=a5PszcviO2JN1hzu8g@mail.gmail.com>
Message-ID: <DF20553B-A166-485F-8965-E3AC0ECB91FA@ronnatalie.com>


Another related creeping featurism was the integration of the control-T feature that was prevalent in many of the DEC 10/20 OSs.
When Mike Muuss was doing some scheduling tweaks he decided that being able to list out all the processes on the terminal with a few parameters (he had the weighted load averages at the top of the list).
It became real handy for me when I set out to reverse engineer how the Csh used job control as well.

For those who aren’t old time kernel hacks, there are two structures associated with every process.   The “proc” structure has essential things like uid/gid and memory sizes and priority.   The proc structure always was resident making it ripe pickings for control-T.    More detailed information including the stack of the process (and hence the command line arguments), were in the user structure.    While the user structure of the currently running process was always resident (and on the PDP-11 at 140000, which meant you could use the display register to display the UID to figure out who the CPU hog was).    This made it harder for the “ps”-like things to get.    I finally relented and put a copy of the first few bytes of the arg list in the proc structure.



