X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 16620 invoked from network); 9 Jul 2021 04:50:55 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 9 Jul 2021 04:50:55 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 908969CAF7; Fri,  9 Jul 2021 14:50:52 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 619289C86C;
	Fri,  9 Jul 2021 14:49:45 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 5C0749C86C; Fri,  9 Jul 2021 14:49:41 +1000 (AEST)
Received: from fourwinds.com (fourwinds.com [63.64.179.162])
 by minnie.tuhs.org (Postfix) with ESMTPS id 067BE9C864
 for <tuhs@minnie.tuhs.org>; Fri,  9 Jul 2021 14:49:38 +1000 (AEST)
Received: from darkstar.fourwinds.com (localhost [127.0.0.1])
 by fourwinds.com (8.15.2/8.15.2) with ESMTPS id 1694nb332752952
 (version=TLSv1.3 cipher=TLS_AES_256_GCM_SHA384 bits=256 verify=NOT)
 for <tuhs@minnie.tuhs.org>; Thu, 8 Jul 2021 21:49:38 -0700
Received: from darkstar.fourwinds.com (jon@localhost)
 by darkstar.fourwinds.com (8.15.2/8.15.2/Submit) with ESMTP id 1694nbum2752949
 for <tuhs@minnie.tuhs.org>; Thu, 8 Jul 2021 21:49:37 -0700
Message-Id: <202107090449.1694nbum2752949@darkstar.fourwinds.com>
From: Jon Steinhart <jon@fourwinds.com>
To: tuhs@minnie.tuhs.org
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-ID: <2752947.1625806177.1@darkstar.fourwinds.com>
Date: Thu, 08 Jul 2021 21:49:37 -0700
X-JON-SPAM: local delivery
Subject: [TUHS] The Unix shell: a 50-year view -- feedback wanted
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

I not only found this paper offensive, but was more offended that
ACM would publish something like this and give it an award to boot.
I'm planning to send the authors and ACM what's below.  Would
appreciate any feedback that you could provide to make it better.

Thanks,
	Jon




I read your "Unix Shell Programming: The Next 50 Years" expecting
some well thought out wisdom from learned experiences.  I was
sorely disappointed.

 o  The paper never defines what is meant by the term "Unix shell."
    I think that you're using to mean a command interpreter as
    described in the POSIX 1003.2 documents.

 o  There is no 50 year old Unix shell.  I started using Unix in the
    early 1970s, and the command interpreter at the time (Ken Thompson's
    shell) was nothing like later shells such as the Bourne shell (sh
    since research V7 Unix), Korn shell (ksh), C shell (csh), and the
    Bourne again shell (bash).  The paper is missing any discussion of
    prior art.  In practice, shell implementations either predate the
    POSIX standard or were built afterwards and include non-standard
    extensions.

 o  The paper repeats a claim that the shell has been largely ignored by
    academia and industry.  Yet, it does not include any references that
    support that claim.  My own experience and thus opinion is the
    opposite making the veracity of your claim questionable.  As a reader,
    such unsubstantiated claims make me treat the entire content as suspect.

 o  The paper applies universal complaints such as "unmaintainable" to the
    shell; it doesn't call out any shell-specific problems.  It doesn't
    explain whether these complaints are against the scripts, the
    implementation, or both.  One of the reasons for the longevity of the
    sh/bash shells is that experienced practicioners have been able to
    write easily maintainable code.  Scripts written in the 1980s are
    still around and working fine.

 o  The paper seems to complain that the fact that the shell is documented
    is a problem.  This is an astonishing statement.  In my decades as an
    acting professional, teacher, and author, proper documentation is a key
    component of being a professional.

 o  The paper is full of non-sequiturs such as discussions about Docker
    and systemd that have nothing to to with the shell.

 o  The paper has many "nop" statements such as "arguably improved" that
    don't actually say anything.

 o  Examples, such as the one on page 105 don't work.

 o  Proofreading should have caught things like "improve performance
    performance" on page 107 among others.

 o  The references contain many more items than the paper actually
    references.  Did you plagerize the bibliography and forget to
    edit it?

 o  The single result in Figure 1 is insufficient evidence that the
    approach works on a wide variety of problems.

 o  The paper makes it appear that the authors don't actually understand
    the semantics of the original Bourne shell.  Not just my opinion; I
    received an email from Steve Bourne after he read your paper, and I
    consider him to be a subject matter expert.

The paper is lacking the generally accepted form of:

 o  What problem are you trying to solve?
 o  What have others done?
 o  What's our approach?
 o  How does it do?

Filtering out all of the jargon added for buzzword compliance, I think
that the paper is really trying to say:

 o  Programmable command interpreters such as those found in Unix-based
    systems have been around for a long time.  For this paper, we're
    focusing on the GNU bash implementation of the POSIX P1003.2 shell.
    Other command interpreters predate Unix.

 o  This implementation is used more often than many other scripting
    languages because it is available and often installed as the default
    command interpreter on most modern systems (Unix-based or otherwise).
    In particular, it is often the default for Linux systems.

 o  The shell as defined above is being used in ways that are far more
    complex than originally contemplated when Bourne created the original
    syntax and semantics, much less the new features added by the POSIX
    standards committee.  The combination of both the POSIX and bash
    extensions to the Bourne shell exposes a new set of limitations and
    issues such as performance.

 o  While much work has been done by the bash implementors, it's primarily
    been in the area of expanding the functionality, usually in a
    backward-compatible manner.   Other shells such as the original ksh and
    later ash and zsh were implemented with an eye towards the performance
    of the internals and user perspectives.

 o  Performance optimization using modern techniques such as JIT have been
    applied to other languages but not to POSIX shell implementations.  This
    paper looks at doing that.  It is unsurprising that techniques that have
    worked elsewhere work here too.

 o  It's hard to imagine that the application of this technique is all that's
    required for a 50-year life extension.  The title of this paper implies
    that it's going to be comprehensive rather than just being a shameless
    plus for an author's project.

Of course, this doesn't make much of a paper.  Guessing that that's why it
was so "bulked up" with irrelevancies.

It appears that all of you are in academia.  I can't imagine that a paper
like this would pass muster in front of any thesis committee, much less
get that far.  Not only for content, but for lack of proofreading and
editing.  The fact that the ACM would publish such a paper eliminates any
regret that I may have had in dropping my ACM membership.
