X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=HTML_MESSAGE,
	MAILING_LIST_MULTI,T_SCC_BODY_TEXT_LINE autolearn=ham
	autolearn_force=no version=3.4.4
Received: (qmail 24151 invoked from network); 6 Feb 2022 06:40:58 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 6 Feb 2022 06:40:58 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id AC99C9CC48; Sun,  6 Feb 2022 16:40:56 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id D94749B8B1;
	Sun,  6 Feb 2022 16:40:36 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id A58DA9B8B1; Sun,  6 Feb 2022 16:40:35 +1000 (AEST)
Received: from mail-ua1-f54.google.com (mail-ua1-f54.google.com
 [209.85.222.54])
 by minnie.tuhs.org (Postfix) with ESMTPS id DFE8A9B68F
 for <tuhs@minnie.tuhs.org>; Sun,  6 Feb 2022 16:40:34 +1000 (AEST)
Received: by mail-ua1-f54.google.com with SMTP id e17so17871250uad.9
 for <tuhs@minnie.tuhs.org>; Sat, 05 Feb 2022 22:40:34 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=67bPtpgTwZZOFMAZb03MZWCYPsdO9D9p/vdw0lL0PlI=;
 b=lVVrNhk3tjITaEYcsCpwLutmHYCy0S3xhcVhVtJ8JgSvb/uc1Xia/8z6qhtCz24mT/
 0N6DIztfKKeDrRlPnEnOIaAQFujqWuffS9oOoF5UK48XO3cw1Dx1vdK00hzsAYjyv1NN
 v/jd1C/S/G9uJ0otw8Y1rWAYYnIE0lD3L2tve0TVJFz3xTHpd/O1DWt7/Ko3mLwb84cq
 ZQuLEL811f0wedeinRJ2Z/Kk1h2+cqSaDFRkCqQ01cuXeZAimKG/NRAcdWFIfZuxBmQo
 SBVm5Sl/XeprMlLvotRuVtg1ps56KppAn+ycxNn49hX3MKiueiIX4uZ/nddpccKP7CV8
 Kl8g==
X-Gm-Message-State: AOAM531m+KtuDEnQTP1FSP8EYt4v238PKI5tKA86SG03/HrM6oK2bGXe
 U1NbuJ7gHb116grmiK+e3Gu+z5v3/6Tjnvnrt7I=
X-Google-Smtp-Source: ABdhPJxg2zWVumDXxz3KjS2esVY4IZ4AQIXLMDSKlaub9wKtSI8D7heEUdf3bMvDt6TAyO8Cb5y4Xj/++VIUPp3uAIA=
X-Received: by 2002:a67:c10b:: with SMTP id d11mr3118430vsj.39.1644129633873; 
 Sat, 05 Feb 2022 22:40:33 -0800 (PST)
MIME-Version: 1.0
References: <20220201155225.5A9541FB21@orac.inputplus.co.uk>
 <202202020747.2127lTTh005669@freefriends.org>
 <7C19F93B-4F21-4BB1-A064-0307D3568DB7@cfcl.com>
 <1nFWmo-1Gn-00@marmaro.de>
 <CAP2nic37m2aSCffgr8o_J+BkAbnrzFDUaHX9V0brd+L8+PqdPA@mail.gmail.com>
 <CALMnNGjfvtd=6qsmT6kXm3eEBM7OhhGSJ4Wbbjiv+B9P9rLafA@mail.gmail.com>
 <alpine.DEB.2.21.2202040304380.28373@sd-119843.dedibox.fr>
 <CAD2gp_Rn_==vzUw80geH7ryLwmU+uiCidQVfMLn51HhZV1VHfA@mail.gmail.com>
 <e201372274da4ed9cf75bcaaf43a5d95@firemail.de>
 <1644006490.2458.78.camel@mni.thm.de>
 <20220206005609.GG3045@mcvoy.com>
 <21015c2c-2652-bbc3-dbd7-ad3c31f485a2@gmail.com>
 <CAKzdPgzSH94Xg=XYYKy6J+dWAD+ZVDzUTNE=YNRkyVRH69PJfA@mail.gmail.com>
 <CACYmRNDzrSvbwnAEAVz=REsdqSs675_pkBhi5dm5iWRCwRVo=A@mail.gmail.com>
 <CAKzdPgxQmB8ikjQwExOVnOwGDQrc-N==qzf=ZwhH7Ut-fD6pCg@mail.gmail.com>
In-Reply-To: <CAKzdPgxQmB8ikjQwExOVnOwGDQrc-N==qzf=ZwhH7Ut-fD6pCg@mail.gmail.com>
From: Stuart Remphrey <stu@remphrey.net>
Date: Sun, 6 Feb 2022 14:40:20 +0800
Message-ID: <CAD0_1c=UD022YE3q4senSu+CH8gkZg2UNqcJCNRz3z15Yu41jg@mail.gmail.com>
To: Rob Pike <robpike@gmail.com>
Content-Type: multipart/alternative; boundary="000000000000cac61705d753c20d"
Subject: Re: [TUHS] more about Brian...
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000cac61705d753c20d
Content-Type: text/plain; charset="UTF-8"

I like the point that malloc()/free() could be seen as a "failure of
automation".

As to the GC and (Go | Rust) vs (C | Java | C++) earlier in this
increasingly-off-topic thread:
perhaps it's an issue of whether that automation is applied at runtime or
compile-time...


(the latter still requiring guidance from the programmer, trading some
programmer-brain-time against cpu-execution-time & memory space?)

On Sun, 6 Feb 2022, 14:28 Rob Pike, <robpike@gmail.com> wrote:

> I don't understand your disagreement. In what way is automatic memory
> management harder, more unsafe, and less robust than hand-written memory
> management using malloc and free?
>
> You seem to think that garbage collection only exists in languages that
> have a smell you don't like. Perhaps that's true, but it's been around for
> 60 or more years and a lot of important languages use it, while the
> programmers that use those languages are often quite capable.
>
> Using malloc and free might be a badge of honor to some, but it's also a
> failure of automation.
>
> This discussion should probably go to COFF, or perhaps I should just leave
> the list. I am starting to feel uncomfortable here. Too much swagger.
>
> -rob
>
>
> On Sun, Feb 6, 2022 at 5:19 PM Ed Carp <erc@pobox.com> wrote:
>
>> "it's a lot easier, safer, and robust to let the machine do the memory
>> accounting"
>>
>> I disagree. "The machine" is, as you know, is in reality app code
>> built on top of frameworks built on top of libraries built on top of
>> more libraries built on top of malloc/free calls. While the automated
>> testing tools are a lot better than they were when I started coding C
>> back in 1985, we're still talking about a *lot* of complexity and a
>> lot of layers of code, and programmers today know far less about
>> things like boundary conditions, off-by-one bugs, and the like that
>> bit us in the ass - hard - and so we learned to watch for those sorts
>> of things.
>>
>> On 2/5/22, Rob Pike <robpike@gmail.com> wrote:
>> > Be careful with your castigations. Yes, there is lots of old working
>> code,
>> > but keep in mind that that code has often not been as widely tested and
>> > deployed as much of the software that runs today. The fact that it
>> worked
>> > well on old hardware doesn't mean it will be suitable for modern
>> networked
>> > remotely administered multicore machines pounded on by millions of
>> people.
>> >
>> > And speaking of multicore, it's possible to write code using malloc/free
>> > that doesn't leak when run concurrently, but it's a lot easier, safer,
>> and
>> > robust to let the machine do the memory accounting. And the fact that
>> "kids
>> > today" can't do it doesn't mean they are lazy or failures, it means they
>> > grew up in a different time. And a lot of them are as capable as you
>> all,
>> > just in a different environment.
>> >
>> > Lately this list has a lot of attitude and prejudice pretending to be
>> > wisdom and superiority.
>> >
>> > -rob
>> >
>> >
>> > On Sun, Feb 6, 2022 at 12:11 PM Will Senn <will.senn@gmail.com> wrote:
>> >
>> >> On 2/5/22 6:56 PM, Larry McVoy wrote:
>> >>
>> >> On Fri, Feb 04, 2022 at 09:28:10PM +0100, Hellwig Geisse wrote:
>> >>
>> >> Hi Thomas,
>> >>
>> >> On Fr, 2022-02-04 at 20:45 +0100, Thomas Paulsen wrote:
>> >>
>> >> I tell you one thing: I never ever experienced any problems with
>> >> traditional malloc()/free().??
>> >>
>> >> did you ever write a program which does heavy malloc()/free()
>> >> on complicated (i.e., shared) data structures *and* runs for
>> >> days, perhaps weeks? IMO it's very difficult to do this without
>> >> a GC, and you have to exercise quite an amount of discipline
>> >> to do it right.
>> >>
>> >> I've done this and I've employed people who have done this.  We're
>> >> a dieing breed, the focus seems to be on programming languages and
>> >> tools for idiots.  People don't want to learn the discipline it takes
>> >> to work with malloc()/free().  It's sad.
>> >>
>> >>
>> >> I completely agree. This is ridiculous. Do modern programmer's
>> seriously
>> >> think that the old code wasn't complex or robust? Sheesh, there's code
>> >> out
>> >> there that has run through more millions of transactions an hour for
>> more
>> >> years than most of these folks have been alive. There's also code
>> that's
>> >> been running without any updates, for decades. Most code written by the
>> >> newbreed won't run for a month without surfacing dozens of bugs.
>> Margaret
>> >> Hamilton would prolly have some choice words for these folks.
>> >>
>> >>
>> >>
>> >
>>
>

--000000000000cac61705d753c20d
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"auto">I like the point that malloc()/free() could be seen as a =
&quot;failure of automation&quot;.<div dir=3D"auto"><br></div><div dir=3D"a=
uto">As to the GC and (Go | Rust) vs (C | Java | C++) earlier in this incre=
asingly-off-topic thread:</div><div dir=3D"auto">perhaps it&#39;s an issue =
of whether that automation is applied at runtime or compile-time...</div><d=
iv dir=3D"auto"><br></div><div dir=3D"auto"><br></div><div dir=3D"auto">(th=
e latter still requiring guidance from the programmer, trading some program=
mer-brain-time against cpu-execution-time &amp; memory space?)</div></div><=
br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Sun,=
 6 Feb 2022, 14:28 Rob Pike, &lt;<a href=3D"mailto:robpike@gmail.com">robpi=
ke@gmail.com</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div di=
r=3D"ltr">I don&#39;t understand your disagreement. In what way is automati=
c memory management harder, more unsafe, and less robust than hand-written =
memory management using malloc and free?<div><br></div><div>You seem to thi=
nk that garbage collection only exists in languages that have a smell you d=
on&#39;t like. Perhaps that&#39;s true, but it&#39;s been around for 60 or =
more years and a lot of important languages use it, while the programmers t=
hat use those languages are often quite capable.</div><div><br></div><div>U=
sing malloc and free might be a badge of honor to some, but it&#39;s also a=
 failure of automation.</div><div><br></div><div>This discussion should pro=
bably go to COFF, or perhaps I should just leave the list. I am starting to=
 feel uncomfortable here. Too much swagger.</div><div><br></div><div><div>-=
rob</div><div><br></div></div></div><br><div class=3D"gmail_quote"><div dir=
=3D"ltr" class=3D"gmail_attr">On Sun, Feb 6, 2022 at 5:19 PM Ed Carp &lt;<a=
 href=3D"mailto:erc@pobox.com" target=3D"_blank" rel=3D"noreferrer">erc@pob=
ox.com</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"m=
argin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left=
:1ex">&quot;it&#39;s a lot easier, safer, and robust to let the machine do =
the memory<br>
accounting&quot;<br>
<br>
I disagree. &quot;The machine&quot; is, as you know, is in reality app code=
<br>
built on top of frameworks built on top of libraries built on top of<br>
more libraries built on top of malloc/free calls. While the automated<br>
testing tools are a lot better than they were when I started coding C<br>
back in 1985, we&#39;re still talking about a *lot* of complexity and a<br>
lot of layers of code, and programmers today know far less about<br>
things like boundary conditions, off-by-one bugs, and the like that<br>
bit us in the ass - hard - and so we learned to watch for those sorts<br>
of things.<br>
<br>
On 2/5/22, Rob Pike &lt;<a href=3D"mailto:robpike@gmail.com" target=3D"_bla=
nk" rel=3D"noreferrer">robpike@gmail.com</a>&gt; wrote:<br>
&gt; Be careful with your castigations. Yes, there is lots of old working c=
ode,<br>
&gt; but keep in mind that that code has often not been as widely tested an=
d<br>
&gt; deployed as much of the software that runs today. The fact that it wor=
ked<br>
&gt; well on old hardware doesn&#39;t mean it will be suitable for modern n=
etworked<br>
&gt; remotely administered multicore machines pounded on by millions of peo=
ple.<br>
&gt;<br>
&gt; And speaking of multicore, it&#39;s possible to write code using mallo=
c/free<br>
&gt; that doesn&#39;t leak when run concurrently, but it&#39;s a lot easier=
, safer, and<br>
&gt; robust to let the machine do the memory accounting. And the fact that =
&quot;kids<br>
&gt; today&quot; can&#39;t do it doesn&#39;t mean they are lazy or failures=
, it means they<br>
&gt; grew up in a different time. And a lot of them are as capable as you a=
ll,<br>
&gt; just in a different environment.<br>
&gt;<br>
&gt; Lately this list has a lot of attitude and prejudice pretending to be<=
br>
&gt; wisdom and superiority.<br>
&gt;<br>
&gt; -rob<br>
&gt;<br>
&gt;<br>
&gt; On Sun, Feb 6, 2022 at 12:11 PM Will Senn &lt;<a href=3D"mailto:will.s=
enn@gmail.com" target=3D"_blank" rel=3D"noreferrer">will.senn@gmail.com</a>=
&gt; wrote:<br>
&gt;<br>
&gt;&gt; On 2/5/22 6:56 PM, Larry McVoy wrote:<br>
&gt;&gt;<br>
&gt;&gt; On Fri, Feb 04, 2022 at 09:28:10PM +0100, Hellwig Geisse wrote:<br=
>
&gt;&gt;<br>
&gt;&gt; Hi Thomas,<br>
&gt;&gt;<br>
&gt;&gt; On Fr, 2022-02-04 at 20:45 +0100, Thomas Paulsen wrote:<br>
&gt;&gt;<br>
&gt;&gt; I tell you one thing: I never ever experienced any problems with<b=
r>
&gt;&gt; traditional malloc()/free().??<br>
&gt;&gt;<br>
&gt;&gt; did you ever write a program which does heavy malloc()/free()<br>
&gt;&gt; on complicated (i.e., shared) data structures *and* runs for<br>
&gt;&gt; days, perhaps weeks? IMO it&#39;s very difficult to do this withou=
t<br>
&gt;&gt; a GC, and you have to exercise quite an amount of discipline<br>
&gt;&gt; to do it right.<br>
&gt;&gt;<br>
&gt;&gt; I&#39;ve done this and I&#39;ve employed people who have done this=
.=C2=A0 We&#39;re<br>
&gt;&gt; a dieing breed, the focus seems to be on programming languages and=
<br>
&gt;&gt; tools for idiots.=C2=A0 People don&#39;t want to learn the discipl=
ine it takes<br>
&gt;&gt; to work with malloc()/free().=C2=A0 It&#39;s sad.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I completely agree. This is ridiculous. Do modern programmer&#39;s=
 seriously<br>
&gt;&gt; think that the old code wasn&#39;t complex or robust? Sheesh, ther=
e&#39;s code<br>
&gt;&gt; out<br>
&gt;&gt; there that has run through more millions of transactions an hour f=
or more<br>
&gt;&gt; years than most of these folks have been alive. There&#39;s also c=
ode that&#39;s<br>
&gt;&gt; been running without any updates, for decades. Most code written b=
y the<br>
&gt;&gt; newbreed won&#39;t run for a month without surfacing dozens of bug=
s. Margaret<br>
&gt;&gt; Hamilton would prolly have some choice words for these folks.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
</blockquote></div>
</blockquote></div>

--000000000000cac61705d753c20d--
