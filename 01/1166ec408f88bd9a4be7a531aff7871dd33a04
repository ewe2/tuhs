X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=HTML_MESSAGE,
	MAILING_LIST_MULTI autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 27691 invoked from network); 11 Jan 2021 14:02:43 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 11 Jan 2021 14:02:43 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 357949CB49; Tue, 12 Jan 2021 00:02:38 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 984D89C88A;
	Tue, 12 Jan 2021 00:01:56 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 788379C7B8; Tue, 12 Jan 2021 00:01:52 +1000 (AEST)
Received: from mail-pl1-f172.google.com (mail-pl1-f172.google.com
 [209.85.214.172])
 by minnie.tuhs.org (Postfix) with ESMTPS id B89CC9C794
 for <tuhs@tuhs.org>; Tue, 12 Jan 2021 00:01:51 +1000 (AEST)
Received: by mail-pl1-f172.google.com with SMTP id y8so9559079plp.8
 for <tuhs@tuhs.org>; Mon, 11 Jan 2021 06:01:51 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=XQMP53/g0xl0amPw8lm+FvBpqQfDHrT+JLeIAlAiAuI=;
 b=OnuZlfCtGcCWUZdqIatuv9fgvSG8qtqjQ8Cv2thTT6+xkFQser8vJvZCM5kR0eeVoj
 z0Z7WkT+sZbaL8X+9aFl4OHpa87qdH2O5IPdKNQAcTaQcAK7Z7FIq6vcbdxxG+COSzRg
 TF0ChHC2ryM4vtzkDVP7KA+abRxoClPj8Kcnh+q6Su8fXCxMe2UWKEfY+da4ZwHzMt5J
 6LgN60ORQyZSun0/3PwFmmvx60WsRamYJapx2e9Nty1tcM+NoxQ+mscqJvTEqyZuYWy4
 SNITB7/cui3KeqoJESSaA2w6rw1tAdTsdMwWJQDfX7UEKAmut2300FY7ulC4pdwNhwHk
 6jyQ==
X-Gm-Message-State: AOAM530t1sFF1HtWJoSL8mDakTzEwLPDBTfq6wKCw6OlJ+Q0FUxH8vnf
 2KIAYU40CtWKs+WSq3QU6Sfhm0Gvn4WVEJH445Y=
X-Google-Smtp-Source: ABdhPJy7dUXEopYwfxr9k+vYnhM6/OuA67/fY01vDBGqSv59PKxSy0POY91+GHtcdQIJiwOqpQ7YRag61dm3Doj+nOk=
X-Received: by 2002:a17:902:b588:b029:db:e1d8:1492 with SMTP id
 a8-20020a170902b588b02900dbe1d81492mr16477418pls.80.1610373711106; Mon, 11
 Jan 2021 06:01:51 -0800 (PST)
MIME-Version: 1.0
References: <alpine.BSF.2.21.9999.2012311806460.82237@aneurin.horsfall.org>
 <CAK6BEgdH7OOsw3p3d_bLsjhR+bv_ZrG9mvVSLa3hgJKhjLVK6w@mail.gmail.com>
 <202012310810.0BV8ADZ3027195@freefriends.org>
 <CANCZdfoKV7A46ho3ORghFZEddROty3A-y2bn1VY0m=ipBxFF6w@mail.gmail.com>
 <950DAE25-BCAD-47EF-8FCE-A716271A3C25@gmail.com>
 <20201231161228.GG28420@mcvoy.com>
 <32aeb853e5c56bc04dd2e9e2310f96a7@alanlee.org>
In-Reply-To: <32aeb853e5c56bc04dd2e9e2310f96a7@alanlee.org>
From: Stuart Remphrey <stu@remphrey.net>
Date: Mon, 11 Jan 2021 22:01:37 +0800
Message-ID: <CAD0_1cmAxhxrwCMc6xs5eVj948x6OazLtkdEw_U2Wx-zZhi4gw@mail.gmail.com>
To: alan@alanlee.org
Content-Type: multipart/alternative; boundary="000000000000019a5405b8a0596c"
Subject: Re: [TUHS] The 2038 bug...
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Eunuchs Hysterical Society <tuhs@tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000019a5405b8a0596c
Content-Type: text/plain; charset="UTF-8"

> once 32-bit time_t rolls over,
> assume any value from -2 billion
> to some additional arbitrary positive
> time offset had indeed just rolled over.

That seems a reasonable 2038 bandaid: analogous to Y2K reinterpreting
2-digit decimal dates as a different/higher year range than 1900-1990;
similar in effect to making 32-bit time_t unsigned.


On Mon, 11 Jan 2021, 15:28 , <alan@alanlee.org> wrote:

>
> 64-bit migration is the ideal solution.  However there is a band-aid
> that can be applied to extend the life of 32-bit only systems.  One
> could reclaim part of the previous epoch window going forward.  That is,
> once 32-bit time_t rolls over, assume any value from -2 billion to some
> additional arbitrary positive time offset had indeed just rolled over.
> Add a whole 0x100000000 to it in a 64-bit context and evaluate (or
> evaluate against the old epoch ~+136 years).  It means a 32-bit time_t
> in this context would instead mis-represent dates from 1902 forward to
> some arbitrary threshold as modern >2038 dates.  But time_t was never
> meant to track dates outside of 'near term' relative to 'modern day' -
> eg +/- 68 years from 1970 when it was conceived.  It's reasonable to
> assume as the use of such software has moved forward in time, its time
> reference should as well.
>
> -Alan H.
>
> On 2020-12-31 11:12, Larry McVoy wrote:
> > On Thu, Dec 31, 2020 at 09:09:33AM -0700, Adam Thornton wrote:
> >> Whereas, time_t is basically internal, right?
> >
> > time_t is used in syscalls, see Warner's email about i386.  It's a
> > mess for 32 bit kernels.
>

--000000000000019a5405b8a0596c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"auto"><div dir=3D"auto">&gt; once 32-bit time_t rolls over,</di=
v><div dir=3D"auto">&gt; assume any value from -2 billion</div><div dir=3D"=
auto">&gt; to some additional arbitrary positive</div><div dir=3D"auto">&gt=
; time offset had indeed just rolled over.</div><div dir=3D"auto"><br></div=
><div dir=3D"auto">That seems a reasonable 2038 bandaid: analogous to Y2K r=
einterpreting 2-digit decimal dates as a different/higher year range than 1=
900-1990; similar in effect to making 32-bit time_t unsigned.</div><div dir=
=3D"auto"><br></div><div><br><div class=3D"gmail_quote"><div dir=3D"ltr" cl=
ass=3D"gmail_attr">On Mon, 11 Jan 2021, 15:28 , &lt;<a href=3D"mailto:alan@=
alanlee.org" target=3D"_blank" rel=3D"noreferrer">alan@alanlee.org</a>&gt; =
wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
x;border-left:1px #ccc solid;padding-left:1ex"><br>
64-bit migration is the ideal solution.=C2=A0 However there is a band-aid <=
br>
that can be applied to extend the life of 32-bit only systems.=C2=A0 One <b=
r>
could reclaim part of the previous epoch window going forward.=C2=A0 That i=
s, <br>
once 32-bit time_t rolls over, assume any value from -2 billion to some <br=
>
additional arbitrary positive time offset had indeed just rolled over.=C2=
=A0 <br>
Add a whole 0x100000000 to it in a 64-bit context and evaluate (or <br>
evaluate against the old epoch ~+136 years).=C2=A0 It means a 32-bit time_t=
 <br>
in this context would instead mis-represent dates from 1902 forward to <br>
some arbitrary threshold as modern &gt;2038 dates.=C2=A0 But time_t was nev=
er <br>
meant to track dates outside of &#39;near term&#39; relative to &#39;modern=
 day&#39; - <br>
eg +/- 68 years from 1970 when it was conceived.=C2=A0 It&#39;s reasonable =
to <br>
assume as the use of such software has moved forward in time, its time <br>
reference should as well.<br>
<br>
-Alan H.<br>
<br>
On 2020-12-31 11:12, Larry McVoy wrote:<br>
&gt; On Thu, Dec 31, 2020 at 09:09:33AM -0700, Adam Thornton wrote:<br>
&gt;&gt; Whereas, time_t is basically internal, right?<br>
&gt; <br>
&gt; time_t is used in syscalls, see Warner&#39;s email about i386.=C2=A0 I=
t&#39;s a<br>
&gt; mess for 32 bit kernels.<br>
</blockquote></div>
</div></div>

--000000000000019a5405b8a0596c--
