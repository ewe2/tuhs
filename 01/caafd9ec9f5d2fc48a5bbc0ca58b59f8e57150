X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	T_SCC_BODY_TEXT_LINE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 22590 invoked from network); 6 Feb 2022 06:28:21 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 6 Feb 2022 06:28:21 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 13C2B9BD5A; Sun,  6 Feb 2022 16:28:20 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 5BC749B7AF;
	Sun,  6 Feb 2022 16:28:04 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="TgGoYRsb";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 1E5909B7AF; Sun,  6 Feb 2022 16:28:03 +1000 (AEST)
Received: from mail-pf1-f180.google.com (mail-pf1-f180.google.com
 [209.85.210.180])
 by minnie.tuhs.org (Postfix) with ESMTPS id 9EA439B68F
 for <tuhs@minnie.tuhs.org>; Sun,  6 Feb 2022 16:28:02 +1000 (AEST)
Received: by mail-pf1-f180.google.com with SMTP id e6so8859131pfc.7
 for <tuhs@minnie.tuhs.org>; Sat, 05 Feb 2022 22:28:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=wa9m5jrCumttACh3L3gTODr+EWM3dLnfY/Sn+lklwaM=;
 b=TgGoYRsb5ZhPGKOd6tjMUa3uGDIuG2Pgdqex3KkxwmE5zMZunywxWOWyr/jVbvAm8l
 DuF4J38f7dZiyxws01z6ZE5VU2QBcWnCIW18x8uDKr+zXT4lKYpCje8Zg8g9uPMUA/O/
 DEJI6rVa7w3wSf9ltyEJ6/PKje7Hok1TIWHYJ3kra8xoDAGQGEYTHLoPIfcAIgZgHMUr
 fjQzG5cBW4w1V26xD/ZRBsz8Xvj6AWCGNzj41R6FgyidKEau1S2pMdYcrl+bvayU8QNB
 9qIo11IVjlzJkd8X/Te0oEckQ23MFoy2+GVHo12OgewQ6Qe9XQibASrJf7GbSPEsuiTK
 n6Dg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=wa9m5jrCumttACh3L3gTODr+EWM3dLnfY/Sn+lklwaM=;
 b=mdEZ1rd62HQCoNXzg+thIcHc9eHDmHlHoHayBnTfll343KOp7jd6jKkrUlc403P3Qy
 RxbmSq/K2nahFvueEwJKFvC5UKoid4aF5LI/O/o6cSagx9ZbCThyT4xDAdNxfXWxGiqV
 Iyy9+3IkzluyGIayaaSYy2jEfGnbjG4xUHac4CjpHi6zVPnY1NrYlFZIjDy1demUwQG9
 Cax0EQrlLlXBi2hLo7gIUkTloBL1sbTyHMEf0WdxfA2G/2J6/LBMxBGZ117h/5IeHuz3
 D1juuibJRn0a7RtU2AoqnBMK5XX2jBEBuKb21iTLYgWi5dIJ4JbF2qebKQ5xQHtaRVrj
 CG0g==
X-Gm-Message-State: AOAM532vu9zUaKGSXD7BEXyfd4pvwrRAcvaSD2SUWf6bl+lXmGAhA8Di
 +apo3bKyvRUpMkioZg8oqW6VCHMpBfHXdhz2EYw=
X-Google-Smtp-Source: ABdhPJz9UO4K7TR5fG32RPNZeQTSEpgKnqKHJirNo3HHixOu9tl38VFP4CAbKJMlwXP7LOd8vBwQch6W9Ch5CHNwh04=
X-Received: by 2002:a05:6a00:10d5:: with SMTP id
 d21mr10398888pfu.2.1644128881862; 
 Sat, 05 Feb 2022 22:28:01 -0800 (PST)
MIME-Version: 1.0
References: <20220201155225.5A9541FB21@orac.inputplus.co.uk>
 <202202020747.2127lTTh005669@freefriends.org>
 <7C19F93B-4F21-4BB1-A064-0307D3568DB7@cfcl.com>
 <1nFWmo-1Gn-00@marmaro.de>
 <CAP2nic37m2aSCffgr8o_J+BkAbnrzFDUaHX9V0brd+L8+PqdPA@mail.gmail.com>
 <CALMnNGjfvtd=6qsmT6kXm3eEBM7OhhGSJ4Wbbjiv+B9P9rLafA@mail.gmail.com>
 <alpine.DEB.2.21.2202040304380.28373@sd-119843.dedibox.fr>
 <CAD2gp_Rn_==vzUw80geH7ryLwmU+uiCidQVfMLn51HhZV1VHfA@mail.gmail.com>
 <e201372274da4ed9cf75bcaaf43a5d95@firemail.de>
 <1644006490.2458.78.camel@mni.thm.de>
 <20220206005609.GG3045@mcvoy.com>
 <21015c2c-2652-bbc3-dbd7-ad3c31f485a2@gmail.com>
 <CAKzdPgzSH94Xg=XYYKy6J+dWAD+ZVDzUTNE=YNRkyVRH69PJfA@mail.gmail.com>
 <CACYmRNDzrSvbwnAEAVz=REsdqSs675_pkBhi5dm5iWRCwRVo=A@mail.gmail.com>
In-Reply-To: <CACYmRNDzrSvbwnAEAVz=REsdqSs675_pkBhi5dm5iWRCwRVo=A@mail.gmail.com>
From: Rob Pike <robpike@gmail.com>
Date: Sun, 6 Feb 2022 17:27:50 +1100
Message-ID: <CAKzdPgxQmB8ikjQwExOVnOwGDQrc-N==qzf=ZwhH7Ut-fD6pCg@mail.gmail.com>
To: Ed Carp <erc@pobox.com>
Content-Type: multipart/alternative; boundary="000000000000f7f0a605d7539546"
Subject: Re: [TUHS] more about Brian...
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000f7f0a605d7539546
Content-Type: text/plain; charset="UTF-8"

I don't understand your disagreement. In what way is automatic memory
management harder, more unsafe, and less robust than hand-written memory
management using malloc and free?

You seem to think that garbage collection only exists in languages that
have a smell you don't like. Perhaps that's true, but it's been around for
60 or more years and a lot of important languages use it, while the
programmers that use those languages are often quite capable.

Using malloc and free might be a badge of honor to some, but it's also a
failure of automation.

This discussion should probably go to COFF, or perhaps I should just leave
the list. I am starting to feel uncomfortable here. Too much swagger.

-rob


On Sun, Feb 6, 2022 at 5:19 PM Ed Carp <erc@pobox.com> wrote:

> "it's a lot easier, safer, and robust to let the machine do the memory
> accounting"
>
> I disagree. "The machine" is, as you know, is in reality app code
> built on top of frameworks built on top of libraries built on top of
> more libraries built on top of malloc/free calls. While the automated
> testing tools are a lot better than they were when I started coding C
> back in 1985, we're still talking about a *lot* of complexity and a
> lot of layers of code, and programmers today know far less about
> things like boundary conditions, off-by-one bugs, and the like that
> bit us in the ass - hard - and so we learned to watch for those sorts
> of things.
>
> On 2/5/22, Rob Pike <robpike@gmail.com> wrote:
> > Be careful with your castigations. Yes, there is lots of old working
> code,
> > but keep in mind that that code has often not been as widely tested and
> > deployed as much of the software that runs today. The fact that it worked
> > well on old hardware doesn't mean it will be suitable for modern
> networked
> > remotely administered multicore machines pounded on by millions of
> people.
> >
> > And speaking of multicore, it's possible to write code using malloc/free
> > that doesn't leak when run concurrently, but it's a lot easier, safer,
> and
> > robust to let the machine do the memory accounting. And the fact that
> "kids
> > today" can't do it doesn't mean they are lazy or failures, it means they
> > grew up in a different time. And a lot of them are as capable as you all,
> > just in a different environment.
> >
> > Lately this list has a lot of attitude and prejudice pretending to be
> > wisdom and superiority.
> >
> > -rob
> >
> >
> > On Sun, Feb 6, 2022 at 12:11 PM Will Senn <will.senn@gmail.com> wrote:
> >
> >> On 2/5/22 6:56 PM, Larry McVoy wrote:
> >>
> >> On Fri, Feb 04, 2022 at 09:28:10PM +0100, Hellwig Geisse wrote:
> >>
> >> Hi Thomas,
> >>
> >> On Fr, 2022-02-04 at 20:45 +0100, Thomas Paulsen wrote:
> >>
> >> I tell you one thing: I never ever experienced any problems with
> >> traditional malloc()/free().??
> >>
> >> did you ever write a program which does heavy malloc()/free()
> >> on complicated (i.e., shared) data structures *and* runs for
> >> days, perhaps weeks? IMO it's very difficult to do this without
> >> a GC, and you have to exercise quite an amount of discipline
> >> to do it right.
> >>
> >> I've done this and I've employed people who have done this.  We're
> >> a dieing breed, the focus seems to be on programming languages and
> >> tools for idiots.  People don't want to learn the discipline it takes
> >> to work with malloc()/free().  It's sad.
> >>
> >>
> >> I completely agree. This is ridiculous. Do modern programmer's seriously
> >> think that the old code wasn't complex or robust? Sheesh, there's code
> >> out
> >> there that has run through more millions of transactions an hour for
> more
> >> years than most of these folks have been alive. There's also code that's
> >> been running without any updates, for decades. Most code written by the
> >> newbreed won't run for a month without surfacing dozens of bugs.
> Margaret
> >> Hamilton would prolly have some choice words for these folks.
> >>
> >>
> >>
> >
>

--000000000000f7f0a605d7539546
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I don&#39;t understand your disagreement. In what way is a=
utomatic memory management harder, more unsafe, and less robust than hand-w=
ritten memory management using malloc and free?<div><br></div><div>You seem=
 to think that garbage collection only exists in languages that have a smel=
l you don&#39;t like. Perhaps that&#39;s true, but it&#39;s been around for=
 60 or more years and a lot of important languages use it, while the progra=
mmers that use those languages are often quite capable.</div><div><br></div=
><div>Using malloc and free might be a badge of honor to some, but it&#39;s=
 also a failure of automation.</div><div><br></div><div>This discussion sho=
uld probably go to COFF, or perhaps I should just leave the list. I am star=
ting to feel uncomfortable here. Too much swagger.</div><div><br></div><div=
><div>-rob</div><div><br></div></div></div><br><div class=3D"gmail_quote"><=
div dir=3D"ltr" class=3D"gmail_attr">On Sun, Feb 6, 2022 at 5:19 PM Ed Carp=
 &lt;<a href=3D"mailto:erc@pobox.com">erc@pobox.com</a>&gt; wrote:<br></div=
><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border=
-left:1px solid rgb(204,204,204);padding-left:1ex">&quot;it&#39;s a lot eas=
ier, safer, and robust to let the machine do the memory<br>
accounting&quot;<br>
<br>
I disagree. &quot;The machine&quot; is, as you know, is in reality app code=
<br>
built on top of frameworks built on top of libraries built on top of<br>
more libraries built on top of malloc/free calls. While the automated<br>
testing tools are a lot better than they were when I started coding C<br>
back in 1985, we&#39;re still talking about a *lot* of complexity and a<br>
lot of layers of code, and programmers today know far less about<br>
things like boundary conditions, off-by-one bugs, and the like that<br>
bit us in the ass - hard - and so we learned to watch for those sorts<br>
of things.<br>
<br>
On 2/5/22, Rob Pike &lt;<a href=3D"mailto:robpike@gmail.com" target=3D"_bla=
nk">robpike@gmail.com</a>&gt; wrote:<br>
&gt; Be careful with your castigations. Yes, there is lots of old working c=
ode,<br>
&gt; but keep in mind that that code has often not been as widely tested an=
d<br>
&gt; deployed as much of the software that runs today. The fact that it wor=
ked<br>
&gt; well on old hardware doesn&#39;t mean it will be suitable for modern n=
etworked<br>
&gt; remotely administered multicore machines pounded on by millions of peo=
ple.<br>
&gt;<br>
&gt; And speaking of multicore, it&#39;s possible to write code using mallo=
c/free<br>
&gt; that doesn&#39;t leak when run concurrently, but it&#39;s a lot easier=
, safer, and<br>
&gt; robust to let the machine do the memory accounting. And the fact that =
&quot;kids<br>
&gt; today&quot; can&#39;t do it doesn&#39;t mean they are lazy or failures=
, it means they<br>
&gt; grew up in a different time. And a lot of them are as capable as you a=
ll,<br>
&gt; just in a different environment.<br>
&gt;<br>
&gt; Lately this list has a lot of attitude and prejudice pretending to be<=
br>
&gt; wisdom and superiority.<br>
&gt;<br>
&gt; -rob<br>
&gt;<br>
&gt;<br>
&gt; On Sun, Feb 6, 2022 at 12:11 PM Will Senn &lt;<a href=3D"mailto:will.s=
enn@gmail.com" target=3D"_blank">will.senn@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; On 2/5/22 6:56 PM, Larry McVoy wrote:<br>
&gt;&gt;<br>
&gt;&gt; On Fri, Feb 04, 2022 at 09:28:10PM +0100, Hellwig Geisse wrote:<br=
>
&gt;&gt;<br>
&gt;&gt; Hi Thomas,<br>
&gt;&gt;<br>
&gt;&gt; On Fr, 2022-02-04 at 20:45 +0100, Thomas Paulsen wrote:<br>
&gt;&gt;<br>
&gt;&gt; I tell you one thing: I never ever experienced any problems with<b=
r>
&gt;&gt; traditional malloc()/free().??<br>
&gt;&gt;<br>
&gt;&gt; did you ever write a program which does heavy malloc()/free()<br>
&gt;&gt; on complicated (i.e., shared) data structures *and* runs for<br>
&gt;&gt; days, perhaps weeks? IMO it&#39;s very difficult to do this withou=
t<br>
&gt;&gt; a GC, and you have to exercise quite an amount of discipline<br>
&gt;&gt; to do it right.<br>
&gt;&gt;<br>
&gt;&gt; I&#39;ve done this and I&#39;ve employed people who have done this=
.=C2=A0 We&#39;re<br>
&gt;&gt; a dieing breed, the focus seems to be on programming languages and=
<br>
&gt;&gt; tools for idiots.=C2=A0 People don&#39;t want to learn the discipl=
ine it takes<br>
&gt;&gt; to work with malloc()/free().=C2=A0 It&#39;s sad.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; I completely agree. This is ridiculous. Do modern programmer&#39;s=
 seriously<br>
&gt;&gt; think that the old code wasn&#39;t complex or robust? Sheesh, ther=
e&#39;s code<br>
&gt;&gt; out<br>
&gt;&gt; there that has run through more millions of transactions an hour f=
or more<br>
&gt;&gt; years than most of these folks have been alive. There&#39;s also c=
ode that&#39;s<br>
&gt;&gt; been running without any updates, for decades. Most code written b=
y the<br>
&gt;&gt; newbreed won&#39;t run for a month without surfacing dozens of bug=
s. Margaret<br>
&gt;&gt; Hamilton would prolly have some choice words for these folks.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;<br>
</blockquote></div>

--000000000000f7f0a605d7539546--
