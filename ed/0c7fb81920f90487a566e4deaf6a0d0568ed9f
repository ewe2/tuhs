From tuhs-bounces@minnie.tuhs.org Tue Nov  6 15:30:37 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HTML_MESSAGE,
	MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE,SUBJ_ALL_CAPS autolearn=no
	autolearn_force=no version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id 721b478f
	for <ml@inbox.vuxu.org>;
	Tue, 6 Nov 2018 15:30:37 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 4B6D7A242E; Wed,  7 Nov 2018 01:30:36 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 50010A215C;
	Wed,  7 Nov 2018 01:30:08 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 90CDDA215E; Tue,  6 Nov 2018 23:21:19 +1000 (AEST)
Received: from post.cogs.com (post.cogs.com [72.43.6.86])
 by minnie.tuhs.org (Postfix) with ESMTPS id 0433EA215A
 for <tuhs@minnie.tuhs.org>; Tue,  6 Nov 2018 23:21:18 +1000 (AEST)
Received: from localhost (localhost [127.0.0.1])
 by post.cogs.com (Postfix) with ESMTP id 91A691018042A4;
 Tue,  6 Nov 2018 08:21:16 -0500 (EST)
X-Virus-Scanned: amavisd-new at cogs.com
Received: from post.cogs.com ([127.0.0.1])
 by localhost (post.cogs.com [127.0.0.1]) (amavisd-new, port 10026)
 with ESMTP id wHL_S-GytObl; Tue,  6 Nov 2018 08:21:15 -0500 (EST)
Received: from rrcs-108-176-86-106.nys.biz.rr.com
 (rrcs-108-176-86-106.nys.biz.rr.com [108.176.86.106])
 by post.cogs.com (Postfix) with ESMTPSA id 9F160101804293;
 Tue,  6 Nov 2018 08:21:15 -0500 (EST)
Message-Id: <A75BA761-85C8-4062-9F49-26870AF51884@cogs.com>
Content-Type: multipart/alternative;
 boundary="Apple-Mail=_812AE028-AE0F-45C3-8DA1-004FECA5FA4E"
Mime-Version: 1.0 (Mac OS X Mail 12.1 \(3445.100.43\))
Date: Tue, 6 Nov 2018 08:21:14 -0500
In-Reply-To: <CAPWNY8WH09se3ZiJOsYYNBJGzgR7wgdA0tScKq3DFxRnEjCWBg@mail.gmail.com>
To: =?utf-8?Q?Mantas_Mikul=C4=97nas?= <grawity@gmail.com>
References: <f99e4c98-d584-d823-a581-0d6c3b9c3420@spamtrap.tnetconsulting.net>
 <alpine.DEB.2.20.1811051132410.13752@mira.opentrend.net>
 <c710dafc-9edc-cd29-3aeb-dc0fa6badeff@spamtrap.tnetconsulting.net>
 <CAPWNY8WqB0fO=a_sNq5NezO7xh3-c4iO3gyoFUZXk5e7=v179w@mail.gmail.com>
 <0289fa26-d157-8a65-389e-61dd7a01fcc4@spamtrap.tnetconsulting.net>
 <D1834A80-1F31-4F16-9AC2-E6004E3AE4E6@cogs.com>
 <CAPWNY8WH09se3ZiJOsYYNBJGzgR7wgdA0tScKq3DFxRnEjCWBg@mail.gmail.com>
X-Mailer: Apple Mail (2.3445.100.43)
Subject: Re: [TUHS] YP / NIS / NIS+ / LDAP
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
From: Ben Greenfield via TUHS <tuhs@minnie.tuhs.org>
Reply-To: Ben Greenfield <ben@cogs.com>
Cc: tuhs@minnie.tuhs.org, gtaylor@tnetconsulting.net
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>


--Apple-Mail=_812AE028-AE0F-45C3-8DA1-004FECA5FA4E
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8



> On Nov 6, 2018, at 1:53 AM, Mantas Mikul=C4=97nas <grawity@gmail.com> =
wrote:
>=20
> On Tue, Nov 6, 2018, 01:32 Ben Greenfield via TUHS =
<tuhs@minnie.tuhs.org <mailto:tuhs@minnie.tuhs.org>> wrote:
>=20
>=20
> > On Nov 5, 2018, at 2:36 PM, Grant Taylor via TUHS =
<tuhs@minnie.tuhs.org <mailto:tuhs@minnie.tuhs.org>> wrote:
> >=20
> > On 11/05/2018 12:24 AM, Mantas Mikul=C4=97nas wrote:
> >> Let the client handle authentication via Kerberos
> >=20
> > I don't know enough about Kerberos (yet) to know if it would be =
possible for a login process to communicate with the KDC and get a TGT =
as part of logging in, without already being logged in.
> >=20
> > My ignorance is leaving me with a priming problem that seems like a =
catch 22.  You can't login without shadow information or TGT.  But =
traditional (simpler) kinit is run after being logged in.  So ... how do =
you detangle that?  The only thing that I can come up with is that the =
login process does the kinit functionality on the users behalf.
>=20
> I found that I had to do all of this using SASL.=20
>=20
>=20
> I remember it as SASL would handle the kerberization during boot up =
getting tickets for each LDAP entry that you wanted mapped to a service =
on that client.
>=20
> Sorry but I cannot parse that sentence at all=E2=80=A6


I=E2=80=99m sorry it was about 8 years ago and is from memory but. I =
believe during the startup of the system the SASL config files contained =
tickets that established a trust relationship between that system and =
our Open Directory server. My memory is that each ticket was associated =
a service and the config file for the service  would point to the =
ticket.

>=20
> I could be wrong but I think SASL seems to be way connect services on =
Linux with LDAP that are served kerberized.
> =20
> SASL is involved somewhat, in that it does help with implementing =
Kerberos =E2=80=93 services and clients can call libsasl instead of =
talking Kerberos directly, abstract away the complexity =E2=80=93 but =
that's all it is, an abstraction layer. (A quite useful one, though.)
>=20
> But it's not the only method, strictly speaking (e.g. SSH and HTTP use =
GSSAPI, and various older software use Kerberos directly). And as far as =
I could understand the previous paragraph =E2=80=93 it doesn't have =
anything specific about "kerberization during boot up=E2=80=9D.


My memory could be wrong but I thought to establish the trust =
relationship between the kerberized server and the client happened =
during boot/when the config files were read ticket granting tickets were =
given and received.=20




--Apple-Mail=_812AE028-AE0F-45C3-8DA1-004FECA5FA4E
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dutf-8"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; line-break: after-white-space;" class=3D""><br =
class=3D""><div><br class=3D""><blockquote type=3D"cite" class=3D""><div =
class=3D"">On Nov 6, 2018, at 1:53 AM, Mantas Mikul=C4=97nas &lt;<a =
href=3D"mailto:grawity@gmail.com" class=3D"">grawity@gmail.com</a>&gt; =
wrote:</div><br class=3D"Apple-interchange-newline"><div class=3D""><div =
dir=3D"ltr" style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; =
font-size: 12px; font-style: normal; font-variant-caps: normal; =
font-weight: normal; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><div class=3D"gmail_quote"><div dir=3D"ltr" =
class=3D"">On Tue, Nov 6, 2018, 01:32 Ben Greenfield via TUHS &lt;<a =
href=3D"mailto:tuhs@minnie.tuhs.org" target=3D"_blank" =
class=3D"">tuhs@minnie.tuhs.org</a>&gt; wrote:<br =
class=3D""></div><blockquote class=3D"gmail_quote" style=3D"margin: 0px =
0px 0px 0.8ex; border-left-width: 1px; border-left-style: solid; =
border-left-color: rgb(204, 204, 204); padding-left: 1ex;"><br =
class=3D""><br class=3D"">&gt; On Nov 5, 2018, at 2:36 PM, Grant Taylor =
via TUHS &lt;<a href=3D"mailto:tuhs@minnie.tuhs.org" target=3D"_blank" =
class=3D"">tuhs@minnie.tuhs.org</a>&gt; wrote:<br class=3D"">&gt;<span =
class=3D"Apple-converted-space">&nbsp;</span><br class=3D"">&gt; On =
11/05/2018 12:24 AM, Mantas Mikul=C4=97nas wrote:<br class=3D"">&gt;&gt; =
Let the client handle authentication via Kerberos<br class=3D"">&gt;<span =
class=3D"Apple-converted-space">&nbsp;</span><br class=3D"">&gt; I don't =
know enough about Kerberos (yet) to know if it would be possible for a =
login process to communicate with the KDC and get a TGT as part of =
logging in, without already being logged in.<br class=3D"">&gt;<span =
class=3D"Apple-converted-space">&nbsp;</span><br class=3D"">&gt; My =
ignorance is leaving me with a priming problem that seems like a catch =
22.&nbsp; You can't login without shadow information or TGT.&nbsp; But =
traditional (simpler) kinit is run after being logged in.&nbsp; So ... =
how do you detangle that?&nbsp; The only thing that I can come up with =
is that the login process does the kinit functionality on the users =
behalf.<br class=3D""><br class=3D"">I found that I had to do all of =
this using SASL.<span class=3D"Apple-converted-space">&nbsp;</span><br =
class=3D""><br class=3D""><br class=3D"">I remember it as SASL would =
handle the kerberization during boot up getting tickets for each LDAP =
entry that you wanted mapped to a service on that client.<br =
class=3D""></blockquote></div><div class=3D""><br class=3D""></div><div =
class=3D"">Sorry but I cannot parse that sentence at =
all=E2=80=A6</div></div></div></blockquote><div><br =
class=3D""></div><div><br class=3D""></div><div>I=E2=80=99m sorry it was =
about 8 years ago and is from memory but. I believe during the startup =
of the system the SASL config files contained tickets that established a =
trust relationship between that system and our Open Directory server. My =
memory is that each ticket was associated a service and the config file =
for the service &nbsp;would point to the ticket.</div><div><br =
class=3D""></div><blockquote type=3D"cite" class=3D""><div class=3D""><div=
 dir=3D"ltr" style=3D"caret-color: rgb(0, 0, 0); font-family: Helvetica; =
font-size: 12px; font-style: normal; font-variant-caps: normal; =
font-weight: normal; letter-spacing: normal; text-align: start; =
text-indent: 0px; text-transform: none; white-space: normal; =
word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: =
none;" class=3D""><div class=3D"gmail_quote"><blockquote =
class=3D"gmail_quote" style=3D"margin: 0px 0px 0px 0.8ex; =
border-left-width: 1px; border-left-style: solid; border-left-color: =
rgb(204, 204, 204); padding-left: 1ex;"><br class=3D"">I could be wrong =
but I think SASL seems to be way connect services on Linux with LDAP =
that are served kerberized.<br class=3D""></blockquote><div =
class=3D"">&nbsp;</div></div><div class=3D"">SASL is involved somewhat, =
in that it does help with implementing Kerberos =E2=80=93 services and =
clients can call libsasl instead of talking Kerberos directly, abstract =
away the complexity =E2=80=93 but that's all it is, an abstraction =
layer. (A quite useful one, though.)</div><div class=3D""><br =
class=3D""></div><div class=3D"">But it's not the only method, strictly =
speaking (e.g. SSH and HTTP use GSSAPI, and various older software use =
Kerberos directly). And as far as I could understand the previous =
paragraph =E2=80=93 it doesn't have anything specific about =
"kerberization during boot =
up=E2=80=9D.</div></div></div></blockquote></div><div><br =
class=3D""></div><div>My memory could be wrong but I thought to =
establish the trust relationship between the kerberized server and the =
client happened during boot/when the config files were read ticket =
granting tickets were given and received.&nbsp;</div><div><br =
class=3D""></div><div><br class=3D""></div><br class=3D""></body></html>=

--Apple-Mail=_812AE028-AE0F-45C3-8DA1-004FECA5FA4E--
