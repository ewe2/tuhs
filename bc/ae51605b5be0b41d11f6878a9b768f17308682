X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI
	autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 4947 invoked from network); 31 Dec 2021 05:56:12 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 31 Dec 2021 05:56:12 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id D16E59D010; Fri, 31 Dec 2021 15:56:10 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 1BF439D006;
	Fri, 31 Dec 2021 15:55:51 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="OiX5FiuR";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id B252C9D006; Fri, 31 Dec 2021 15:55:48 +1000 (AEST)
Received: from mail-pj1-f42.google.com (mail-pj1-f42.google.com
 [209.85.216.42])
 by minnie.tuhs.org (Postfix) with ESMTPS id AFF3D9D002
 for <tuhs@minnie.tuhs.org>; Fri, 31 Dec 2021 15:55:45 +1000 (AEST)
Received: by mail-pj1-f42.google.com with SMTP id
 a11-20020a17090a854b00b001b11aae38d6so24924109pjw.2
 for <tuhs@minnie.tuhs.org>; Thu, 30 Dec 2021 21:55:45 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=YEa01RGKF8JVYHVNGLJyhEpOLJ7yU31RL2rzpeHtNkg=;
 b=OiX5FiuRkUBZFHVtI9xSHi7OfMLbHUjNqfM2OIKsBH36cMY6wLiUCFEADygkvfiDIP
 32NKkOG6FvcC1T1qD+Zh2//rnUKscqigRGeJlAIr1ylolTL1s7fgxt1nUK0VNWdTdBLH
 C+Us95H5t903ohJ/QfQt71zWMJ1TE4jSAlG0fMoglLREX5PMi0VYkrJv4wIxb1JF3I6c
 bIcOg7EGrdZcEDlZOrBJGRRyPwz6yI1w4N7p2veKdIcU9k6a/nnCf4aSYvsBEMndstgR
 daCT8vIl5v4KvizGCem+BGtEYW1QI/SbjwwFdDVI8SpELeLc3mp7+QwYardnJHUCkTH+
 qVDw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=YEa01RGKF8JVYHVNGLJyhEpOLJ7yU31RL2rzpeHtNkg=;
 b=tHbBgINbOeu+OgjS6/o7ItQTV3UB4wD9RFjX762jhAGKPxRdndWu71k90bwaBl1A/R
 X7nMrARyA/NmEodk5UcG+z9C11hrhug2Jegt8YXR/tfbg5G/Rq3hw7oNKpSYalFFI7ZT
 9bUHP+eTTWGmAxSaxfFpu5t6YUUZzNJUcJKKTweSNaw7WAcu9KXi4uw2KtylXCcNnN7q
 B10kRcSYaJEj9JMOYFQZHXKS+nwCFCqk3zIYqR5IYrX4cWlWy6U7VdipnUQNcqFO4Xe4
 WFmcPaXi9KM1xrGpnry21XB6pXFnNHUdQa+SDOr4/AcsqH+J50Drtqg7V1xm4BMcSThH
 fvmQ==
X-Gm-Message-State: AOAM533aW9jVjbmx0x1evuSo2GTWtK9wdpBQ9sa9EHwrjBjK8eOR2514
 GrAahLnXhzgwgaap0tQNUGYdFZOy2kVDG1VFw0Y=
X-Google-Smtp-Source: ABdhPJx76i3p4Iul8Nnnqq3s4r+QFz7K7XERy/3vGXlo4p0448hu7+ypLqIrv5f4uYqUq9eEDEPIlzKSVWp4vlLyehI=
X-Received: by 2002:a17:90b:4c8c:: with SMTP id
 my12mr42448742pjb.50.1640930145098; 
 Thu, 30 Dec 2021 21:55:45 -0800 (PST)
MIME-Version: 1.0
References: <20211230034512.B9B3718C08E@mercury.lcs.mit.edu>
 <Yc3g/+i9BQBK/5qO@mit.edu>
 <CAEoi9W6NM9pKwLukQdF_bo9enGV0-Mjp7m_bqy+nt1E8Oxssmg@mail.gmail.com>
 <Yc50LSUs7B790YFG@mit.edu>
 <CAKzdPgzOBKEaMdCGxKirP4cxSDeBZrU6VO78JFpxf05vi-5_AQ@mail.gmail.com>
 <Yc6SFRbK1aCuxJOr@mit.edu>
In-Reply-To: <Yc6SFRbK1aCuxJOr@mit.edu>
From: Rob Pike <robpike@gmail.com>
Date: Fri, 31 Dec 2021 16:55:34 +1100
Message-ID: <CAKzdPgxPXUjEQKkogfhR5RA5SjC+HG2h5--BNUSQwZ0XQUJ==Q@mail.gmail.com>
To: "Theodore Ts'o" <tytso@mit.edu>
Content-Type: multipart/alternative; boundary="000000000000665f4005d46ad245"
Subject: Re: [TUHS] moving directories in svr2
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>,
 Noel Chiappa <jnc@mercury.lcs.mit.edu>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000665f4005d46ad245
Content-Type: text/plain; charset="UTF-8"

Thanks for your thoughtful response (and for reading the paper).

This for me is the catch:

*But there is a whole ecosystem of shell scripts, programs, user's finger
macros, etc., that would break if we "made things better" or made things
simpler.*

And of course you're right, but we've known how to roll out breaking
changes in software for a very long time now. And we do so often. Few Unix
programs from the past would compile and run today without being updated to
"modern" interfaces and compilers.

I believe it could be done, and I believe it should be done. Rolled out
carefully and explained well it would please far more than it offends, and
is arguably far closer to correct than the current situation.

Of course, I am not volunteering, sorry. Easy for me to snipe, I admit, but
then I paid my OS dues long ago.

-rob


On Fri, Dec 31, 2021 at 4:16 PM Theodore Ts'o <tytso@mit.edu> wrote:

> On Fri, Dec 31, 2021 at 02:23:15PM +1100, Rob Pike wrote:
> > In broad strokes, that's exactly what we did in Plan 9, with great
> results,
> > as was said here a while back. The paper ended with a plea to do the same
> > to Unix, which I think is quite doable.
> >
> > https://9p.io/sys/doc/lexnames.html
>
> I'm sure it *could* be done.  In fact, Linux has a number of the
> pieces of the implementations already, which could be reused for a
> Plan-9-style lexical namespace.  Linux has bind mounts, and a dentry is
> essentially a cached directory lookup (it contains a pointer to its
> parent dentry, the filename used to do the lookup and a pointer to the
> resulting inode).  And a struct file contains a struct dentry, which
> means in Linux it is possible to determine the path used to open a
> particular file.  There are some differences of course; so it's not
> exact, but I agree with you that it is quite "doable".  (In
> particular, how Linux dentries and symlinks interact appears to be
> different from how Plan 9 and Channels did things, if I understand the
> paper correctly.)
>
> The question though, is whether Linux *should* do it.  Or rather,
> *could* we do it without breaking backwards compatibility with users
> and application which expect that dot-dot works the way it does in
> classical Unix implementations for the past 4 decades or so.
>
> Granted that the combination of symlinks, and hard links, and in
> Linux, bind mounts (not to mention bind namespaces, chroots, and
> pivot_root operations), can be confusing.  But there is a whole
> ecosystem of shell scripts, programs, user's finger macros, etc., that
> would break if we "made things better" or "made things simpler".
>
> One of the benefits of research OS's is that you can experiment with
> things without having to worry about the howls of angry users when you
> break backwards compatibility, or eliminate some particular awkward
> API or feature.
>
>                                            - Ted
>
> P.S.  For example, how I wish I could eliminate telldir/seekdir, or at
> least change things so that telldir/seekdir used a substantially
> larger "cookie" to memoize a position in a directory's readdir stream
> which has to be valid effectively forever.  Today, you can pass a
> 32-bit telldir cookie to seekdir, and readdir MUST not return a
> directory entry that it had already returned, and MUST not skip a
> directory entry that was present at the time of the telldir().  Thus
> spake POSIX, and there are applications which depend on
> telldir/seekdir/readdir having this precise set of semantics
>
> If your directory is stored internally as a linear stream, that's not
> too bad; but if you're using a more complex data structure, life gets
> interesting.  I know of one file system (JFS) which added an extra,
> separate, on-disk b-tree structure to each directory just to be able
> to provide stable telldir/seekdir cookies.  (And of course, there's a
> performance impact to needing to update an extra b-tree each time a
> directory entry is added or removed.)
>
> With a research OS, it's at least possible to say, "Well, *that* was a
> mistake; let's pretend it never happened and let's see how much better
> life would be."  :-)
>

--000000000000665f4005d46ad245
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks for your thoughtful response (and for reading the p=
aper).<div><br></div><div>This for me is the catch:</div><div><br></div><di=
v><i>But there is a whole ecosystem of shell scripts, programs, user&#39;s =
finger macros, etc., that would break if we &quot;made things better&quot; =
or made things simpler.</i></div><div><br></div><div>And of course you&#39;=
re right, but we&#39;ve known how to roll out breaking changes in software =
for a very long time now. And we do so often. Few Unix programs from the pa=
st would compile and run today without being updated to &quot;modern&quot; =
interfaces and compilers.</div><div><br></div><div>I believe it could be do=
ne, and I believe it should be done. Rolled out carefully and explained wel=
l it would please far more than it offends, and is arguably far closer to c=
orrect than the current situation.</div><div><br></div><div>Of course, I am=
 not volunteering, sorry. Easy for me to snipe, I admit, but then I paid my=
 OS dues long ago.</div><div><br></div><div>-rob</div><div><br></div></div>=
<br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Fri=
, Dec 31, 2021 at 4:16 PM Theodore Ts&#39;o &lt;<a href=3D"mailto:tytso@mit=
.edu">tytso@mit.edu</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quot=
e" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204)=
;padding-left:1ex">On Fri, Dec 31, 2021 at 02:23:15PM +1100, Rob Pike wrote=
:<br>
&gt; In broad strokes, that&#39;s exactly what we did in Plan 9, with great=
 results,<br>
&gt; as was said here a while back. The paper ended with a plea to do the s=
ame<br>
&gt; to Unix, which I think is quite doable.<br>
&gt; <br>
&gt; <a href=3D"https://9p.io/sys/doc/lexnames.html" rel=3D"noreferrer" tar=
get=3D"_blank">https://9p.io/sys/doc/lexnames.html</a><br>
<br>
I&#39;m sure it *could* be done.=C2=A0 In fact, Linux has a number of the<b=
r>
pieces of the implementations already, which could be reused for a<br>
Plan-9-style lexical namespace.=C2=A0 Linux has bind mounts, and a dentry i=
s<br>
essentially a cached directory lookup (it contains a pointer to its<br>
parent dentry, the filename used to do the lookup and a pointer to the<br>
resulting inode).=C2=A0 And a struct file contains a struct dentry, which<b=
r>
means in Linux it is possible to determine the path used to open a<br>
particular file.=C2=A0 There are some differences of course; so it&#39;s no=
t<br>
exact, but I agree with you that it is quite &quot;doable&quot;.=C2=A0 (In<=
br>
particular, how Linux dentries and symlinks interact appears to be<br>
different from how Plan 9 and Channels did things, if I understand the<br>
paper correctly.)<br>
<br>
The question though, is whether Linux *should* do it.=C2=A0 Or rather,<br>
*could* we do it without breaking backwards compatibility with users<br>
and application which expect that dot-dot works the way it does in<br>
classical Unix implementations for the past 4 decades or so.<br>
<br>
Granted that the combination of symlinks, and hard links, and in<br>
Linux, bind mounts (not to mention bind namespaces, chroots, and<br>
pivot_root operations), can be confusing.=C2=A0 But there is a whole<br>
ecosystem of shell scripts, programs, user&#39;s finger macros, etc., that<=
br>
would break if we &quot;made things better&quot; or &quot;made things simpl=
er&quot;.<br>
<br>
One of the benefits of research OS&#39;s is that you can experiment with<br=
>
things without having to worry about the howls of angry users when you<br>
break backwards compatibility, or eliminate some particular awkward<br>
API or feature.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=
=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =
=C2=A0- Ted<br>
<br>
P.S.=C2=A0 For example, how I wish I could eliminate telldir/seekdir, or at=
<br>
least change things so that telldir/seekdir used a substantially<br>
larger &quot;cookie&quot; to memoize a position in a directory&#39;s readdi=
r stream<br>
which has to be valid effectively forever.=C2=A0 Today, you can pass a<br>
32-bit telldir cookie to seekdir, and readdir MUST not return a<br>
directory entry that it had already returned, and MUST not skip a<br>
directory entry that was present at the time of the telldir().=C2=A0 Thus<b=
r>
spake POSIX, and there are applications which depend on<br>
telldir/seekdir/readdir having this precise set of semantics<br>
<br>
If your directory is stored internally as a linear stream, that&#39;s not<b=
r>
too bad; but if you&#39;re using a more complex data structure, life gets<b=
r>
interesting.=C2=A0 I know of one file system (JFS) which added an extra,<br=
>
separate, on-disk b-tree structure to each directory just to be able<br>
to provide stable telldir/seekdir cookies.=C2=A0 (And of course, there&#39;=
s a<br>
performance impact to needing to update an extra b-tree each time a<br>
directory entry is added or removed.)<br>
<br>
With a research OS, it&#39;s at least possible to say, &quot;Well, *that* w=
as a<br>
mistake; let&#39;s pretend it never happened and let&#39;s see how much bet=
ter<br>
life would be.&quot;=C2=A0 :-)<br>
</blockquote></div>

--000000000000665f4005d46ad245--
