From: stewart@serissa.com (Lawrence Stewart)
Date: Tue, 19 Sep 2017 15:31:44 -0400
Subject: [TUHS] Happy birthday,
 Dennis Ritchie! [ really sun vs dec/apollo --> X and NeWS ]
In-Reply-To: <1505843808.1332176.1111446696.14AB97E4@webmail.messagingengine.com>
References: <f05f5fe905a5279e242c1ff265f43c690eb4052e@webmail.yaccman.com>
 <1505782328.3172479.1110519744.63D53ACC@webmail.messagingengine.com>
 <20170919025031.GA25650@mcvoy.com> <20170919135359.G38me%steffen@sdaoden.eu>
 <20170919135652.GN25650@mcvoy.com>
 <1505843808.1332176.1111446696.14AB97E4@webmail.messagingengine.com>
Message-ID: <4DFC0ABE-1601-44A5-8A56-97AB95575F22@serissa.com>

Being too lazy to type __FILE__ and __LINE__ all the time I tend to do this:

#define whereprintf(fmt, ...) printf("%s:%d: " fmt, __FILE__, __LINE__, ##__VA_ARGS__)

which works when fmt is a constant anyway.

My rant about error messages is that programmers too infrequently make them actionable.  

I group errors into 4 categories:

* Things the user can fix (file not found)
* Temporary resource constraints (destination unreachable, disk full)
* Things the admin can fix (library not found)
* Things the author of the program can fix (assertion failures)

In each case, the kind of information needed is different, and the level of noise and specificity may differ as well.  The user wants to know (a) how to fix it or (b) who to ask.

Finally, When faced with an unfamiliar error, the natural reaction of a 2017 user is to cut and past the error into a search engine.  Consequently I think often the right thing to do is to put a unique ID in the error message that will find it on the support website (or user forum, or …)

-L

PS Daughter is working on a master’s project to improve the quality of errors from the python interpreter/compiler.  Sorely needed.

