X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 11971 invoked from network); 17 Aug 2020 18:14:15 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 17 Aug 2020 18:14:15 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 6F8349E18B; Tue, 18 Aug 2020 04:14:14 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id DE3D69CAAF;
	Tue, 18 Aug 2020 04:13:57 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="SBUQpoRS";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 104DC9CAAF; Tue, 18 Aug 2020 04:13:57 +1000 (AEST)
Received: from mail-wr1-f44.google.com (mail-wr1-f44.google.com
 [209.85.221.44])
 by minnie.tuhs.org (Postfix) with ESMTPS id 5A93B9C8BB
 for <tuhs@tuhs.org>; Tue, 18 Aug 2020 04:13:56 +1000 (AEST)
Received: by mail-wr1-f44.google.com with SMTP id a15so15864363wrh.10
 for <tuhs@tuhs.org>; Mon, 17 Aug 2020 11:13:56 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=4thMHmWk/aWqwP87pxbuv9Y+ZeYmlFciwFVrh8hoKBc=;
 b=SBUQpoRSbGaNOBmgXht1U9YyGDcSMT9vd9lDJuYDshDzgam5dCHgQhoXBnShRDvrQZ
 dNOxcOuNOTRyhw6/iWgNhYjpbt9d2STx2+NRa7ueUGRu+9d1uODOw3psxHajd13Dv0Ae
 s5rMyjQ8S78+5vxipx+DIqaJGl2nBUgfxdEQ42d8Df120h5rvvSIzYsWdcpGqG5+Pcj3
 TfYqtPT5fpk+SWeCUk313pxEl3teh7O935/yfeu/9EcPwQs/Uj9mGrDnwG2OEGOSZ+og
 ddDcSZjY8MD7sf5YKPh8/78rpWMgk++N6oMcx9k+At4zTv5evUclFUS0j6cuh1I1cUdG
 jNNg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=4thMHmWk/aWqwP87pxbuv9Y+ZeYmlFciwFVrh8hoKBc=;
 b=NwxAoiPHFQclEWCdHWMDnBoacROOiSAiJZC8xVkh+lGWteMKxTou6R/yGD1YeuzGNh
 yUYRyFjmMfRhlFiglzY21Qz6AaNXl6M9tz4kKai1pPw8xjtV3hitkYuVTBW4xknbAvXE
 Q37Qqaqid5jR3yUhpcCWwXuNvwPa57gAAs9SGWZfwLpS2jIqrsdeYXBuHgrB2FM3wYMd
 F/DrMh05tMqk89EOJ1xdzdj/1jZvZngoGYHkm1DPk4H0M63nQ2RYJNmTcCU3QIyRjfGS
 HYF9q2JPcybrIPou9J6ssT+4rnBO2f3lXUq3a7WYmE8khEu2KjG5h14dzrXbIldFEloO
 sRlg==
X-Gm-Message-State: AOAM5323uY1cpKMHqdFVGKPCr2Hr1jkD4/+5mc/VcQ3nfqg7L6B2YG4q
 DgnVMbv2pPVbbPsSdrxAqhyWrI05FhaASIySbDg=
X-Google-Smtp-Source: ABdhPJxv6sKJ8BPpQqa8JAiXDv/fmRCobeJs7+/sp8Zkr50GBJhz0I7AFW3US14uRUpA20ycjoEfnGlinzGgN//+og4=
X-Received: by 2002:a5d:4942:: with SMTP id r2mr15437371wrs.285.1597688034991; 
 Mon, 17 Aug 2020 11:13:54 -0700 (PDT)
MIME-Version: 1.0
References: <20200817020224.104B518C095@mercury.lcs.mit.edu>
 <CABH=_VRRy7mgpgcoayq8v7pW5UL8jcZOH=t=Dt2063=Qn24e-A@mail.gmail.com>
In-Reply-To: <CABH=_VRRy7mgpgcoayq8v7pW5UL8jcZOH=t=Dt2063=Qn24e-A@mail.gmail.com>
From: Jim Geist <velocityboy@gmail.com>
Date: Mon, 17 Aug 2020 14:13:43 -0400
Message-ID: <CAJohCK+aqCKiYNALrJAdPv=q=+uw8++0oCMR_O10kUJ62m=tVA@mail.gmail.com>
To: Paul Winalski <paul.winalski@gmail.com>
Content-Type: multipart/alternative; boundary="000000000000c9a46805ad16bbbc"
Subject: Re: [TUHS] Memory management in Dennis Ritchie's C Compiler
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: The Eunuchs Hysterical Society <tuhs@tuhs.org>,
 Noel Chiappa <jnc@mercury.lcs.mit.edu>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000c9a46805ad16bbbc
Content-Type: text/plain; charset="UTF-8"

You beat me to my response. malloc/free are great for long running
processes where memory can't just infinitely increase, but there's a ton of
stuff in a compiler -- types, expressions, symbols -- that survives until
the process exits. There's benefit in both space (because you don't have to
add headers to the blocks as malloc() does, so free() can work) and time to
doing it this way.

On Mon, Aug 17, 2020 at 2:03 PM Paul Winalski <paul.winalski@gmail.com>
wrote:

> On 8/16/20, Noel Chiappa <jnc@mercury.lcs.mit.edu> wrote:
> >
> > The V7 compiler seems to use sbrk() (the system call to manage the
> location of
> > the end of a process' data space), and manage the additional data space
> > 'manually'; it does not seem to use a true generic heap. See gblock() in
> > c01.c:
>
> This is very common in compilers.  Both the DEC/Compaq and Intel
> compilers manage heap memory this way. Each particular phase or pass
> of a compiler tends to build its on set of data structures in heap,
> and then free the whole mess when the phase/pass is done.  malloc/free
> doesn't fit the model very well because you have to free each
> structure individually, and for more persistent structures you don't
> get very good locality of reference.  What works better is to use a
> multitude of mini-heaps that can be freed up all in one go.
>
> -Paul W.
>

--000000000000c9a46805ad16bbbc
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">You=C2=A0beat me to my response. malloc/free are great for=
 long running processes where memory can&#39;t just infinitely increase, bu=
t there&#39;s a ton of stuff in a compiler -- types, expressions, symbols -=
- that survives until the process exits. There&#39;s benefit in both space =
(because you don&#39;t have to add headers to the blocks as malloc() does, =
so free() can work) and time to doing it this way.</div><br><div class=3D"g=
mail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Mon, Aug 17, 2020 at 2=
:03 PM Paul Winalski &lt;<a href=3D"mailto:paul.winalski@gmail.com">paul.wi=
nalski@gmail.com</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" =
style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);pa=
dding-left:1ex">On 8/16/20, Noel Chiappa &lt;<a href=3D"mailto:jnc@mercury.=
lcs.mit.edu" target=3D"_blank">jnc@mercury.lcs.mit.edu</a>&gt; wrote:<br>
&gt;<br>
&gt; The V7 compiler seems to use sbrk() (the system call to manage the loc=
ation of<br>
&gt; the end of a process&#39; data space), and manage the additional data =
space<br>
&gt; &#39;manually&#39;; it does not seem to use a true generic heap. See g=
block() in<br>
&gt; c01.c:<br>
<br>
This is very common in compilers.=C2=A0 Both the DEC/Compaq and Intel<br>
compilers manage heap memory this way. Each particular phase or pass<br>
of a compiler tends to build its on set of data structures in heap,<br>
and then free the whole mess when the phase/pass is done.=C2=A0 malloc/free=
<br>
doesn&#39;t fit the model very well because you have to free each<br>
structure individually, and for more persistent structures you don&#39;t<br=
>
get very good locality of reference.=C2=A0 What works better is to use a<br=
>
multitude of mini-heaps that can be freed up all in one go.<br>
<br>
-Paul W.<br>
</blockquote></div>

--000000000000c9a46805ad16bbbc--
