X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	T_SCC_BODY_TEXT_LINE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 11468 invoked from network); 28 Feb 2022 18:49:30 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 28 Feb 2022 18:49:30 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 736429CFBA; Tue,  1 Mar 2022 04:49:29 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 8C2879CC02;
	Tue,  1 Mar 2022 04:48:29 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="lvfBXBL7";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 36A889CC02; Tue,  1 Mar 2022 04:48:21 +1000 (AEST)
Received: from mail-oi1-f174.google.com (mail-oi1-f174.google.com
 [209.85.167.174])
 by minnie.tuhs.org (Postfix) with ESMTPS id 913649CBCE
 for <tuhs@minnie.tuhs.org>; Tue,  1 Mar 2022 04:48:20 +1000 (AEST)
Received: by mail-oi1-f174.google.com with SMTP id l25so14022453oic.13
 for <tuhs@minnie.tuhs.org>; Mon, 28 Feb 2022 10:48:20 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=rTH4Pt98KlHfVjPFFrXj6TyrEOwWohu4mw15JGdn+so=;
 b=lvfBXBL7Z5uG2C6zSsPbqquu9brhDVEEwy2QAaCyyO578x9sE6vN783rZx0umiSiTk
 R0novQPNBlIpIFZqgWkvOXPeeY362sF8Czk2kC8TjQqXcDQmZImQxupVO/6HSZVKEUUo
 g/mFzOIrVkC0OyWCKvR3WVJR73zbKJQpcHJkqBAijpaRekG8HNuNjWPWpklJ3BaRrVh0
 09UjPU+ZuKOK4eB1SWwIpBaKYDtLE3qhy0x1hbZ6qk0XLXYYZ5swGxjs5Ptdw5nR34HN
 Q5l1V8QJ0mHDD0aUVutpWdYkfSeHpzqGT4Dh/MmJcnc9wfvdn5NSU18tziH1dF6JVxsr
 lOmg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=rTH4Pt98KlHfVjPFFrXj6TyrEOwWohu4mw15JGdn+so=;
 b=y9KX2QPbagNzrcR5edn4GIOFYuAIyI88d4yBodlPunRUnW4jeD6CHG3zDWhAMHzW4v
 gSZDmMepwPE7te01UxlRyJmbPAST7O30UDltykQiVKp2RfDL+/SWeb946EOCmNO0XvTZ
 Ui//oqpx76+GlXzn+7CghSz9jq8JDotzC9NyniP1ccfoV/KJIzRGGWCkn1oR3nZdv6BU
 c79nmTXD4DnvXN5vjQy8q8z+bY95rPeCes1fzFTgt6vO+6gqnyyB0ikMqtVEAfno8na3
 /CydJja8qXf5040Mjbc+UB1KCtz0lmFDKXyTQ5Kacfvbx+WFyYnadbpBE+9ziLoisdhM
 8/bw==
X-Gm-Message-State: AOAM53326rb6udtQYZfpj2tlM4Fy4USCuemouParRhfR8ypFbQNGP/s5
 HhW5k58dBz0TjX18FVSQl/LBiCE2HGlpR61XGxgtc34D
X-Google-Smtp-Source: ABdhPJyd2ijCIvmtyezI4mJKWI9k00tZilVsjgMe3gw3r71gD+Rm9YmjI1TtgxxCjXvcyRcwkHIe+f2XNU9oboJXPmw=
X-Received: by 2002:aca:503:0:b0:2cf:1d27:ddfd with SMTP id
 3-20020aca0503000000b002cf1d27ddfdmr10111033oif.110.1646074099727; Mon, 28
 Feb 2022 10:48:19 -0800 (PST)
MIME-Version: 1.0
References: <CAKH6PiVCk6gSv-WVztRUiJrOt3QHVi1pCVEKzw1RcEi+m+G=bw@mail.gmail.com>
 <CAKzdPgw3F9snv-kO+tE=rE2Q_wh_7AKxVaZ9gXFoCxaX6pgBkA@mail.gmail.com>
 <20220228140715.GQ21168@mcvoy.com>
In-Reply-To: <20220228140715.GQ21168@mcvoy.com>
From: Dan Cross <crossd@gmail.com>
Date: Mon, 28 Feb 2022 13:47:43 -0500
Message-ID: <CAEoi9W6-1MV-pBax8J1adQPCXCyXMjMsJFruUgea=gikoC6eyw@mail.gmail.com>
To: Larry McVoy <lm@mcvoy.com>
Content-Type: multipart/alternative; boundary="000000000000fd02b005d9187d9c"
Subject: Re: [TUHS] run commands at login in v6 and stty
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>,
 Douglas McIlroy <douglas.mcilroy@dartmouth.edu>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--000000000000fd02b005d9187d9c
Content-Type: text/plain; charset="UTF-8"

On Mon, Feb 28, 2022 at 9:10 AM Larry McVoy <lm@mcvoy.com> wrote:

> So I'm curious, did Plan 9 run on a similar number of architectures and
> support a similar number of graphics cards?
>

Yes, it did.

If it did that, nicely, then you have a great point, the X11 people
> (and most of us) clearly missed a better way to do things.  If this is
> the case, I'd like to understand how you did it because just including
> different definitions doesn't begin to scratch the surface of what the
> #ifdefs did in X11, there were tons in the actual code.
>

#ifdef has more or less always struck me as the solution to the wrong
problem. "We have all this code and we want to shoehorn it into a new
environment," instead of, "we have many environments, so we carefully
structure the code to accommodate the differences." Of course, the latter
is harder than the former, but it also pays larger dividends over time as
compared to the former.

Maybe the constant system interface made all the difference, that
> could be.
>
> If it supported a much smaller number of targets, well, sure, it's
> easier to be clean if you have a clean set of targets.
>

In fairness, a meaningful comparison is hard: plan9 ran on ~a dozen
different architectures over its lifetime, but never supported near the
variety of software or workloads of Unix, and didn't exactly "compete" in
the market the way Unix did. The PC port in particular supported oodles of
graphics cards at one point, but not as many as X did, mostly because there
weren't all that many folks working with the unsupported cards, so there
wasn't a lot of motivation to write tons of drivers.

Could it have retained its elegantly clean structure over time had things
evolved differently? That's impossible to answer, but I'm sad that we never
got the chance to find out.

I remain grateful for the #ifdefs, I could make enough sense of it
> all to bring up X11 on every platform I worked on.  It wasn't pretty,
> there was a ton of "I don't recognize this $WHATEVER, what happens if
> I just #if 0 around the whole thing?  Wow, it compiles, lets see if
> I get a window system.  Yep, I do.  Shrug."  That limited what I had
> to understand to the much smaller subset of code I was actually
> going to run, yeah, that set of #ifdefs was a mess but not such
> a mess that I didn't get a working X11.


> I'm not arguing that #ifdef is good, I'm just acknowledging it had
> a lot of benefit to me, and _for me_, the cost was worth it in that
> instance.  I could have X11 working in less than a day.
>

I do think that #ifdef, used extremely judiciously, can have some utility:
for example, compiling out debug code by setting a constant.  Consider:

#ifdef NDEBUG
const bool DEBUGGING = false;
#else
const bool DEBUGGING = true;
#endif

static inline
void
DBG(const char *fmt, ...)
{
    if (DEBUGGING) {
        va_list ap;
        va_start(ap, fmt);
        vfprintf(stderr, fmt ap);
        va_end(ap);
    }
}

    DBG(foo);

if `NDEBUG` is defined, then the body of the static inline becomes, `if (0)
{ ... }` and one hopes our compilers are sufficiently smart to elide the
entire thing.

The biggest problem with #ifdef wasn't so much that it existed, but rather
that it was used for too many things that it wasn't well-suited for. The
second biggest problem was that it was semantically unaware of the
language; it was purely textual. Bummer.

I do get your point about abstracting the interface differences away,
> I actually hate #ifdefs in the code with a passion so in BitKeeper we
> had all that stuff buried under the abstractions.  We made everything
> look like Unix, even on Windows, except for fork().  I haven't called
> fork() directly in close to 20 years, we picked up spawn() and made that
> work everywhere.  The abstraction layer cuts down on the #ifdefs in the
> code a LOT.
>

Agreed. But getting those abstractions right requires experience and taste.
#ifdef is a blunt took for a nuanced problem.

        - Dan C.


On Mon, Feb 28, 2022 at 06:22:28PM +1100, Rob Pike wrote:
> > Plan 9 had the distinct advantage of a constant system interface at the
> > source level. X11 did not, but it also made essentially no attempt to
> > abstract it away, so the lines starting #ifdef often outnumbered the
> actual
> > code. I couldn't make hide nor hair of it, and had no way to reliably
> test
> > any change.
> >
> > C with #ifdefs is not portable, it is a collection of 2^n overlaid
> > programs, where n is the number of distinct #if[n]def tags. It's too bad
> > the problems of that approach were not appreciated by the C standard
> > committee, who mandated the #ifndef guard approach that I'm sure could
> > count as a provable billion dollar mistake, probably much more. The cost
> of
> > building #ifdef'ed code, especially with C++, which decided to be more
> > fine-grained about it, is unfathomable.
> >
> > Google alone might well count for many millions of dollars in wasted
> > compilation equipment. I remember giving a Plan 9 demo to someone soon
> > after I got to Google. None of the features of the system were of
> interest.
> > The thing that astounded my audience was the ability to build the kernel
> on
> > a P90 in 20 seconds or so, and the window system in under 3. At that
> time,
> > a build of a Google server would require hours on a large distcc cluster.
> >
> > I still shudder to think of it. It's worse now, of course, far worse, but
> > Google has far larger clusters to handle it and some improvement in
> > tooling. However, the #ifdefs persist.
> >
> >
> > Tom Cargill warned Bjarne about this around 1984, but the plea fell on
> deaf
> > ears.
> >
> > -rob
> >
> >
> > On Mon, Feb 28, 2022 at 12:07 PM Douglas McIlroy <
> > douglas.mcilroy@dartmouth.edu> wrote:
> >
> > > > The X11 tree was a heavily ifdef-ed.  And it needed to be, I don't
> have
> > > > an answer as to how you would reuse all that code on different
> hardware
> > > > in a better way.
> > >
> > > Plan 9 did it with #include. The name of the included file was the
> same for
> > > every architecture. Only the search path for include files changed.
> Done
> > > with
> > > care, this eliminates the typical upfront #ifdefs.that define constants
> > > and set
> > > flags.
> > >
> > > Other preprocessor conditionals can usually be replaced by a regular
> if,
> > > letting
> > > the compiler optimize away the unwanted alternative. This makes
> > > conditionals
> > > obey the scope rules of C.
> > >
> > > Doug
> > >
>
> --
> ---
> Larry McVoy                  lm at mcvoy.com
> http://www.mcvoy.com/lm
>

--000000000000fd02b005d9187d9c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr">On Mon, Feb 28, 2022 at 9:10 AM Larry McV=
oy &lt;<a href=3D"mailto:lm@mcvoy.com">lm@mcvoy.com</a>&gt; wrote:<br></div=
><div class=3D"gmail_quote"><blockquote class=3D"gmail_quote" style=3D"marg=
in:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1e=
x">So I&#39;m curious, did Plan 9 run on a similar number of architectures =
and<br>
support a similar number of graphics cards?<br></blockquote><div><br></div>=
<div>Yes, it did.</div><div><br></div><blockquote class=3D"gmail_quote" sty=
le=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);paddi=
ng-left:1ex">
If it did that, nicely, then you have a great point, the X11 people<br>
(and most of us) clearly missed a better way to do things.=C2=A0 If this is=
<br>
the case, I&#39;d like to understand how you did it because just including<=
br>
different definitions doesn&#39;t begin to scratch the surface of what the<=
br>
#ifdefs did in X11, there were tons in the actual code.<br></blockquote><di=
v><br></div><div>#ifdef has more or less always struck me as the solution t=
o the wrong problem. &quot;We have all this code and we want to shoehorn it=
 into a new environment,&quot; instead of, &quot;we have many environments,=
 so we carefully structure the code to accommodate the differences.&quot; O=
f course, the latter is harder than the former, but it also pays larger div=
idends over time as compared to the former.</div><div><br></div><blockquote=
 class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px so=
lid rgb(204,204,204);padding-left:1ex">Maybe the constant system interface =
made all the difference, that <br>
could be.=C2=A0 <br>
<br>
If it supported a much smaller number of targets, well, sure, it&#39;s<br>
easier to be clean if you have a clean set of targets.<br></blockquote><div=
><br></div><div>In fairness, a meaningful comparison is hard: plan9 ran on =
~a dozen different architectures over its lifetime, but never supported nea=
r the variety of software or workloads of Unix, and didn&#39;t exactly &quo=
t;compete&quot; in the market the way Unix did. The PC port in particular s=
upported oodles of graphics cards at one point, but not as many as X did, m=
ostly because there weren&#39;t all that many folks working with the unsupp=
orted cards, so there wasn&#39;t a lot of motivation to write tons of drive=
rs.</div><div><br></div><div>Could it have retained its elegantly clean str=
ucture over time had things evolved differently? That&#39;s impossible to a=
nswer,=C2=A0but I&#39;m sad that we never got the chance to find out.</div>=
<div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0p=
x 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">I remain g=
rateful for the #ifdefs, I could make enough sense of it <br>
all to bring up X11 on every platform I worked on.=C2=A0 It wasn&#39;t pret=
ty,<br>
there was a ton of &quot;I don&#39;t recognize this $WHATEVER, what happens=
 if<br>
I just #if 0 around the whole thing?=C2=A0 Wow, it compiles, lets see if<br=
>
I get a window system.=C2=A0 Yep, I do.=C2=A0 Shrug.&quot;=C2=A0 That limit=
ed what I had<br>
to understand to the much smaller subset of code I was actually<br>
going to run, yeah, that set of #ifdefs was a mess but not such<br>
a mess that I didn&#39;t get a working X11.=C2=A0</blockquote><blockquote c=
lass=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px soli=
d rgb(204,204,204);padding-left:1ex">
<br>
I&#39;m not arguing that #ifdef is good, I&#39;m just acknowledging it had<=
br>
a lot of benefit to me, and _for me_, the cost was worth it in that<br>
instance.=C2=A0 I could have X11 working in less than a day.<br></blockquot=
e><div><br></div><div>I do think that #ifdef, used extremely judiciously, c=
an have some utility: for example, compiling out debug code by setting a co=
nstant.=C2=A0 Consider:</div><div><br></div><div>#ifdef NDEBUG</div><div>co=
nst bool DEBUGGING =3D false;</div><div>#else</div><div>const bool DEBUGGIN=
G =3D true;</div><div>#endif</div><div><br></div><div>static inline</div><d=
iv>void</div><div>DBG(const char *fmt, ...)</div><div>{</div><div>=C2=A0 =
=C2=A0 if (DEBUGGING) {<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 va_list ap;</div><di=
v>=C2=A0 =C2=A0 =C2=A0 =C2=A0 va_start(ap, fmt);</div><div>=C2=A0 =C2=A0 =
=C2=A0 =C2=A0 vfprintf(stderr, fmt ap);</div><div>=C2=A0 =C2=A0 =C2=A0 =C2=
=A0 va_end(ap);</div><div>=C2=A0 =C2=A0 }</div><div>}</div><div><br></div><=
div>=C2=A0 =C2=A0 DBG(foo);</div><div><br></div><div>if `NDEBUG` is defined=
, then the body of the static inline becomes, `if (0) { ... }` and one hope=
s our compilers are sufficiently smart to elide the entire thing.</div><div=
><br></div><div>The biggest problem with #ifdef wasn&#39;t so much that it =
existed, but rather that it was used for too many things that it wasn&#39;t=
 well-suited for. The second biggest problem was that it was semantically u=
naware of the language; it was purely textual. Bummer.</div><div><br></div>=
<blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-=
left:1px solid rgb(204,204,204);padding-left:1ex">
I do get your point about abstracting the interface differences away,<br>
I actually hate #ifdefs in the code with a passion so in BitKeeper we<br>
had all that stuff buried under the abstractions.=C2=A0 We made everything<=
br>
look like Unix, even on Windows, except for fork().=C2=A0 I haven&#39;t cal=
led<br>
fork() directly in close to 20 years, we picked up spawn() and made that<br=
>
work everywhere.=C2=A0 The abstraction layer cuts down on the #ifdefs in th=
e<br>
code a LOT.<br></blockquote><div><br></div><div>Agreed. But getting those a=
bstractions right requires experience and taste. #ifdef is a blunt took for=
 a nuanced problem.</div><div><br></div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 - =
Dan C.</div><div><br></div><div><br></div><blockquote class=3D"gmail_quote"=
 style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);p=
adding-left:1ex">On Mon, Feb 28, 2022 at 06:22:28PM +1100, Rob Pike wrote:<=
br>
&gt; Plan 9 had the distinct advantage of a constant system interface at th=
e<br>
&gt; source level. X11 did not, but it also made essentially no attempt to<=
br>
&gt; abstract it away, so the lines starting #ifdef often outnumbered the a=
ctual<br>
&gt; code. I couldn&#39;t make hide nor hair of it, and had no way to relia=
bly test<br>
&gt; any change.<br>
&gt; <br>
&gt; C with #ifdefs is not portable, it is a collection of 2^n overlaid<br>
&gt; programs, where n is the number of distinct #if[n]def tags. It&#39;s t=
oo bad<br>
&gt; the problems of that approach were not appreciated by the C standard<b=
r>
&gt; committee, who mandated the #ifndef guard approach that I&#39;m sure c=
ould<br>
&gt; count as a provable billion dollar mistake, probably much more. The co=
st of<br>
&gt; building #ifdef&#39;ed code, especially with C++, which decided to be =
more<br>
&gt; fine-grained about it, is unfathomable.<br>
&gt; <br>
&gt; Google alone might well count for many millions of dollars in wasted<b=
r>
&gt; compilation equipment. I remember giving a Plan 9 demo to someone soon=
<br>
&gt; after I got to Google. None of the features of the system were of inte=
rest.<br>
&gt; The thing that astounded my audience was the ability to build the kern=
el on<br>
&gt; a P90 in 20 seconds or so, and the window system in under 3. At that t=
ime,<br>
&gt; a build of a Google server would require hours on a large distcc clust=
er.<br>
&gt; <br>
&gt; I still shudder to think of it. It&#39;s worse now, of course, far wor=
se, but<br>
&gt; Google has far larger clusters to handle it and some improvement in<br=
>
&gt; tooling. However, the #ifdefs persist.<br>
&gt; <br>
&gt; <br>
&gt; Tom Cargill warned Bjarne about this around 1984, but the plea fell on=
 deaf<br>
&gt; ears.<br>
&gt; <br>
&gt; -rob<br>
&gt; <br>
&gt; <br>
&gt; On Mon, Feb 28, 2022 at 12:07 PM Douglas McIlroy &lt;<br>
&gt; <a href=3D"mailto:douglas.mcilroy@dartmouth.edu" target=3D"_blank">dou=
glas.mcilroy@dartmouth.edu</a>&gt; wrote:<br>
&gt; <br>
&gt; &gt; &gt; The X11 tree was a heavily ifdef-ed.=C2=A0 And it needed to =
be, I don&#39;t have<br>
&gt; &gt; &gt; an answer as to how you would reuse all that code on differe=
nt hardware<br>
&gt; &gt; &gt; in a better way.<br>
&gt; &gt;<br>
&gt; &gt; Plan 9 did it with #include. The name of the included file was th=
e same for<br>
&gt; &gt; every architecture. Only the search path for include files change=
d. Done<br>
&gt; &gt; with<br>
&gt; &gt; care, this eliminates the typical upfront #ifdefs.that define con=
stants<br>
&gt; &gt; and set<br>
&gt; &gt; flags.<br>
&gt; &gt;<br>
&gt; &gt; Other preprocessor conditionals can usually be replaced by a regu=
lar if,<br>
&gt; &gt; letting<br>
&gt; &gt; the compiler optimize away the unwanted alternative. This makes<b=
r>
&gt; &gt; conditionals<br>
&gt; &gt; obey the scope rules of C.<br>
&gt; &gt;<br>
&gt; &gt; Doug<br>
&gt; &gt;<br>
<br>
-- <br>
---<br>
Larry McVoy=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 l=
m at <a href=3D"http://mcvoy.com" rel=3D"noreferrer" target=3D"_blank">mcvo=
y.com</a>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://=
www.mcvoy.com/lm" rel=3D"noreferrer" target=3D"_blank">http://www.mcvoy.com=
/lm</a> <br>
</blockquote></div></div>

--000000000000fd02b005d9187d9c--
