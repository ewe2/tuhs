X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=MAILING_LIST_MULTI
	autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 4574 invoked from network); 12 Jan 2022 12:59:16 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 12 Jan 2022 12:59:16 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id E844F9CFE1; Wed, 12 Jan 2022 22:59:11 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 433B69CFCA;
	Wed, 12 Jan 2022 22:58:45 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id BB35D9CFCA; Wed, 12 Jan 2022 22:58:40 +1000 (AEST)
Received: from freefriends.org (freefriends.org [96.88.95.60])
 by minnie.tuhs.org (Postfix) with ESMTPS id EBF0B9C78F
 for <tuhs@tuhs.org>; Wed, 12 Jan 2022 22:58:39 +1000 (AEST)
X-Envelope-From: arnold@skeeve.com
X-Envelope-To: <tuhs@tuhs.org>
Received: from freefriends.org (freefriends.org [96.88.95.60])
 by freefriends.org (8.14.7/8.14.7) with ESMTP id 20CCwZM1013325
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <tuhs@tuhs.org>; Wed, 12 Jan 2022 05:58:35 -0700
Received: (from arnold@localhost)
 by freefriends.org (8.14.7/8.14.7/Submit) id 20CCwPEF013323
 for tuhs@tuhs.org; Wed, 12 Jan 2022 05:58:25 -0700
From: arnold@skeeve.com
Message-Id: <202201121258.20CCwPEF013323@freefriends.org>
X-Authentication-Warning: frenzy.freefriends.org: arnold set sender to
 arnold@skeeve.com using -f
Date: Wed, 12 Jan 2022 05:58:25 -0700
To: tuhs@tuhs.org
User-Agent: Heirloom mailx 12.5 7/5/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Subject: [TUHS] struct(1) revived!  And a request for help
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

Hello All.

We recently discussed Brenda Baker's struct program, that read Fortran
and generated Ratfor.  Many of us remarked as to what a really cool
program it was and how much we admired it, myself included.

For fun (for some definition of "fun") I decided to try to bring the code
into the present.  I set up a GitHub repo with the V7, V8 and V10 code,
and then started work in a separate branch.

(https://github.com/arnoldrobbins/struct, branch "modernize".)

The program has three main parts:

- structure, which reads Fortran and outputs something that is
  almost Ratfor on standard output.

- beautify, which reads the output of structure and finishes the job,
  primarily making conditions readable (.not. --> !, removing double
  negatives, etc.)

- struct.sh - a simple shell script that runs the above two components.
  This is what the user invokes.

The code was written in 1974. As such, it is rife with "type punning"
between int, int *, int **, and char *.  These produce a lot of warnings
from a modern day C compiler.  The code also uses a, er, "unique" bracing
style, making it nearly illegible to my stuck-in-a-rut programming brain.

Here is what I've accomplished so far:

* Converted every function definition and declaration to use modern (ANSI)
  C style, adding a header file with function declarations that is
  included everywhere.

* Run all the code through the indent program, formatting it as traditional
  K&R bracing style, with tabs.

* Fixed some macros to use modern style for getting parameter values as strings
  into the macros.

* Fixed a few small bugs here and there.

* Fixed beautify to work with modern byacc/bison (%union) and to work with
  flex instead of lex. This latter was a challenge.

In structure, only three files still generate warnings, but they all relate
to integer <--> pointer assignment / use as.  However, when compiled in
32 bit mode (gcc -m32), where sizeof(int) is the same as sizeof(pointer),
despite the warnings, structure works!!

Beautify works, whether compiled in 32 or 64 bit mode.

What I've done so far has been mostly mechanical. I hereby request help from
anyone who's interested in making progress on "the hard part" --- those three
files that still generate warnings.

I think the right way to go is to replace int's with a union that holds and
int, a char* and an int*.  But I have not had the quiet time to dive into
the code to see if this can be done.

Anyone who has some time to devote to this and is interested, please drop
me a note off-list.

Thanks,

Arnold Robbins
