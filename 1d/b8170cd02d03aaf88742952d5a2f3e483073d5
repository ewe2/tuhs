From: lyndon@orthanc.ca (Lyndon Nerenberg)
Date: Thu, 9 Mar 2017 18:23:37 -0800
Subject: [TUHS] uucp protocol nits
In-Reply-To: <68DD5665-BA7D-4995-9CE4-4EED65A5F862@orthanc.ca>
References: <CAC20D2MCFBN4e=4j2B0L1=WchCVgEf7sVVv2KGNa4ECWjSSXgA@mail.gmail.com>
 <A8C2A67A-FC5F-41FB-A34C-B839D9FB3A52@xs4all.nl>
 <59797EE8-FAC3-4403-B9D1-109DA0CD5EB2@quintile.net>
 <878D7FE6-A2F2-41E8-90CC-500B369F6EB4@orthanc.ca>
 <68DD5665-BA7D-4995-9CE4-4EED65A5F862@orthanc.ca>
Message-ID: <E48E0A0D-7C80-4FA7-8DE3-13F2B385C292@orthanc.ca>

So if we are going to talk UUCP, how can we not bring up the protocol, and it's beloved behaviour, in certain implementations.

'g' protocol was what everyone ran. 64 byte packets, in a three packet window.  By default.  But 'g' could really race along, if provoked.  The window could slide up to seven!  Unless you were running Xenix, where that provoked a core dump.  On most systems, increasing the window size meant binary patching uucico.

I fuzzily remember 'g' implementations that could handle packets up to 256 bytes, but I can't remember now if the basic (pre-HDB) UUCP could deal with that.

HDB cleaned up a lot of things.  While complicating the configuration files to no end.

In parallel to all this, Rick Adams was pounding the living daylights out of the BSD UUCP code. That which ran on seismo. Then uunet.

-- uunet!ncc!lyndon  (so many uucp path sigs ...)


