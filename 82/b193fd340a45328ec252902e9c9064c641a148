From: ron@ronnatalie.com (Ron Natalie)
Date: Sun, 21 May 2017 07:04:02 -0400
Subject: [TUHS] Unix with TCP/IP for small PDP-11s
In-Reply-To: <1495343623.794127.983422680.4D5F43AD@webmail.messagingengine.com>
References: <mailman.1.1495245601.20449.tuhs@minnie.tuhs.org>
 <be785634-8e6b-7ede-c2eb-d8d4b475d176@update.uu.se>
 <CANCZdfrOt14kr-VkVTurcwG6g1Hg7oQYCyiOphJb_H=G9JqByw@mail.gmail.com>
 <f788e1e9-3f55-cdb4-ac39-a7bb9992e62e@update.uu.se>
 <CANCZdfo-oaupKxY4yUWhL-dKwaBkTSTiz=JkJ8K3XfZq180yMQ@mail.gmail.com>
 <8f3662bc-f4f9-74c3-d648-15969230eacc@update.uu.se>
 <1495343623.794127.983422680.4D5F43AD@webmail.messagingengine.com>
Message-ID: <020201d2d221$f55e08e0$e01a1aa0$@ronnatalie.com>

> Also, x86 is totally "split I/D" by any relevant definition, and has a 20-bit physical address space.

The physical address space isn't the issue.    The PDP-11's (well the later ones) had 22 bits of address space.

Even the amount of virtual address space wasn't the problem.   The problem was really the lack of segments    The PDP11, only had 8 for code and 8 for the combined stack/data (on the split I/D) machine.
While we were able to "thunk" in a code overlay system without any real hardware support, there's no way to do that practically for data.

As I stated earlier, using the BSD networking code, we ran out of the combined code/data registers when it came to having ot have one to map the mbufs.   I supposed you could have added more magic (and perhaps th is is what the later Ultrix did), to carefully unmap one of the data segements to get to the network data, but boy, we never figured out a good way to do that when we tried.    We retired all but the 11/70's (which we had three of) at the time as the Vaxes and other machines were beginning to roll in.    In fact, I did eventually also turn one of the 11/70's into a router using my LOS (little operating system...no time for sharing, uniprocessor system) gateway OS.    Each driver ran in it's own little program so it was a lot easier.



