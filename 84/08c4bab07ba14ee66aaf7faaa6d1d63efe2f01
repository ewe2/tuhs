From: tfb@tfeb.org (Tim Bradshaw)
Date: Tue, 28 Nov 2017 14:55:46 +0000
Subject: [TUHS] Harvard and Von Neumann Architectures and Unix
In-Reply-To: <20171127161141.2C9E318C08F@mercury.lcs.mit.edu>
References: <20171127161141.2C9E318C08F@mercury.lcs.mit.edu>
Message-ID: <2E06126D-C247-4D2B-97A2-DE0A449594E4@tfeb.org>

On 27 Nov 2017, at 16:11, Noel Chiappa <jnc at mercury.lcs.mit.edu> wrote:
> 
> Along those lines, I was wondering about modern OS's, which I gather for
> security reasons prevent execution of data, and prevent writing to code.
> 
> Programs which emit these little 'custom code fragments' (I prefer that term,
> since they aren't really 'self-modifying code' - which I define as 'a program
> which _changes_ _existing_ instructions) must have some way of having a chunk
> of memory into which they can write, but which can also be executed.

I think, however this is done, it must be relatively tractable, because Lisp systems with native-code compilers work fine on modern OSs, and they do very much more than generate small code fragments.

--tim

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20171128/e5e0b054/attachment.html>

