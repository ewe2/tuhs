From: bakul@bitblocks.com (Bakul Shah)
Date: Thu, 31 Aug 2017 17:52:46 -0700
Subject: [TUHS] Why Pascal is Not My Favorite Programming Language -
 Unearthed!
In-Reply-To: <CAC20D2PJvsZiza6AXTK9WFzuHtvHKRsxxfn-n3SFGUcn-AWfQg@mail.gmail.com>
References: <201708301234.v7UCYsPQ002608@freefriends.org>
 <20170831011339.9465B124AEA5@mail.bitblocks.com>
 <20170831144852.GK11202@mcvoy.com>
 <CAJc6K3Wy_GqX4MV631hsEzFZFBFy4n3Ywh5XnCPd811bmOMo2Q@mail.gmail.com>
 <CANCZdfoY-t2hyJ6QRPKyAPjTrV47y5Fk8O3P0EUkwfjbktx5Yg@mail.gmail.com>
 <20170831175120.GM11202@mcvoy.com>
 <CAC20D2NT-z_an3vPsj3F+xLcVOYqnMLFT5FZnMctWmM+23UXyQ@mail.gmail.com>
 <58653222-af68-ba25-bc87-3dc9f36b6c7a@telegraphics.com.au>
 <F08D5B2F-2CD6-4708-A18B-4F3F9F4209E5@cheswick.com>
 <CAC20D2PJvsZiza6AXTK9WFzuHtvHKRsxxfn-n3SFGUcn-AWfQg@mail.gmail.com>
Message-ID: <A9605CA6-964A-4D6E-8107-2C1CC7DACC03@bitblocks.com>

On Aug 31, 2017, at 1:51 PM, Clem Cole <clemc at ccc.com> wrote:
> 
> 
> 
> On Thu, Aug 31, 2017 at 4:37 PM, William Cheswick <ches at cheswick.com <mailto:ches at cheswick.com>> wrote:
> I wrote a plotter driver for the CDC in Pascal.  Brian’s comments were apt: drivers aren’t quite the same as a filter, even a Knuthian-style program.
> 
> I thought the world would end up using some post-Pascal, strongly typed language.  Maybe Oberon or Modula would fix things.  (I don’t think any of a decade’s worth of Pascal programs I wrote ever had a buffer overflow vulnerability.)
> 
> ​ditto, Pascal and Mod-II and Mod-III were pretty slick.   They were a little wordy compared to C, but I admit the programs we wrote in them "just worked" and I can not think any security issues in any that we wrote.

"Just working" and no security issues is something that was/is harder in C (and C++). We continue to pay an enormous cost due to the prevalence of C/C++ programs. May be security was not a big concern in 1983 but buggy programs were already a big issue....

> 
> I look to the likes of go and rust to get us back on track.  C is a pretty good assembly language.
> 
> ​+1
> 
> But Ches, that leaves the open question of what to teach?   My daughter loves it and that's what college taught her, but I cringe when I look at what she and her peeps do with Python.   To me that's more like shell scripting.   Maybe its my inner curmudgeon showing.

IMHO every programmer should learn (and learn well)
a) assembly language. pick one processor architecture. C is not low level enough. This really teaches you the nuts and bolts of how computers actually work.
b) Scheme. This really teaches you prototyping, conceptualizing, experimenting etc. And there are lots of books that use Scheme to teach you programming. Still my goto language for fun!
c) Some newly popular/upcoming compiled language. Go or Rust or Nim or Julia or Erlang or Haskell...

Rationale: a) is bottom up. b) is top down. c) is getting things done. This way they get a broad spectrum programming skill set.

and may be
d) javascript / C++ / Cobol / Java / C -- whatever the market currently desperately wants

> I have not seen anything like Clancy's "Oh Pascal" book in the key of Go, much less Brinch Hansen's "Java for Everyone" ​which I still think are two of the best teaching text out there.

FWIW: I was able to bootstrap 3 highschool grads just with the Kergighan, Donovan Go programming book. With some mentoring in 7 weeks they wrote a car driving simulator (random road map, traffic signals, random number of cars, stopping at lights, waiting to safely turn right or left, zoomable openGL view). They had some prior experience with C/C++ and one knew openGL as well. They actually produced far more code than the our team of regular employees!

Go ecosystem quite well engineered and a joy to use. What newbies need is a "duolingo" for programming!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://minnie.tuhs.org/pipermail/tuhs/attachments/20170831/b5c75616/attachment.html>

