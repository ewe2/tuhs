X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,FREEMAIL_FROM,HTML_MESSAGE,MAILING_LIST_MULTI,
	T_SCC_BODY_TEXT_LINE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 25184 invoked from network); 30 Jan 2022 22:52:58 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 30 Jan 2022 22:52:58 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 477919B9EC; Mon, 31 Jan 2022 08:52:57 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 75063951B7;
	Mon, 31 Jan 2022 08:52:28 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=pass (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.b="DZvHG3xN";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 987E3951B7; Mon, 31 Jan 2022 08:52:24 +1000 (AEST)
Received: from mail-ot1-f51.google.com (mail-ot1-f51.google.com
 [209.85.210.51])
 by minnie.tuhs.org (Postfix) with ESMTPS id 1D1089518E
 for <tuhs@minnie.tuhs.org>; Mon, 31 Jan 2022 08:52:24 +1000 (AEST)
Received: by mail-ot1-f51.google.com with SMTP id
 x52-20020a05683040b400b0059ea92202daso11337103ott.7
 for <tuhs@minnie.tuhs.org>; Sun, 30 Jan 2022 14:52:24 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=/Zi5BalpH53mV5TQJ0ndJDKLqYM1WZUrphXAblgAeVc=;
 b=DZvHG3xNuJ8mqS6Xd2/FWTxKgLF+ENGnBYeFomC0PqjQQJYNkUwNHxZ870a6PbF7v7
 Z8Y2Bi/jVH1swloBfejkKnvw1AenwnEx8W8LFG++Rsy5bjz1pw3sCjNj66HR5zaBAYok
 oxookmFUnudGqBMe4GPgUSt8UnhgTyz6Ea9tg1wnCMcdVJiKpaBMTW0iTEalTPlpx8GP
 9hqXxYVTtOhAyKnc8yU0aHDZUwgfNuNzMb4DodwGHNfhkRStb17YhXMiJWIJ1834ONdb
 QDPxrn836/BdYVtcoE4mRdCkOyFSQbZx3FLnDA8B5+iZytSw21xBYrpdJ4bXbJg6IWJX
 p4yQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=/Zi5BalpH53mV5TQJ0ndJDKLqYM1WZUrphXAblgAeVc=;
 b=SGBz0D1vQ0ZCKUJhuvmrHBuiTdZowIS3kha9001nkb/v/rMu2yKcKGiayDSH6osGSi
 TFbjcSK3T29VD1/Yk3yOt5Ut0jSkGjrZDeXKyc09GIgQ4LygXJPi4ohPeDlyvzeXrXSL
 P/KQ56gZss72k1tpOWnNc1KJJLMZCdyWetfHSLPpxhN+8SOhsJWRD2SVinlJubtR96rs
 5Y/CuZ8NSBq9xyXsaV9MFneWLrUihe8WHUIbE4uRfViY4Ycx6hxARf5X87lg6CYEsMge
 SSX87zN10FgczU3mmIteQnTEwUWJbkP2rsVoiCvOfoQvZmwpgw4YEdRh3pyMP7qhl17M
 Rnfg==
X-Gm-Message-State: AOAM532VHISQd/FBxAr6WIt0pbg+5NMCvuiV7e3j17cdE8uPotbZ4T1e
 5QkcNC9qj1+uoRfK862BubsLI8dgaJaHZpTcekM=
X-Google-Smtp-Source: ABdhPJxdOpCA5ZpCIN0gUYq0vlctTjAcg8RAqtiEEcej4yau2NZ+oMhQKkzxVuYl+7kMWcGo81s7NDceQuo7ZWm3C+g=
X-Received: by 2002:a05:6830:1146:: with SMTP id
 x6mr10041969otq.375.1643583143250; 
 Sun, 30 Jan 2022 14:52:23 -0800 (PST)
MIME-Version: 1.0
References: <0f83f174-eeca-30fb-7b98-77fb0da80f2e@gmail.com>
 <CAC20D2Nh0t9dxVbRvXFxXkCfEaWkmp9MP1Xf+=YC3rfXf3SK3g@mail.gmail.com>
 <9E47A62E-3AAD-491E-9164-3DCAD22EC1F7@kdbarto.org>
 <CAGGBd_r24ODfR9oX_sMHkDWOotz9Bhup=CgDEgC=NNq9BFuNcg@mail.gmail.com>
In-Reply-To: <CAGGBd_r24ODfR9oX_sMHkDWOotz9Bhup=CgDEgC=NNq9BFuNcg@mail.gmail.com>
From: Dan Cross <crossd@gmail.com>
Date: Sun, 30 Jan 2022 17:51:47 -0500
Message-ID: <CAEoi9W6qovywr7KrJtXx5s-MKhC19pj5-VqQ0_1zoT-MaWRdSA@mail.gmail.com>
To: Dan Stromberg <drsalists@gmail.com>
Content-Type: multipart/alternative; boundary="0000000000006990be05d6d485d4"
Subject: Re: [TUHS] Compilation "vs" byte-code interpretation,
 was Re: Looking back to 1981 - what pascal was popular on what unix?
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: TUHS main list <tuhs@minnie.tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--0000000000006990be05d6d485d4
Content-Type: text/plain; charset="UTF-8"

On Sun, Jan 30, 2022 at 1:08 PM Dan Stromberg <drsalists@gmail.com> wrote:

> On Sun, Jan 30, 2022 at 8:58 AM David Barto <david@kdbarto.org> wrote:
>
>> Yes, the UCSD P-code interpreter was ported to 4.1 BSD on the VAX and it
>> ran natively there. I used it on sdcsvax in my senior year (1980).
>>
>
> This reminds me of a question I've had percolating in the back of my mind.
>
> Was USCD Pascal "compiled" or "interpreted" or both?
>

As others have mentioned, both. The compiler generated P-code, which was a
specialized bytecode representation of the compiled Pascal source.

The beauty of this is that it makes porting the system fairly easy; one
need only write a P-code interpreter. Assuming the system ships with a
p-code "binary" representation of the compiler in addition to the sources,
one could make it self-hosting very easily. With a threaded P-code
interpreter, it can also be quite small, making constrained 8-bit
microcomputers (like the Apple II) reasonable targets for Pascal.

This sort of representation also has some interesting properties with
respect to the actual bytecode used; it could, for example, have some
understanding of the semantics of types in the programming language. The
Dis virtual machine for the Limbo programming language used with the
Inferno virtual operating system did this; Dis understood Limbo strings,
whereas this isn't true on most machine architectures.

And is Java?  They both have a byte code interpreter.  Yes, modern Java is
> JIT-compiled, but does that make Java a compiled language in the Oracle
> implementation, or is it an interpreter with a pretty good runtime?
>

Again, both. The compiler emits java bytecodes, which the JVM interprets.

Wasn't Java referred to as "compiled" even back before the JIT compiler was
> added?
>

Yes!

Granted, gcj is compiled.
>

Well, gcj (optionally) compiles to native machine code and comes with a
library that implements the functionality usually provided by the JVM; that
is, it can target a platform other than the JVM and give mostly the same
functionality. But javac and gcj are both very much compilers.

But Oracle's implementation of Java is commonly referred to as a
> "Compiler".  And what about back before Java's JIT compiler was added -
> ISTR recall Java was referred to as a compiled language before the JIT
> addition.
>

This is correct. A compiler simply transforms some representation of data
into a different representation of that same data, possibly with some
semantic loss; the canonical example is textual "source code" for some
programming language translated into object code for some target hardware
architecture, but this need not be the case. We were discussing troff and
TeX the other day; both of these are compilers, in that they take some
high-level source representation of a document and transform it into a
typeset representation. (Note: I mean "semantic loss" in the sense that,
say, we may lose details about types or the organization of data in the
compiled artifact.)

And then there's the CPython implementation of Python.  It too uses a byte
> code interpreter, but it's commonly referred to as "interpreted".  But is
> it really?  Granted, it has an implicit, cached compilation step, but is it
> less compiled for that?
>

I think that "interpreted" in this context means the load-and-go nature of
the system and the transience of the bytecode: the text is internally
compiled and then executed, but these steps are often linked and, while one
can coax the Python "interpreter" to emit .pyc and/or .pyo files, usually
one does not: the compiled bytecodes are lost as soon as the program is
done executing.

Is there consistency here?
>

Not really. As an interesting aside, before Java became widespread I heard
folks mention "P-code" as a generic term for what most folks mean when they
say "bytecode." Now we often just say "bytecode." Similarly with JIT in
lieu of "load and go", though Java's JIT is a bit different (it's
converting from bytecode to native machine code on the fly; it's even more
elaborate when things like hot-spot are taken into account, where the
runtime has a kind of built-in profiler and will optimize particularly
expensive bits of the code over time).

        - Dan C.

--0000000000006990be05d6d485d4
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr">On Sun, Jan 30, 2022 at 1:08 PM Dan Strom=
berg &lt;<a href=3D"mailto:drsalists@gmail.com">drsalists@gmail.com</a>&gt;=
 wrote:</div><div class=3D"gmail_quote"><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);pad=
ding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><div dir=3D"ltr"=
 class=3D"gmail_attr">On Sun, Jan 30, 2022 at 8:58 AM David Barto &lt;<a hr=
ef=3D"mailto:david@kdbarto.org" target=3D"_blank">david@kdbarto.org</a>&gt;=
 wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px =
0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><div>Yes=
, the UCSD P-code interpreter was ported to 4.1 BSD on the VAX and it ran n=
atively there. I used it on sdcsvax in my senior year (1980).</div></blockq=
uote><div><br></div><div>This reminds me of a question I&#39;ve had percola=
ting in the back of my mind.</div><div><br></div><div>Was USCD Pascal &quot=
;compiled&quot; or &quot;interpreted&quot; or both?</div></div></div></bloc=
kquote><div><br></div><div>As others have mentioned, both. The compiler gen=
erated P-code, which was a specialized bytecode representation of the compi=
led Pascal source.</div><div><br></div><div>The beauty of this is that it m=
akes porting the system fairly easy; one need only=C2=A0write a P-code inte=
rpreter. Assuming the system ships with a p-code &quot;binary&quot; represe=
ntation of the compiler in addition to the sources, one could make it self-=
hosting very easily. With a threaded P-code interpreter, it can also be qui=
te small, making constrained 8-bit microcomputers (like the Apple II) reaso=
nable targets for Pascal.</div><div><br></div><div>This sort of representat=
ion also has some interesting properties with respect to the actual bytecod=
e used; it could, for example, have some understanding of the semantics of =
types in the programming language. The Dis virtual machine for the Limbo pr=
ogramming language used with the Inferno virtual operating system did this;=
 Dis understood Limbo strings, whereas this isn&#39;t true on most machine =
architectures.</div><div><br></div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><div>And is Java?=C2=
=A0 They both have a byte code interpreter.=C2=A0 Yes, modern Java is JIT-c=
ompiled, but does that make Java a compiled language in the Oracle implemen=
tation, or is it an interpreter with a pretty good runtime?</div></div></di=
v></blockquote><div><br></div><div>Again, both. The compiler emits java byt=
ecodes, which the JVM interprets.</div><div><br></div><blockquote class=3D"=
gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(20=
4,204,204);padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><d=
iv>Wasn&#39;t Java referred to as &quot;compiled&quot; even back before the=
 JIT compiler was added?</div></div></div></blockquote><div><br></div><div>=
Yes!</div><div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:=
0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">=
<div dir=3D"ltr"><div class=3D"gmail_quote"><div>Granted, gcj is compiled.<=
/div></div></div></blockquote><div><br></div><div>Well, gcj (optionally) co=
mpiles to native machine code and comes with a library that implements the =
functionality usually provided by the JVM; that is, it can target a platfor=
m other than the JVM and give mostly the same functionality. But javac and =
gcj are both very much compilers.</div><div><br></div><blockquote class=3D"=
gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(20=
4,204,204);padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><d=
iv>But Oracle&#39;s implementation of Java is commonly referred to as a &qu=
ot;Compiler&quot;.=C2=A0 And what about back before Java&#39;s JIT compiler=
 was added - ISTR recall Java was referred to as a compiled language before=
 the JIT addition.<br></div></div></div></blockquote><div><br></div><div>Th=
is is correct. A compiler simply transforms some representation of data int=
o a different representation of that same data, possibly with some semantic=
 loss; the canonical example is textual &quot;source code&quot; for some pr=
ogramming language translated into object code for some target hardware arc=
hitecture, but this need not be the case. We were discussing troff and TeX =
the other day; both of these are compilers, in that they take some high-lev=
el source representation of a document and transform it into a typeset repr=
esentation. (Note: I mean &quot;semantic loss&quot; in the sense that, say,=
 we may lose details about types or the organization of data in the compile=
d artifact.)</div><div><br></div><blockquote class=3D"gmail_quote" style=3D=
"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-le=
ft:1ex"><div dir=3D"ltr"><div class=3D"gmail_quote"><div>And then there&#39=
;s the CPython implementation of Python.=C2=A0 It too uses a byte code inte=
rpreter, but it&#39;s commonly referred to as &quot;interpreted&quot;.=C2=
=A0 But is it really?=C2=A0 Granted, it has an implicit, cached compilation=
 step, but is it less compiled for that?</div></div></div></blockquote><div=
><br></div><div>I think that &quot;interpreted&quot; in this context means =
the load-and-go nature of the system and the transience of the bytecode: th=
e text is internally compiled and then executed, but these steps are often =
linked and, while one can coax the Python &quot;interpreter&quot; to emit .=
pyc and/or .pyo files, usually one does not: the compiled bytecodes are los=
t as soon as the program is done executing.</div><div><br></div><blockquote=
 class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px so=
lid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail=
_quote"><div>Is there consistency here?</div></div></div></blockquote><div>=
<br></div><div>Not really. As an interesting aside, before Java became wide=
spread I heard folks mention &quot;P-code&quot; as a generic term for what =
most folks mean when they say &quot;bytecode.&quot; Now we often just say &=
quot;bytecode.&quot; Similarly with JIT in lieu of &quot;load and go&quot;,=
 though Java&#39;s JIT is a bit different (it&#39;s converting from bytecod=
e to native machine code on the fly; it&#39;s even more elaborate when thin=
gs like hot-spot are taken into account, where the runtime has a kind of bu=
ilt-in profiler and will optimize particularly expensive bits of the code o=
ver time).</div><div><br></div><div>=C2=A0 =C2=A0 =C2=A0 =C2=A0 - Dan C.</d=
iv><div>=C2=A0</div></div></div>

--0000000000006990be05d6d485d4--
