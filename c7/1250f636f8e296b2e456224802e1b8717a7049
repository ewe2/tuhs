From: drsalists@gmail.com (Dan Stromberg)
Date: Thu, 15 Feb 2018 19:17:01 -0800
Subject: [TUHS] Happy birthday, Niklaus Wirth!
In-Reply-To: <CAEoi9W51rVASfMjMrK8RhPorWuPNmUa7YYg0Oy56pF6hVaV4Cg@mail.gmail.com>
References: <alpine.BSF.2.21.1802150801090.5573@aneurin.horsfall.org>
 <d718364c-87f4-280e-9bcc-9753493a75a5@telegraphics.com.au>
 <alpine.BSF.2.21.1802161058010.798@aneurin.horsfall.org>
 <CAEoi9W51rVASfMjMrK8RhPorWuPNmUa7YYg0Oy56pF6hVaV4Cg@mail.gmail.com>
Message-ID: <CAGGBd_rn9XZokyX4mSWM_W0Q4v+4MWGCacZ=21rQPzWFZuN2kw@mail.gmail.com>

On Thu, Feb 15, 2018 at 4:51 PM, Dan Cross <crossd at gmail.com> wrote:
> One of the things that strikes me about Lisp and Unix is the conceptual
> similarity between image based languages (like Lisp) with a REPL and the
> Unix "process as virtual machine" model with a shell and set of utilities.
> An image is a sort of virtual machine and a REPL is a sort of shell;
> callable functions in the REPL are sort of like discrete programs in the
> $PATH. To a first order approximation, at any rate.
>
> So anyway...some of you who were there, was there cross-pollination? Was
> Franz Lisp a thing Unix people at Berkeley played with, or was it mostly
> Lisp people who just happened to be using Unix because VAXen were expensive?

I definitely "wasn't there", but it's occurred to me before that
/bin/sh going through a file line by line, is similar to LISP going
through a list element by element.

When I took a "comparative languages" course, the professor said there
were two kinds of languages:
1) Languages that make you add convenience yourself to keep things
fast even though many people don't need the speed
2) Languages that make everyone pay (in performance) for conveniences
many developers will never need

So it's kind of the C vs. LISP thing from a (very) slightly different
perspective.

I still count C and bash among my favorites, but I mostly use Python
these days, and although I haven't done a ton in LISP, Python feels
kind of LISPy semantically - but not syntactically or lexically.  But
that's a happy accident: Python wasn't particularly influence by LISP.

On the other hand, with LISP focused on Linked Lists, and Python
focused on realloc()'d arrays, the similarly isn't especially deep.
But they're both "convenience at the expense of performance, even
though not everyone will need those conveniences".

And yes, there are exceptions.  As has already been mentioned, LISP
has some impressive compilers, and Python has things like Pypy and
Shedskin.

