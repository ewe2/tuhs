From: paul.winalski@gmail.com (Paul Winalski)
Date: Fri, 24 Mar 2017 17:55:14 -0400
Subject: [TUHS] 'Command subcommand ...' history
In-Reply-To: <29D69C88-7B0A-40F9-AF4D-68705E8FC514@tfeb.org>
References: <29D69C88-7B0A-40F9-AF4D-68705E8FC514@tfeb.org>
Message-ID: <CABH=_VRuq54tPXEiRAd7GWnLgCRzaOsVUDVSh5CkMPGhtUPY8A@mail.gmail.com>

On 3/24/17, Tim Bradshaw <tfb at tfeb.org> wrote:
> Lots of tools now seem to use this strategy: there's some kind of wrapper
> which has its own set of commands (which in turn might have further
> subcommands).  So for instance
>
>     git remote add ...

[snip]
>
> Relatedly, does this style originate on some other OS?
>
> --tim

This command style was the standard and encouraged approach on many of
DEC's operating systems.  Digital Command Language (DCL), the command
language for TOPS-20 and VMS, implemented most of the common system
commands this way:  A lot of packages or subsystems, such as mail,
source code control (Code Management System--CMS), and whatnot were
implemented using this design.  The command verb was usually the
package name, and the subcommands implemented functions in that
package.  Very often you could just give the command name and that
entered the package in interactive mode--it would prompt for
subcommands until you exited the subsystem.

I'm pretty sure this command design style was used in VM/CMS and CDC PLATO, too.

-Paul W.

