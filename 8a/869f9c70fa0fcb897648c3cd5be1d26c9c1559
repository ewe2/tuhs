From: milov@cs.uwlax.edu (=?utf-8?Q?Milo_Velimirovi=C4=87?=)
Date: Tue, 6 Jan 2015 13:57:43 -0600
Subject: [TUHS] pdp11 UNIX memory allocation. Was: termcap vs terminfo (was:
	I swear! I rtfm'ed)
In-Reply-To: <201501061222.t06CMvTO027313@freefriends.org>
References: <B32459EF-55AE-4F6F-B2BC-1B80128F38F2@bsdimp.com>
 <3578.1420226008@cesium.clock.org>
 <20150105070613.GB10940@server.rulingia.com>
 <20150106004054.GD16715@mercury.ccil.org>
 <201501061222.t06CMvTO027313@freefriends.org>
Message-ID: <DBC71EB6-B41B-4257-A580-254C613D508E@cs.uwlax.edu>

Bringing a conversation back online.
On Jan 6, 2015, at 6:22 AM, arnold at skeeve.com wrote:

>> Peter Jeremy scripsit:
>>> But you pay for the size of $TERMCAP in every process you run.
> 
> John Cowan <cowan at mercury.ccil.org> wrote:
>> A single termcap line doesn't cost that much, less than a KB in most cases.
> 
> In 1981 terms, this has more weight. On a non-split I/D PDP-11 you only
> have 32KB to start with.  (The discussion a few weeks ago about cutting
> yacc down to size comes to mind…)

(Or even earlier than ’81.) How did pdp11 UNIXes handle per process memory? It’s suggested above that there was a 50-50 split of the 64KB address space between instructions and data. My own recollection is that you got any combination of instruction and data space that was <64KB. This would also be subject to limits of pdp11 memory management unit.

Anyone have a definitive answer or pointer to appropriate man page or source code?


Thanks,
Milo



