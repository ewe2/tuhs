X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=MAILING_LIST_MULTI,
	T_SCC_BODY_TEXT_LINE autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 11591 invoked from network); 22 Feb 2022 00:20:47 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 22 Feb 2022 00:20:47 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 0A5749CC53; Tue, 22 Feb 2022 10:20:45 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 8B1D49CBC6;
	Tue, 22 Feb 2022 10:19:06 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id D147B9CBC6; Tue, 22 Feb 2022 10:19:03 +1000 (AEST)
X-Greylist: delayed 862 seconds by postgrey-1.36 at minnie.tuhs.org;
 Tue, 22 Feb 2022 10:19:02 AEST
Received: from cuzuco.com (v.cuzuco.com [166.84.7.17])
 by minnie.tuhs.org (Postfix) with ESMTP id E98099CB50
 for <tuhs@minnie.tuhs.org>; Tue, 22 Feb 2022 10:19:02 +1000 (AEST)
Received: from localhost (localhost [127.0.0.1])
 by cuzuco.com (8.14.9/8.13.3) with SMTP id 21M02d4g023128;
 Mon, 21 Feb 2022 19:02:57 -0500 (EST)
Date: Mon, 21 Feb 2022 19:02:39 -0500 (EST)
Message-Id: <202202220002.21M02d4g023128@cuzuco.com>
From: Brian Walden <tuhs@cuzuco.com>
To: <tuhs@minnie.tuhs.org>
Subject: [TUHS] Lorinda Cherry
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

I enjoy this dc(1) discussion.  I am a daily dc user, and since my fisrt
calculator was an HP-45 (circa 1973) RPN felt right. However I think
dc pre-dates ALL HP calculators, since there was one in the 1st Edition
written in assembly.

I extened my version of dc (way before gnu existed)
based on common buttons I used from HP calculators:

    CMD    WHAT
    #      comment, to new line
    ~      change sign of top of stack (CHS key)
    |      1/top of stack (1/x key)
    e      push 99 digits of e (2.718..) on the stack
    @      push 99 digits of pi on the stack (looks like a circle)
    r      reverse top of stack (x<>y key)

I had been fascinated with pi stemimg from the Star Trek epsiode Wolf
in the Fold where Spock uses it to usa all computing power

   "Computer, this is a Class A compulsory directive. Compute to
    the last digit the value of pi."

   "As we know, the value of pi is a transcendental figure without
    resolution. The computer banks will work on this problem to the
    exclusion of all else until we order it to stop."

As it was supposed to be "arbitrary precision" here was my tool.

So I wrote Machin formula in dc slowing increasing the scale and printing
the results. In the orginal dc, yes the whole part was arbitrary, but the
decimal part (scale) was limited to 99. Well that became a disappiontment.
(this program is lost to time)

So I decided to rewrite it but increasing pi as a whole numbers instead
of increasing scale (ex. 31415, 314159, 3141592, ... etc)

I still have that program which is simply this --

[sxln_1ll*dsllb*dszli2+dsi5li^*/+dsn4*lelzli239li^*/+dse-dlx!=Q]sQ
1[ddsb5/sn239/se1ddsisllQx4*pclb10*lPx]dsPx


if you run it you'll notice the last 1 to 2 digits are wrong due to precision.

The next problem became small memory. I still have thes saved output before
it crashed at 1024 digits. No idea what specs of the machine it was run
on anymore its really old --

3141592653589793238462643383279502884197169399375105820974944592307816\
4062862089986280348253421170679821480865132823066470938446095505822317\
2535940812848111745028410270193852110555964462294895493038196442881097\
5665933446128475648233786783165271201909145648566923460348610454326648\
2133936072602491412737245870066063155881748815209209628292540917153643\
6789259036001133053054882046652138414695194151160943305727036575959195\
3092186117381932611793105118548074462379962749567351885752724891227938\
1830119491298336733624406566430860213949463952247371907021798609437027\
7053921717629317675238467481846766940513200056812714526356082778577134\
2757789609173637178721468440901224953430146549585371050792279689258923\
5420199561121290219608640344181598136297747713099605187072113499999983\
7297804995105973173281609631859502445945534690830264252230825334468503\
5261931188171010003137838752886587533208381420617177669147303598253490\
4287554687311595628638823537875937519577818577805321712268066130019278\
76611195909216420198938095257201065485862972
out of space: salloc
all 8587356 rel 8587326 headmor 1
nbytes -28318
stk 71154 rd 125364 wt 125367 beg 125364 last 125367
83 11 0
30 IOT trap - core dumped


But I was much happier with that.

On a side note: programming dc is hard. There was no comment character.
And it's a pain to read, and it's a pain to debug.

When I discovered the Chudnovsky algorithm for pi, of course I implemented it
in dc --

[0ksslk3^16lkd12+sk*-lm*lhd1+sh3^/smlx_262537412640768000*sxll545140134+dsllm*lxlnk/ls+dls!=P]sP
7sn[6sk1ddshsxsm13591409dsllPx10005v426880*ls/K3-k1/pcln14+snlMx]dsMx

At 99 digits of scale it ran out in 7 rounds, but now with that limitation
removed and large memeories it just goes on and on.....

-Brian

PS: Thanks for the fast OpenBSD version of dc, Otto.

Otto Moerbeek wrote:
> On Thu, Feb 17, 2022 at 01:44:07PM -0800, Bakul Shah wrote:
>
> > On Feb 17, 2022, at 1:18 PM, Dave Horsfall <dave at horsfall.org> wrote:
> > >
> > > On Thu, 17 Feb 2022, Tom Ivar Helbekkmo via TUHS wrote:
> > >
> > >> Watching the prime number generator (from the Wikipedia page on dc)
> > >> running on the 11/23 is much more entertaining than doing it on the
> > >> modern workstation I'm typing this on:
> > >>
> > >> 2p3p[dl!d2+s!%0=@l!l^!<#]s#[s/0ds^]s@[p]s&[ddvs^3s!l#x0<&2+l.x]ds.x
> > >
> > > Wow...  About 10s on my old MacBook Pro, and I gave up on my ancient
> > > FreeBSD box.
> >
> > That may be because FreeBSD continues computing primes while the MacOS
> > dc gives up after a while!
> >
> > freebsd (ryzen 2700 3.2Ghz): # note: I interrupted dc after a while
> > $ command time dc <<< '2p3p[dl!d2+s!%0=@l!l^!<#]s#[s/0ds^]s@[p]s&[ddvs^3s!l#x0<&2+l.x]ds.x' > xxx
> > ^C       11.93 real        11.79 user         0.13 sys
> > $ wc xxx
> >    47161   47161  319109 xxx
> > $ size `which dc`
> >     text   data     bss      dec       hex   filename
> >   238159   2784   11072   252015   0x3d86f   /usr/bin/dc
> >
> > MacOS (m1 pro, prob. 2Ghz)
> > $ command time dc <<< '2p3p[dl!d2+s!%0=@l!l^!<#]s#[s/0ds^]s@[p]s&[ddvs^3s!l#x0<&2+l.x]ds.x' > xxx
> > time: command terminated abnormally
> >         1.00 real         0.98 user         0.01 sys
> > [2]    37135 segmentation fault  command time dc <<<  > xxx
> > $ wc xxx
> >     7342    7342   42626 xxx
> > $ size `which dc`
> > __TEXT      __DATA  __OBJC  others  dec     hex
> > 32768       16384   0       4295016448      4295065600      100018000
> >
>
> MacOS uses the GNU implementation which has a long standing issue with
> deep recursion. It even cannot handle the tail recursive calls used
> here and will run out of its stack.
>
>       -Otto
