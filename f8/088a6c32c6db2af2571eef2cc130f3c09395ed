From tuhs-bounces@minnie.tuhs.org Tue Nov  6 15:32:03 2018
Return-Path: tuhs-bounces@minnie.tuhs.org
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on inbox.vuxu.org
X-Spam-Level: *
X-Spam-Status: No, score=1.2 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_INVALID,DKIM_SIGNED,FREEMAIL_FORGED_FROMDOMAIN,FREEMAIL_FROM,
	HEADER_FROM_DIFFERENT_DOMAINS,HTML_MESSAGE,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE,SUBJ_ALL_CAPS autolearn=no autolearn_force=no
	version=3.4.2
Received: from minnie.tuhs.org (minnie.tuhs.org [45.79.103.53])
	by inbox.vuxu.org (OpenSMTPD) with ESMTP id b5af8dfa
	for <ml@inbox.vuxu.org>;
	Tue, 6 Nov 2018 15:32:03 +0000 (UTC)
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 2D064A22F1; Wed,  7 Nov 2018 01:32:02 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id 95521A22EF;
	Wed,  7 Nov 2018 01:31:17 +1000 (AEST)
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id E9BA4A215C; Tue,  6 Nov 2018 23:45:05 +1000 (AEST)
Received: from mail-oi1-f179.google.com (mail-oi1-f179.google.com
 [209.85.167.179])
 by minnie.tuhs.org (Postfix) with ESMTPS id 58078A215A
 for <tuhs@minnie.tuhs.org>; Tue,  6 Nov 2018 23:45:00 +1000 (AEST)
Received: by mail-oi1-f179.google.com with SMTP id j202-v6so10700554oih.10
 for <tuhs@minnie.tuhs.org>; Tue, 06 Nov 2018 05:45:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=kjqw8VGlqhAnLhxORRMQmG/pVtmEjBuyJa31VP0GJ90=;
 b=vWXMRN9KRQrdmMI35+WqfIJiplJQssqBQTfBOmHZo0zJlr8rI+JuWKLcQ+4QjjhOnC
 1SmOwsIogjv6LhfU7nGWfLgSjwMyFQYDkoOESmn6BGsGQyD5WMtESyNxlPWDPadw0Cm5
 ZcwT04X/tmvaavqRaRQnefs8MavQc3pWmq8apDV8ACdM6Lq9mLauPIliVIOthSNH2D/2
 w1+ty9cI1fTCI/VSv8Um452WoIxPLQXk6dpx7cGgQqve7U4xmYlocySgnJtGM+A6XMeP
 TbkfNR6/0bfFsvISG3M3lgjClhQCTMhii/ZKT+r+UQNJ8P85BCfGjQU6lzqY8S2CpYUS
 mk5A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=kjqw8VGlqhAnLhxORRMQmG/pVtmEjBuyJa31VP0GJ90=;
 b=rcmKcPqCAZ7m+UFYTm6cLqSTjNXSdd5V/nDbfPeTd4033ImuOy440ZLnzhm4xNrPxk
 j5QVtnW9xilQivHZBSE8WjJYo4tm6LYWjQiDb5r47a2LX8cFTDoCPd2mML7duuBJaSkQ
 zKAPTsNV6NAFZuiymT/6UpYVUyKgeIpWNGG8ZL3GVu5KlTcum9wbvjyF2B4M3aagx1IW
 tib+d0TuCChL4s4v47hICsJLyTE9EiQKec6Ua7GW1emq/GPxZ8RpGXIoh1T7m7Sda/m+
 3Cq6nP/e5LIP5ApaF9KJLL1g16EgcqbjEP9R3jzZvzF4C0tYT+FUoQks9Mxr3s0n4LLE
 /rdg==
X-Gm-Message-State: AGRZ1gI4SvalYUtI+iskcEANONiAYM/xY2KCAPoa1vYXopcRHnDIel1Q
 QKh8LstlMkXFDNzhQDtBwvytFszWR86m9ujDBPQ3uVl2
X-Google-Smtp-Source: AJdET5dYZ7btKmZkqfcQw+BjgGXKpGWiGVLKUgFpqTuRJJuCwL5V8pnW/7q3koDzVXN7+yjRoddCtfLIQCsl7HtoRJE=
X-Received: by 2002:aca:853:: with SMTP id
 80-v6mr14678231oii.333.1541511899525; 
 Tue, 06 Nov 2018 05:44:59 -0800 (PST)
MIME-Version: 1.0
References: <f99e4c98-d584-d823-a581-0d6c3b9c3420@spamtrap.tnetconsulting.net>
 <alpine.DEB.2.20.1811051132410.13752@mira.opentrend.net>
 <c710dafc-9edc-cd29-3aeb-dc0fa6badeff@spamtrap.tnetconsulting.net>
 <CAPWNY8WqB0fO=a_sNq5NezO7xh3-c4iO3gyoFUZXk5e7=v179w@mail.gmail.com>
 <0289fa26-d157-8a65-389e-61dd7a01fcc4@spamtrap.tnetconsulting.net>
 <D1834A80-1F31-4F16-9AC2-E6004E3AE4E6@cogs.com>
 <CAPWNY8WH09se3ZiJOsYYNBJGzgR7wgdA0tScKq3DFxRnEjCWBg@mail.gmail.com>
 <A75BA761-85C8-4062-9F49-26870AF51884@cogs.com>
In-Reply-To: <A75BA761-85C8-4062-9F49-26870AF51884@cogs.com>
From: =?UTF-8?Q?Mantas_Mikul=C4=97nas?= <grawity@gmail.com>
Date: Tue, 6 Nov 2018 15:44:47 +0200
Message-ID: <CAPWNY8WqaFQ1=gD-tLbrgb6hYSz1O7nS_E+ZeSfJ1P9idqLzZA@mail.gmail.com>
To: ben@cogs.com
Content-Type: multipart/alternative; boundary="0000000000003038a50579ff3537"
Subject: Re: [TUHS] YP / NIS / NIS+ / LDAP
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.20
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: tuhs@minnie.tuhs.org, gtaylor@tnetconsulting.net
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--0000000000003038a50579ff3537
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Tue, Nov 6, 2018 at 3:21 PM Ben Greenfield <ben@cogs.com> wrote:

>
>
> On Nov 6, 2018, at 1:53 AM, Mantas Mikul=C4=97nas <grawity@gmail.com> wro=
te:
>
> On Tue, Nov 6, 2018, 01:32 Ben Greenfield via TUHS <tuhs@minnie.tuhs.org>
> wrote:
>
>>
>>
>> > On Nov 5, 2018, at 2:36 PM, Grant Taylor via TUHS <tuhs@minnie.tuhs.or=
g>
>> wrote:
>> >
>> > On 11/05/2018 12:24 AM, Mantas Mikul=C4=97nas wrote:
>> >> Let the client handle authentication via Kerberos
>> >
>> > I don't know enough about Kerberos (yet) to know if it would be
>> possible for a login process to communicate with the KDC and get a TGT a=
s
>> part of logging in, without already being logged in.
>> >
>> > My ignorance is leaving me with a priming problem that seems like a
>> catch 22.  You can't login without shadow information or TGT.  But
>> traditional (simpler) kinit is run after being logged in.  So ... how do
>> you detangle that?  The only thing that I can come up with is that the
>> login process does the kinit functionality on the users behalf.
>>
>> I found that I had to do all of this using SASL.
>>
>>
>> I remember it as SASL would handle the kerberization during boot up
>> getting tickets for each LDAP entry that you wanted mapped to a service =
on
>> that client.
>>
>
> Sorry but I cannot parse that sentence at all=E2=80=A6
>
>
>
> I=E2=80=99m sorry it was about 8 years ago and is from memory but. I beli=
eve
> during the startup of the system the SASL config files contained tickets
> that established a trust relationship between that system and our Open
> Directory server. My memory is that each ticket was associated a service
> and the config file for the service  would point to the ticket.
>
>
>> I could be wrong but I think SASL seems to be way connect services on
>> Linux with LDAP that are served kerberized.
>>
>
> SASL is involved somewhat, in that it does help with implementing Kerbero=
s
> =E2=80=93 services and clients can call libsasl instead of talking Kerber=
os
> directly, abstract away the complexity =E2=80=93 but that's all it is, an
> abstraction layer. (A quite useful one, though.)
>
> But it's not the only method, strictly speaking (e.g. SSH and HTTP use
> GSSAPI, and various older software use Kerberos directly). And as far as =
I
> could understand the previous paragraph =E2=80=93 it doesn't have anythin=
g specific
> about "kerberization during boot up=E2=80=9D.
>
>
> My memory could be wrong but I thought to establish the trust relationshi=
p
> between the kerberized server and the client happened during boot/when th=
e
> config files were read ticket granting tickets were given and received.
>

No, kerberized servers don't obtain own tickets =E2=80=93 unless they thems=
elves
act as *clients* to another kerberized service.

Trust relationships between the server and KDC (as well as between the
client and KDC) are just based on it knowing the same shared secret as the
KDC does. For clients that's the password, for server's that's usually the
raw key in /etc/krb5.keytab.

As for the trust relationship between client and server =E2=80=93 if I reme=
mber the
protocol correctly, at this point it becomes asymmetric. When a client
sends its ticket to the server, the server will just decrypt it using its
own key (keytab) without any KDC involvement. On success, it knows that
it's a legitimate ticket because only the KDC could have encrypted it =E2=
=80=93
whereas the client knows that only the real server will be able to decrypt
it.

The main reason a server might obtain tickets on boot is because it *also*
acts as client to another kerberized service. (For example, a web server
might be a client of a fileserver. An SSH shell server might be a client of
an LDAP directory server.)

--=20
Mantas Mikul=C4=97nas

--0000000000003038a50579ff3537
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div class=3D"gmail_quote"><div dir=3D"lt=
r">On Tue, Nov 6, 2018 at 3:21 PM Ben Greenfield &lt;<a href=3D"mailto:ben@=
cogs.com">ben@cogs.com</a>&gt; wrote:<br></div><blockquote class=3D"gmail_q=
uote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,2=
04);padding-left:1ex"><div style=3D"overflow-wrap: break-word;"><br><div><b=
r><blockquote type=3D"cite"><div>On Nov 6, 2018, at 1:53 AM, Mantas Mikul=
=C4=97nas &lt;<a href=3D"mailto:grawity@gmail.com" target=3D"_blank">grawit=
y@gmail.com</a>&gt; wrote:</div><br class=3D"gmail-m_3358076779738040198App=
le-interchange-newline"><div><div dir=3D"ltr" style=3D"font-family:Helvetic=
a;font-size:12px;font-style:normal;font-variant-caps:normal;font-weight:nor=
mal;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:n=
one;white-space:normal;word-spacing:0px;text-decoration:none"><div class=3D=
"gmail_quote"><div dir=3D"ltr">On Tue, Nov 6, 2018, 01:32 Ben Greenfield vi=
a TUHS &lt;<a href=3D"mailto:tuhs@minnie.tuhs.org" target=3D"_blank">tuhs@m=
innie.tuhs.org</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" st=
yle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padd=
ing-left:1ex"><br><br>&gt; On Nov 5, 2018, at 2:36 PM, Grant Taylor via TUH=
S &lt;<a href=3D"mailto:tuhs@minnie.tuhs.org" target=3D"_blank">tuhs@minnie=
.tuhs.org</a>&gt; wrote:<br>&gt;<span class=3D"gmail-m_3358076779738040198A=
pple-converted-space">=C2=A0</span><br>&gt; On 11/05/2018 12:24 AM, Mantas =
Mikul=C4=97nas wrote:<br>&gt;&gt; Let the client handle authentication via =
Kerberos<br>&gt;<span class=3D"gmail-m_3358076779738040198Apple-converted-s=
pace">=C2=A0</span><br>&gt; I don&#39;t know enough about Kerberos (yet) to=
 know if it would be possible for a login process to communicate with the K=
DC and get a TGT as part of logging in, without already being logged in.<br=
>&gt;<span class=3D"gmail-m_3358076779738040198Apple-converted-space">=C2=
=A0</span><br>&gt; My ignorance is leaving me with a priming problem that s=
eems like a catch 22.=C2=A0 You can&#39;t login without shadow information =
or TGT.=C2=A0 But traditional (simpler) kinit is run after being logged in.=
=C2=A0 So ... how do you detangle that?=C2=A0 The only thing that I can com=
e up with is that the login process does the kinit functionality on the use=
rs behalf.<br><br>I found that I had to do all of this using SASL.<span cla=
ss=3D"gmail-m_3358076779738040198Apple-converted-space">=C2=A0</span><br><b=
r><br>I remember it as SASL would handle the kerberization during boot up g=
etting tickets for each LDAP entry that you wanted mapped to a service on t=
hat client.<br></blockquote></div><div><br></div><div>Sorry but I cannot pa=
rse that sentence at all=E2=80=A6</div></div></div></blockquote><div><br></=
div><div><br></div><div>I=E2=80=99m sorry it was about 8 years ago and is f=
rom memory but. I believe during the startup of the system the SASL config =
files contained tickets that established a trust relationship between that =
system and our Open Directory server. My memory is that each ticket was ass=
ociated a service and the config file for the service =C2=A0would point to =
the ticket.</div><div><br></div><blockquote type=3D"cite"><div><div dir=3D"=
ltr" style=3D"font-family:Helvetica;font-size:12px;font-style:normal;font-v=
ariant-caps:normal;font-weight:normal;letter-spacing:normal;text-align:star=
t;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px;t=
ext-decoration:none"><div class=3D"gmail_quote"><blockquote class=3D"gmail_=
quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,=
204);padding-left:1ex"><br>I could be wrong but I think SASL seems to be wa=
y connect services on Linux with LDAP that are served kerberized.<br></bloc=
kquote><div>=C2=A0</div></div><div>SASL is involved somewhat, in that it do=
es help with implementing Kerberos =E2=80=93 services and clients can call =
libsasl instead of talking Kerberos directly, abstract away the complexity =
=E2=80=93 but that&#39;s all it is, an abstraction layer. (A quite useful o=
ne, though.)</div><div><br></div><div>But it&#39;s not the only method, str=
ictly speaking (e.g. SSH and HTTP use GSSAPI, and various older software us=
e Kerberos directly). And as far as I could understand the previous paragra=
ph =E2=80=93 it doesn&#39;t have anything specific about &quot;kerberizatio=
n during boot up=E2=80=9D.</div></div></div></blockquote></div><div><br></d=
iv><div>My memory could be wrong but I thought to establish the trust relat=
ionship between the kerberized server and the client happened during boot/w=
hen the config files were read ticket granting tickets were given and recei=
ved.=C2=A0</div></div></blockquote><div><br></div><div>No, kerberized serve=
rs don&#39;t obtain own tickets =E2=80=93 unless they themselves act as *cl=
ients* to another kerberized service.</div><div><br></div><div>Trust relati=
onships between the server and KDC (as well as between the client and KDC) =
are just based on it knowing the same shared secret as the KDC does. For cl=
ients that&#39;s the password, for server&#39;s that&#39;s usually the raw =
key in /etc/krb5.keytab.</div><div><br></div><div>As for the trust relation=
ship between client and server =E2=80=93 if I remember the protocol correct=
ly, at this point it becomes asymmetric. When a client sends its ticket to =
the server, the server will just decrypt it using its own key (keytab) with=
out any KDC involvement. On success, it knows that it&#39;s a legitimate ti=
cket because only the KDC could have encrypted it =E2=80=93 whereas the cli=
ent knows that only the real server will be able to decrypt it.</div></div>=
<div><br></div><div>The main reason a server might obtain tickets on boot i=
s because it *also* acts as client to another kerberized service. (For exam=
ple, a web server might be a client of a fileserver. An SSH shell server mi=
ght be a client of an LDAP directory server.)</div><div><br></div>-- <br><d=
iv dir=3D"ltr" class=3D"gmail_signature"><div dir=3D"ltr">Mantas Mikul=C4=
=97nas</div></div></div></div>

--0000000000003038a50579ff3537--
