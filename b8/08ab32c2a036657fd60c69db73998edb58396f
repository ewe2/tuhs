X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on inbox.vuxu.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.7 required=5.0 tests=DKIM_INVALID,DKIM_SIGNED,
	HTML_MESSAGE,MAILING_LIST_MULTI,RCVD_IN_DNSWL_NONE,URIBL_SBL_A
	autolearn=ham autolearn_force=no version=3.4.4
Received: (qmail 31200 invoked from network); 4 Feb 2021 01:20:54 -0000
Received: from minnie.tuhs.org (45.79.103.53)
  by inbox.vuxu.org with ESMTPUTF8; 4 Feb 2021 01:20:54 -0000
Received: by minnie.tuhs.org (Postfix, from userid 112)
	id 55E999C94B; Thu,  4 Feb 2021 11:20:54 +1000 (AEST)
Received: from minnie.tuhs.org (localhost [127.0.0.1])
	by minnie.tuhs.org (Postfix) with ESMTP id CBFFD9C0A7;
	Thu,  4 Feb 2021 11:20:19 +1000 (AEST)
Authentication-Results: minnie.tuhs.org;
	dkim=fail reason="signature verification failed" (1024-bit key; unprotected) header.d=ccc.com header.i=@ccc.com header.b="YwbADqsk";
	dkim-atps=neutral
Received: by minnie.tuhs.org (Postfix, from userid 112)
 id 655119C0A7; Thu,  4 Feb 2021 11:20:18 +1000 (AEST)
Received: from mail-qt1-f180.google.com (mail-qt1-f180.google.com
 [209.85.160.180])
 by minnie.tuhs.org (Postfix) with ESMTPS id 7E3489BA40
 for <tuhs@tuhs.org>; Thu,  4 Feb 2021 11:20:17 +1000 (AEST)
Received: by mail-qt1-f180.google.com with SMTP id e11so1299933qtg.6
 for <tuhs@tuhs.org>; Wed, 03 Feb 2021 17:20:17 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=ccc.com; s=google;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc; bh=f8ucL4mkMIxTFa4ePvZpnZb6hz8PXbhjHVhRg5+SGHs=;
 b=YwbADqskgR4yovYteRCyR7VNqExOeAfK+FsAd37e7yFBS7ZrhB+AhcYONFIoBvdayS
 0amdZA4GN9Uv0VNKUGng4SOdx9Fl4SAFakRrara0rW+bBB6WEHOV8sctWkez1aAmLUNS
 btStPLZPNjcQY3xKsSRLKiupT1YlbqRTb4HBU=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=f8ucL4mkMIxTFa4ePvZpnZb6hz8PXbhjHVhRg5+SGHs=;
 b=bc2OXotntvzfzBkhkg4pY3B53jd6D3SXcDu0bc1SLElNA3YwKwrcK4X7vBwGExAX3z
 JXJkMf/V0BFZ1+6KwA/SPjrbF31l3D/ksB+wUufExzJfYpXA9gL34LjgcJGveI3UuLXP
 xIfi/fvhLy9hMxwDO0r7ctem06XGgsfLSSlOjU5heOysrhPxGAGk6PWrz8sicSsl6OjW
 2IobqX0FvfRCfUYFZQuYHdFe5ey2sMKoLgkSHIcTC3NXIfBDL1OBjNzHiDYIpKBoQ1Vw
 KLYg9uvyxbCYBAGItMmN1UoA+d7/sj1UkexY4meLE3/biNZbJ6GHOHEewoQkwrcgn2eJ
 V/9A==
X-Gm-Message-State: AOAM532nx5FQmFfkyXRHYiwsz9jynDHzx2M0HyUve7ZN8PtMhZpC14G0
 3lbOTYUpLTWb0Gw3GmSjNJBMWCGHBeYMxreHpLwV9Q==
X-Google-Smtp-Source: ABdhPJxUs4t3XioC9TifKf69dooQ/iWJHupAIx45xpV2kNKhMl3EDT8DXOqP0mwyDbAE6p2JCkUNBzDF65zc38C8WN0=
X-Received: by 2002:aed:2f86:: with SMTP id m6mr5033298qtd.253.1612401616181; 
 Wed, 03 Feb 2021 17:20:16 -0800 (PST)
MIME-Version: 1.0
References: <E1l5RL3-0002iv-Qv@tanda>
 <abf50209-5730-f5a0-0fd6-aec13ee68440@e-bbes.com>
 <202102030759.1137x7C2013543@freefriends.org>
 <CAHTagfHdykiYmqPCkhQkUQTU8fLqJBukPOyj-k1ef=Ur9rqH+Q@mail.gmail.com>
 <202102030858.1138wuqd011051@freefriends.org>
 <CAHTagfGOC7vgE2Os+kuP4oGzvot2kG3MERpQdLb2EoEhUoFpyg@mail.gmail.com>
 <CAC20D2M_33YdQyuHdb7EM-UVNcdM0TXz9eJXpTftHekWxK0=Dg@mail.gmail.com>
 <27567.1612399305@hop.toad.com>
 <CAC20D2NdDsGK2Y1y1kSMCGr+X047DDou3i76iBPhD9=AGK0pCg@mail.gmail.com>
In-Reply-To: <CAC20D2NdDsGK2Y1y1kSMCGr+X047DDou3i76iBPhD9=AGK0pCg@mail.gmail.com>
From: Clem Cole <clemc@ccc.com>
Date: Wed, 3 Feb 2021 20:20:05 -0500
Message-ID: <CAC20D2MkzfqfY_LK3tswB7Q5w_pddeYpDdvTaQuCX7rLZxu3zg@mail.gmail.com>
To: John Gilmore <gnu@toad.com>
Content-Type: multipart/alternative; boundary="0000000000009167ed05ba78811a"
Subject: Re: [TUHS] 68k prototypes & microcode
X-BeenThere: tuhs@minnie.tuhs.org
X-Mailman-Version: 2.1.26
Precedence: list
List-Id: The Unix Heritage Society mailing list <tuhs.minnie.tuhs.org>
List-Unsubscribe: <https://minnie.tuhs.org/cgi-bin/mailman/options/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=unsubscribe>
List-Archive: <http://minnie.tuhs.org/pipermail/tuhs/>
List-Post: <mailto:tuhs@minnie.tuhs.org>
List-Help: <mailto:tuhs-request@minnie.tuhs.org?subject=help>
List-Subscribe: <https://minnie.tuhs.org/cgi-bin/mailman/listinfo/tuhs>,
 <mailto:tuhs-request@minnie.tuhs.org?subject=subscribe>
Cc: UNIX Heritage Society <tuhs@tuhs.org>
Errors-To: tuhs-bounces@minnie.tuhs.org
Sender: "TUHS" <tuhs-bounces@minnie.tuhs.org>

--0000000000009167ed05ba78811a
Content-Type: text/plain; charset="UTF-8"

Bad iPhone autocorrect sigh...


They all ran the AVTs on the TTL prototype.



On Wed, Feb 3, 2021 at 8:14 PM Clem Cole <clemc@ccc.com> wrote:

> Hey John.  Bad cut/paste.  I did not say 1980.  That was from Eds msg. I
> said we got what would become X series parts in winter 79.    As I
> understand it from Les; he, Nick and Tom built try the TTL prototype in
> Early 78 with Les and Tom turning it into Si later that year while Nick was
> writing ucode and all of the writing AVTs we high ran against then TTL
> system.
>
> Les says Tom did a masterful job of keeping management out of their hair
> such they they stayed under the radar.
>
> From what I understand there was so much focus on countering the Z80 with
> the 6809 that management thought they were just experimenting with a more
> 16 bit 6809.    But what they were doing was an AD experiment.  The fact
> that it worked was amazing.
>
> On Wed, Feb 3, 2021 at 7:41 PM John Gilmore <gnu@toad.com> wrote:
>
>> Clem Cole <clemc@ccc.com> wrote:
>> > > MC 68K was created in 1980 or thereabouts.
>>
>> Wikimedia Commons has a pic of a 1979 XC68000L:
>>
>>   https://commons.wikimedia.org/wiki/File:XC68000.agr.jpg
>>   https://en.wikipedia.org/wiki/File:XC68000.agr.jpg
>>
>> After a USENET posting pointed me at them, I browsed the Sunnyvale
>> Patent Library to bring home the patents for the Motorola 68000.  They
>> include a full listing of the entire microcode!  I ended up copying it,
>> taping the sheets together to reconstitute Nick Tredennick's
>> large-format "hardware flowcharts", and hanging them in the hallway near
>> my office at Sun.  Fascinating!
>>
>> I never saw X68000 parts; Sun started in 1981, so Moto had production
>> parts by then.  But Sun did get early prototypes of the 68010, which we
>> were very happy for, since we and our customers were running a swapping
>> Unisoft UNIX because the 68000 couldn't do paging and thus couldn't run
>> the BSD UNIX that we were porting from the Vax.  Later, I was part of
>> the Sun bringup team using the XC68020.  We built a big spider-like
>> daughterboard adapter that would let it be plugged into a 64-pin 68010
>> socket, so we could debug the 68020 in a Sun-2 CPU board while building
>> 32-bit-wide boards for the Sun-3 bringup.  We had it successfully
>> running UNIX within a day of receiving it!  (We later heard that our
>> Moto rep was intending to give that precious early part to another
>> customer, but decided during their meeting with us to give it to us,
>> because we were so ready to get it running.)
>>
>> When the 68000 was announced, it was obviously head-and-shoulders better
>> than the other clunky 8-bit and 16-bit systems, with a clean 32-bit
>> architecture and a large address space.  It seems like the designers of
>> the other chips (e.g. the 8088) had never actually worked with real
>> computers (mainframes and minicomputers) and kept not-learning from
>> computing history.
>>
>> Some of my early experience was in APL implementation on the IBM 360
>> series.  I knew the 68000 would be a great APL host, since its
>> autoincrement addressing was perfect for implementing vector operations.
>> In the process of designing an APL for it (which was never built), I
>> wrote up a series of short suggestions to Motorola on how to improve the
>> design.  This was published in Computer Architecture News.  For the
>> 68010 they actually did one of the ideas, the "loop mode" that would
>> detect a 1-instruction backward decrement-and-branch loop, and stop
>> continually re-fetching the two instructions.  This made
>> memory-to-memory or register-vs-memory instruction loops run at almost
>> the speed of memory, which was a big improvement for bcopy, bzero,
>> add-up-a-vector-of-integers, etc.
>>
>> I'll append a USENET posting about the 68000 patents, followed by my
>> addendum after visiting the Patent office.
>>
>>         John
>>
>> From decwrl!decvax!harpo!npoiv!npois!houxm!houxa!houxk!tdl (T.LOVETT) Tue
>> Mar 15 16:55:28 1983
>> Subject: 68000: 16 bits. With references
>> Newsgroups: net.micro.68k
>>
>> With due respect to Henry Spencer I feel that I must correct
>> some of his statements regarding the 68000. He is correct in
>> saying that the 68000 is basically 16 bits wide; however,
>> his explanation of the segmented bus is incorrect.
>>
>> The datapath of the 68000 is divided into three pieces, each of
>> which has two busses, address and data, running through it. Six
>> busses total. There are muxes which can be switched so that all
>> address busses are connected and all data busses are connected.
>> The three sections of the datapath are the data section
>> (includes low 16 bits of all data registers and ALU), the
>> "low" section (contains the low 16 bits of address registers and
>> the low half of the Address Adder(AAU)), and the "high" section
>> (contains high 16 bits of all address and data registers and
>> the upper half of the AAU).
>>
>> Theoretically they could do 6 16 bit transfers simultaneously,
>> but in looking through the microcode I don't remember seeing more
>> than three transfers at a time. The "low" and "high" sections can
>> be cascaded to provide a 32 bit arithmetic unit for address
>> calculations. 32 bit data calculations must be done in two passes through
>> the ALU.
>>
>> For the masochists out there, you can learn more than you ever wanted
>> to know about the 68000 by reading Motorola's patents on it. They are
>> available for some nominal fee (~ one dollar) from the Office
>> of Patents and Trademarks in Arlington. The relevant patents are:
>>
>> 1 - #4,307,445 "Microprogrammed Control Apparatus Having a Two
>>         Level Control Store for Data Processor", Tredennick, et al.
>>
>>         First design of 68000 which was scrapped?
>>
>> 2 - #4,296,469 "Execution Unit for Data Processor using Segmented
>>         Bus structure", Gunter, et al.
>>
>>         All about the 16 bit data path
>>
>> 3 - #4,312,034 "ALU and Condition Code Control Unit for Data Processor",
>>         Gunter, et al.
>>
>>         Boring.
>>
>> 4 - #4,325,121 "Two-Level Control Store for Microprogrammed Data
>> Processor",
>>         Gunter et al.
>>
>>         Bonanza! Full of block diagrams and everything you ever wanted
>>         to know. Includes complete listing of microcode with
>>         Tredennick's "hardware flowcharts".
>>
>> Hope this clears things up.
>>
>> Tom Lovett BTL Holmdel  harpo!houxk!tdl  201-949-0056
>>
>>
>> My [gnu] notes on additional 68000 patents:
>>
>> Pat #           Appl #  Filed date      Issued date     Inventors
>>
>> 4,338,661       041,201 May 21, 1979    Jul 6, 1982
>>                 Tredennick & Gunter
>>         Conditional Branch Unit for Microprogrammed Data Processor
>>
>> 4,342,078       041,202 May 21, 1979    Jul 27, 1982
>>                 Tredennick & Gunter
>>         Instruction Register Sequence Decoder for Microprogrammed
>>         Data Processor and Method
>>
>> 4,312,034       041,203 May 21, 1979    Jan 19, 1982
>>                 Gunter, Hobbs, Spak, Tredennick
>>         ALU and Condition Code Control Unit for Data Processor
>>
>> 4,325,121       041,135 May 21, 1979    Apr 13, 1982
>>                 Gunter, Tredennick
>>         Two-Level Control Store for Microprogrammed Data Processor
>>                 Bonanza! Full of block diagrams and everything you ever
>> wanted
>>                 to know. Includes complete listing of microcode with
>>                 Tredennick's "hardware flowcharts".
>>
>> 4,296,469       961,798 Nov 17, 1978    Oct 20, 1981
>>                 Gunter, Tredennick, McAlister
>>         Execution Unit for Data Processor Using Segmented Bus Structure
>>                 All about the 16 bit data path
>>
>> 4,348,722       136,845 Apr 3, 1980     Sep 7, 1982
>>                 Gunter, Crudele, Zolnowsky, Mothersole
>>         Bus Error Recognition for Microprogrammed Data Processor
>>
>> 4,349,873       136,593 Apr 2, 1980     Sep 14, 1982
>>                 Gunter, Zolnowsky, Crudele
>>         Microprocessor Interrupt Processing
>>
>> 4,524,415       447,721 Dec 7, 1982     Jun 18, 1985
>>                 Mills, Moyer, MacGregor, Zolnowsky
>>         Virtual Machine Data Processor
>>                 68010 changes to 68000
>>
>> 4,348,741       169,558 Jul 17, 1980    Sep 7, 1982
>>                 McAlister, Gunter, Spak, Schriber
>>         Priority Encoder
>>                 Used to decode the bit masks for MOVEM.
>>
>> XXXXXXXXX       446,801 Dec 7, 1982
>>                 Crudele, Zolnowsky, Moyer, MacGregor
>>         Virtual Memory Data Processor
>>
>> XXXXXXXXX       447,600 Dec 7, 1982
>>                 MacGregor, Moyer, Mills Jr, Zolnowsky
>>         Data Processor Version Validation
>>                 About how bus errors store a CPU mask version # to
>>                 prevent their being restarted on a different CPU mask
>>                 in a multiprocessor system
>>
>> XXXXXXXXX       961,796 Nov 17, 1978
>>                 Tredennick et al
>>         Microprogrammed Control Apparatus for Data Processor
>>                 (continued into 4,325,121, probably never issued)
>>
>> XXXXXXXXX       961,797 Nov 17, 1978
>>                 McAlister et al
>>         Multi-port RAM Structure for Data Processor Registers
>>
>> 4,307,445       961,796 Nov 17, 1978
>>                 Tredennick, et al
>>         Microprogrammed Control Apparatus Having a Two Level
>>         Control Store for Data Processor
>>                 First design of 68000 which was scrapped?
>>
>> --
> Sent from a handheld expect more typos than usual
>
-- 
Sent from a handheld expect more typos than usual

--0000000000009167ed05ba78811a
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"auto">Bad iPhone autocorrect sigh...</div><div dir=3D"auto"><br=
></div><div dir=3D"auto"><br></div><div dir=3D"auto">They all ran the AVTs =
on the TTL prototype.</div><div dir=3D"auto"><br></div><div dir=3D"auto"><b=
r></div><div dir=3D"auto"><br><div class=3D"gmail_quote" dir=3D"auto"><div =
dir=3D"ltr" class=3D"gmail_attr">On Wed, Feb 3, 2021 at 8:14 PM Clem Cole &=
lt;<a href=3D"mailto:clemc@ccc.com">clemc@ccc.com</a>&gt; wrote:<br></div><=
blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
 #ccc solid;padding-left:1ex"><div dir=3D"auto">Hey John.=C2=A0 Bad cut/pas=
te.=C2=A0 I did not say 1980.=C2=A0 That was from Eds msg. I said we got wh=
at would become X series parts in winter 79. =C2=A0 =C2=A0As I understand i=
t from Les; he, Nick and Tom built try the TTL prototype in Early 78 with L=
es and Tom turning it into Si later that year while Nick was writing ucode =
and all of the writing AVTs we high ran against then TTL system.=C2=A0</div=
><div dir=3D"auto"><br></div><div dir=3D"auto">Les says Tom did a masterful=
 job of keeping management out of their hair such they they stayed under th=
e radar. =C2=A0</div><div dir=3D"auto"><br></div><div dir=3D"auto">From wha=
t I understand there was so much focus on countering the Z80 with the 6809 =
that management thought they were just experimenting with a more 16 bit 680=
9. =C2=A0 =C2=A0But what they were doing was an AD experiment.=C2=A0 The fa=
ct that it worked was amazing. =C2=A0=C2=A0</div><div><br><div class=3D"gma=
il_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Wed, Feb 3, 2021 at 7:41=
 PM John Gilmore &lt;<a href=3D"mailto:gnu@toad.com" target=3D"_blank">gnu@=
toad.com</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D=
"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Clem Cole &=
lt;<a href=3D"mailto:clemc@ccc.com" target=3D"_blank">clemc@ccc.com</a>&gt;=
 wrote:<br>
&gt; &gt; MC 68K was created in 1980 or thereabouts.<br>
<br>
Wikimedia Commons has a pic of a 1979 XC68000L:<br>
<br>
=C2=A0 <a href=3D"https://commons.wikimedia.org/wiki/File:XC68000.agr.jpg" =
rel=3D"noreferrer" target=3D"_blank">https://commons.wikimedia.org/wiki/Fil=
e:XC68000.agr.jpg</a><br>
=C2=A0 <a href=3D"https://en.wikipedia.org/wiki/File:XC68000.agr.jpg" rel=
=3D"noreferrer" target=3D"_blank">https://en.wikipedia.org/wiki/File:XC6800=
0.agr.jpg</a><br>
<br>
After a USENET posting pointed me at them, I browsed the Sunnyvale<br>
Patent Library to bring home the patents for the Motorola 68000.=C2=A0 They=
<br>
include a full listing of the entire microcode!=C2=A0 I ended up copying it=
,<br>
taping the sheets together to reconstitute Nick Tredennick&#39;s<br>
large-format &quot;hardware flowcharts&quot;, and hanging them in the hallw=
ay near<br>
my office at Sun.=C2=A0 Fascinating!<br>
<br>
I never saw X68000 parts; Sun started in 1981, so Moto had production<br>
parts by then.=C2=A0 But Sun did get early prototypes of the 68010, which w=
e<br>
were very happy for, since we and our customers were running a swapping<br>
Unisoft UNIX because the 68000 couldn&#39;t do paging and thus couldn&#39;t=
 run<br>
the BSD UNIX that we were porting from the Vax.=C2=A0 Later, I was part of<=
br>
the Sun bringup team using the XC68020.=C2=A0 We built a big spider-like<br=
>
daughterboard adapter that would let it be plugged into a 64-pin 68010<br>
socket, so we could debug the 68020 in a Sun-2 CPU board while building<br>
32-bit-wide boards for the Sun-3 bringup.=C2=A0 We had it successfully<br>
running UNIX within a day of receiving it!=C2=A0 (We later heard that our<b=
r>
Moto rep was intending to give that precious early part to another<br>
customer, but decided during their meeting with us to give it to us,<br>
because we were so ready to get it running.)<br>
<br>
When the 68000 was announced, it was obviously head-and-shoulders better<br=
>
than the other clunky 8-bit and 16-bit systems, with a clean 32-bit<br>
architecture and a large address space.=C2=A0 It seems like the designers o=
f<br>
the other chips (e.g. the 8088) had never actually worked with real<br>
computers (mainframes and minicomputers) and kept not-learning from<br>
computing history.<br>
<br>
Some of my early experience was in APL implementation on the IBM 360<br>
series.=C2=A0 I knew the 68000 would be a great APL host, since its<br>
autoincrement addressing was perfect for implementing vector operations.<br=
>
In the process of designing an APL for it (which was never built), I<br>
wrote up a series of short suggestions to Motorola on how to improve the<br=
>
design.=C2=A0 This was published in Computer Architecture News.=C2=A0 For t=
he<br>
68010 they actually did one of the ideas, the &quot;loop mode&quot; that wo=
uld<br>
detect a 1-instruction backward decrement-and-branch loop, and stop<br>
continually re-fetching the two instructions.=C2=A0 This made<br>
memory-to-memory or register-vs-memory instruction loops run at almost<br>
the speed of memory, which was a big improvement for bcopy, bzero,<br>
add-up-a-vector-of-integers, etc.<br>
<br>
I&#39;ll append a USENET posting about the 68000 patents, followed by my<br=
>
addendum after visiting the Patent office.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 John<br>
<br>
From decwrl!decvax!harpo!npoiv!npois!houxm!houxa!houxk!tdl (T.LOVETT) Tue M=
ar 15 16:55:28 1983<br>
Subject: 68000: 16 bits. With references<br>
Newsgroups: net.micro.68k<br>
<br>
With due respect to Henry Spencer I feel that I must correct<br>
some of his statements regarding the 68000. He is correct in<br>
saying that the 68000 is basically 16 bits wide; however,<br>
his explanation of the segmented bus is incorrect. <br>
<br>
The datapath of the 68000 is divided into three pieces, each of<br>
which has two busses, address and data, running through it. Six<br>
busses total. There are muxes which can be switched so that all<br>
address busses are connected and all data busses are connected.<br>
The three sections of the datapath are the data section<br>
(includes low 16 bits of all data registers and ALU), the<br>
&quot;low&quot; section (contains the low 16 bits of address registers and<=
br>
the low half of the Address Adder(AAU)), and the &quot;high&quot; section<b=
r>
(contains high 16 bits of all address and data registers and<br>
the upper half of the AAU).<br>
<br>
Theoretically they could do 6 16 bit transfers simultaneously,<br>
but in looking through the microcode I don&#39;t remember seeing more<br>
than three transfers at a time. The &quot;low&quot; and &quot;high&quot; se=
ctions can<br>
be cascaded to provide a 32 bit arithmetic unit for address<br>
calculations. 32 bit data calculations must be done in two passes through<b=
r>
the ALU. <br>
<br>
For the masochists out there, you can learn more than you ever wanted<br>
to know about the 68000 by reading Motorola&#39;s patents on it. They are<b=
r>
available for some nominal fee (~ one dollar) from the Office<br>
of Patents and Trademarks in Arlington. The relevant patents are:<br>
<br>
1 - #4,307,445 &quot;Microprogrammed Control Apparatus Having a Two<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Level Control Store for Data Processor&quot;, T=
redennick, et al.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 First design of 68000 which was scrapped?<br>
<br>
2 - #4,296,469 &quot;Execution Unit for Data Processor using Segmented<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Bus structure&quot;, Gunter, et al.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 All about the 16 bit data path<br>
<br>
3 - #4,312,034 &quot;ALU and Condition Code Control Unit for Data Processor=
&quot;,<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, et al.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Boring.<br>
<br>
4 - #4,325,121 &quot;Two-Level Control Store for Microprogrammed Data Proce=
ssor&quot;,<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter et al.<br>
<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Bonanza! Full of block diagrams and everything =
you ever wanted<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 to know. Includes complete listing of microcode=
 with<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick&#39;s &quot;hardware flowcharts&quot=
;.<br>
<br>
Hope this clears things up.<br>
<br>
Tom Lovett BTL Holmdel=C2=A0 harpo!houxk!tdl=C2=A0 201-949-0056<br>
<br>
<br>
My [gnu] notes on additional 68000 patents:<br>
<br>
Pat #=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0Appl #=C2=A0 Filed date=C2=A0=
 =C2=A0 =C2=A0 Issued date=C2=A0 =C2=A0 =C2=A0Inventors<br>
<br>
4,338,661=C2=A0 =C2=A0 =C2=A0 =C2=A0041,201 May 21, 1979=C2=A0 =C2=A0 Jul 6=
, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick &amp; Gu=
nter<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Conditional Branch Unit for Microprogrammed Dat=
a Processor<br>
<br>
4,342,078=C2=A0 =C2=A0 =C2=A0 =C2=A0041,202 May 21, 1979=C2=A0 =C2=A0 Jul 2=
7, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick &amp; Gu=
nter<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Instruction Register Sequence Decoder for Micro=
programmed<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Data Processor and Method<br>
<br>
4,312,034=C2=A0 =C2=A0 =C2=A0 =C2=A0041,203 May 21, 1979=C2=A0 =C2=A0 Jan 1=
9, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, Hobbs, Spak=
, Tredennick<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 ALU and Condition Code Control Unit for Data Pr=
ocessor<br>
<br>
4,325,121=C2=A0 =C2=A0 =C2=A0 =C2=A0041,135 May 21, 1979=C2=A0 =C2=A0 Apr 1=
3, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, Tredennick<=
br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Two-Level Control Store for Microprogrammed Dat=
a Processor<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Bonanza! Full of bl=
ock diagrams and everything you ever wanted<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 to know. Includes c=
omplete listing of microcode with<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick&#39;s &q=
uot;hardware flowcharts&quot;.<br>
<br>
4,296,469=C2=A0 =C2=A0 =C2=A0 =C2=A0961,798 Nov 17, 1978=C2=A0 =C2=A0 Oct 2=
0, 1981<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, Tredennick,=
 McAlister<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Execution Unit for Data Processor Using Segment=
ed Bus Structure<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 All about the 16 bi=
t data path<br>
<br>
4,348,722=C2=A0 =C2=A0 =C2=A0 =C2=A0136,845 Apr 3, 1980=C2=A0 =C2=A0 =C2=A0=
Sep 7, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, Crudele, Zo=
lnowsky, Mothersole<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Bus Error Recognition for Microprogrammed Data =
Processor<br>
<br>
4,349,873=C2=A0 =C2=A0 =C2=A0 =C2=A0136,593 Apr 2, 1980=C2=A0 =C2=A0 =C2=A0=
Sep 14, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Gunter, Zolnowsky, =
Crudele<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Microprocessor Interrupt Processing<br>
<br>
4,524,415=C2=A0 =C2=A0 =C2=A0 =C2=A0447,721 Dec 7, 1982=C2=A0 =C2=A0 =C2=A0=
Jun 18, 1985<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Mills, Moyer, MacGr=
egor, Zolnowsky<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Virtual Machine Data Processor<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 68010 changes to 68=
000<br>
<br>
4,348,741=C2=A0 =C2=A0 =C2=A0 =C2=A0169,558 Jul 17, 1980=C2=A0 =C2=A0 Sep 7=
, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 McAlister, Gunter, =
Spak, Schriber<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Priority Encoder<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Used to decode the =
bit masks for MOVEM.<br>
<br>
XXXXXXXXX=C2=A0 =C2=A0 =C2=A0 =C2=A0446,801 Dec 7, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Crudele, Zolnowsky,=
 Moyer, MacGregor<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Virtual Memory Data Processor<br>
<br>
XXXXXXXXX=C2=A0 =C2=A0 =C2=A0 =C2=A0447,600 Dec 7, 1982<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 MacGregor, Moyer, M=
ills Jr, Zolnowsky<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Data Processor Version Validation<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 About how bus error=
s store a CPU mask version # to<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 prevent their being=
 restarted on a different CPU mask<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 in a multiprocessor=
 system<br>
<br>
XXXXXXXXX=C2=A0 =C2=A0 =C2=A0 =C2=A0961,796 Nov 17, 1978<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick et al<br=
>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Microprogrammed Control Apparatus for Data Proc=
essor<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 (continued into 4,3=
25,121, probably never issued)<br>
<br>
XXXXXXXXX=C2=A0 =C2=A0 =C2=A0 =C2=A0961,797 Nov 17, 1978<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 McAlister et al<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Multi-port RAM Structure for Data Processor Reg=
isters<br>
<br>
4,307,445=C2=A0 =C2=A0 =C2=A0 =C2=A0961,796 Nov 17, 1978<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 Tredennick, et al<b=
r>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Microprogrammed Control Apparatus Having a Two =
Level<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Control Store for Data Processor<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0 First design of 680=
00 which was scrapped?<br>
<br>
</blockquote></div></div>-- <br><div dir=3D"ltr" data-smartmail=3D"gmail_si=
gnature">Sent from a handheld expect more typos than usual</div>
</blockquote></div></div>-- <br><div dir=3D"ltr" class=3D"gmail_signature" =
data-smartmail=3D"gmail_signature">Sent from a handheld expect more typos t=
han usual</div>

--0000000000009167ed05ba78811a--
