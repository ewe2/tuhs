From: tfb@tfeb.org (Tim Bradshaw)
Date: Sun, 26 Feb 2017 16:06:07 +0000
Subject: [TUHS] Un-released/internal/special UNIX versions/ports during
 the years?
In-Reply-To: <CAHfSdrUsMzu-KB6fFGp9XeZbr5ecxvnEPzGS-CQ+jRQqGuFDGg@mail.gmail.com>
References: <20170226123956.DBD3C18C088@mercury.lcs.mit.edu>
 <BA1995BD-B9D1-4F88-9690-45B36CE59347@tfeb.org>
 <CAHfSdrUsMzu-KB6fFGp9XeZbr5ecxvnEPzGS-CQ+jRQqGuFDGg@mail.gmail.com>
Message-ID: <D9FEED81-2BE3-430E-ADF3-CDAA7DC25F24@tfeb.org>

On 26 Feb 2017, at 14:19, Michael Kerpan <madcrow.maxwell at gmail.com> wrote:
> 
> My supposition is that EMACS was basically Stallman's attempt to bring in all the things he liked about the LISP Machine environment into the Unix world through the back door. 

I think this is at least partly right, although either RMS didn't like most of the really interesting things about the LispM environments or he was not involved in many of the developments which made them interesting: I suspect at least partly the latter as he presumably stopped being involved when Symbolics became seriously independent from the MIT AI lab and/or the hardware became too divergent (the 3600 I guess: I don't know if the AI lab had lots of those, they were certainly eye-wateringly expensive for those of us bought up on Suns).  It may also be that a lot of the LispM stuff was genuinely hard to support on hardware which, for instance, wanted to distinguish between the OS and userland in any serious way until much later, although I'm reluctant to believe that.

Slightly more on-topic, it seems to me really interesting that both the LispM & Unix environments really aim at providing comfortable places for programmers to work in, and specifically for the people writing the OS to work in (as opposed to some other OSs which clearly were more aimed at production applications) but they did it in such enormously different ways.  Some of this has been fairly well-explored I think, by the famous 'worse is better' paper & its successors, but I don't think that's the whole answer.

Both Unix and the LispMs encourage a way of working where you build little tools to do things, often things that get used only a few times, but the *way* you do that is completely different.  And Unix is ultimately the better answer I think, because you can build a LispM-type environment on Unix but you can't realistically do it the other way around (the filesystem on LispMs was not up to what you'd want to run a Unix-style world on top of it, for one thing).

So I don't think that this has really been sorted-out yet: certainly I'm confused and I've spent a lot of time in both worlds.

--tim

