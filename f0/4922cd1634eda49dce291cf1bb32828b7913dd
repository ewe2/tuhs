From: random832@fastmail.com (Random832)
Date: Sun, 14 May 2017 23:43:39 -0400
Subject: [TUHS] C declarations.
In-Reply-To: <032701d2cd11$7be3f200$73abd600$@ronnatalie.com>
References: <e07f3d95ccda301190c64337424f49d8a0713316@webmail.yaccman.com>
 <6D3DCC45-B2C6-4374-83EE-F745C0AF7F36@bitblocks.com>
 <030d01d2cd06$c44e2840$4cea78c0$@ronnatalie.com>
 <013240e6-cc66-12c7-325d-a1edf4107726@kilonet.net>
 <CAEoi9W5RQxi+atsMaOWhNBFo=jahYH-HeHJh_QqHCh5FHxXZfw@mail.gmail.com>
 <032701d2cd11$7be3f200$73abd600$@ronnatalie.com>
Message-ID: <1494819819.1845291.976532104.41B8F245@webmail.messagingengine.com>

On Sun, May 14, 2017, at 20:23, Ron Natalie wrote:
> Actually, it is **Not a pointer**, it gets passed as a pointer, but it is
> an array on both ends.

I'm not sure what you mean by "on both ends". It is a pointer in the
function. sizeof(dst) is 2, not 256, even if it were declared as int
dst[128].

On Sun, May 14, 2017, at 19:34, Arthur Krewat wrote:
> Is it really a kludge? It's a pointer.
> 
> int array[128];
> 
> Want to reference the array in a memcpy? Do: memcpy(destination, array, 
> sizeof(array));

The argument is that that should have to be memcpy(&destination, &array,
sizeof(array)), the same as if you were copying between two structs.

